[{"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/history.js":"1","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/util.ts":"2","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages.tsx":"3","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/TreatmentOrdersPage.tsx":"4","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/EyeShopeHome.tsx":"5","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/layouts/main_layout/index.tsx":"6","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ConfirmFollowUpOrderForm.tsx":"7","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/PharmacyAdminPage.tsx":"8","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/layouts/main_layout/footer.tsx":"9","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/HpiAdminPage.tsx":"10","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientContactInfo.tsx":"11","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Patient/patient_tabs.tsx":"12","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ActionBar/index.tsx":"13","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddTreatmentTypeForm.tsx":"14","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddSurgicalProcedureTypeForm.tsx":"15","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddBillingForm.tsx":"16","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/Modal.tsx":"17","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/StickieComponent.tsx":"18","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SaveLifestyleForm.tsx":"19","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdatePastHospitalizationForm.tsx":"20","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/HistoryComponent.tsx":"21","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/TreatmentPlanPage.tsx":"22","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/DiagnosticProcedurePage.tsx":"23","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/PatientDetails.tsx":"24","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChiefComplaintTypesAdminTable.tsx":"25","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PharmacyOrdersList.tsx":"26","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientRegistrationLayout.tsx":"27","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChatComponent.tsx":"28","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/TreatmentTypes.tsx":"29","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateEyeGlassPrescriptionForm.tsx":"30","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/VisualAcuityForm.tsx":"31","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/DiagnosticProcedureTypes.tsx":"32","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateMedicationForm.tsx":"33","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChatUserListItem.tsx":"34","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/MessageBody.tsx":"35","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/App.tsx":"36","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/LoginPage.tsx":"37","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/SurgicalOrdersPage.tsx":"38","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/ProfilePage.tsx":"39","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Patient/index.tsx":"40","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/HandleReferralOrderForm.tsx":"41","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/CompleteEyewearPrescriptionOrder.tsx":"42","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientRegistrationEmergencyInfoForm.tsx":"43","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/CompleteLabOrderForm.tsx":"44","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientEmergencyContactInfo.tsx":"45","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/RefractionNearForm.tsx":"46","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/WorkflowTable/index.tsx":"47","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/PaymentWaiversPage.tsx":"48","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/GeneralAdminPage.tsx":"49","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Patient/PatientsPage.tsx":"50","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddEyewearShopForm.tsx":"51","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateBillingForm.tsx":"52","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/IopSideInfo.tsx":"53","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/MedicationAllergiesPage.tsx":"54","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/LabPage.tsx":"55","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddAmendmentForm.tsx":"56","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OcularMotilityComponent.tsx":"57","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AllergyTable.tsx":"58","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SaveFamilyIllnessForm.tsx":"59","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SavePastIllnessForm.tsx":"60","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/RoomsAdminTable.tsx":"61","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AppointmentStatusAdminTable.tsx":"62","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChiefComplaintTypes.tsx":"63","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/index.tsx":"64","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/bottomsheet.tsx":"65","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/serviceWorkerRegistration.ts":"66","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/HomePage.tsx":"67","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/NewPatientPage.tsx":"68","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/home_tabs/index.tsx":"69","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ProviderOrdersTable.tsx":"70","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/EyeShopOrdersList.tsx":"71","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/EyewearShopAdminPage.tsx":"72","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/TreatmentTypeAdminPage.tsx":"73","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/DiagnosticProcedureTypeAdminPage.tsx":"74","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/table_pagination/index.tsx":"75","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/QueueDestinationAdminTable.tsx":"76","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SearchBar.tsx":"77","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/AppointmentDetails.tsx":"78","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/NewChatDialog.tsx":"79","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/DiagnosticOrdersTable.tsx":"80","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/ReferralPage.tsx":"81","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/PreOpPage.tsx":"82","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/SideNav.tsx":"83","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/HistoryPage.tsx":"84","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/Accordion/index.tsx":"85","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateAllergyForm.tsx":"86","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/EyeGlassTable.tsx":"87","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/CoverTestComponent.tsx":"88","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/IopForm.tsx":"89","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AutocompleteInput.tsx":"90","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/reportWebVitals.ts":"91","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/cache.ts":"92","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/notification.tsx":"93","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/protected_route.tsx":"94","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/RegisterPage.tsx":"95","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/_repository/index.tsx":"96","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/_db/index.tsx":"97","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/DiagnosticOrdersPage.tsx":"98","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/ClinicianHome.tsx":"99","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/LabOrdersPage.tsx":"100","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/ChatsPage.tsx":"101","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/UpdatePatientPage.tsx":"102","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/ReferralOrders.tsx":"103","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/ReceptionHome.tsx":"104","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/FolloupOrdersPage.tsx":"105","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/PharmacyHome.tsx":"106","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UserRegistrationForm.tsx":"107","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/404/404.tsx":"108","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/index.tsx":"109","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/index.tsx":"110","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/CompleteDiagnosticOrderForm.tsx":"111","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/HandleOrderScheduleForm.tsx":"112","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/LabOrdersTable.tsx":"113","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Patient/PatientDetailsPage.tsx":"114","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PrescriptionOrdersToolbar.tsx":"115","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/FileUploaderComponent.tsx":"116","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/CompleteMedicalPrescriptionOrder.tsx":"117","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrdersTable.tsx":"118","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrdersToolbar.tsx":"119","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/ProfileTabs.tsx":"120","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AppointmentForm/index.tsx":"121","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/PatientEncounterLimitPage.tsx":"122","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/UserAdminPage.tsx":"123","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/SurgicalProcedureTypeAdminPage.tsx":"124","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/MedicationAdminPage.tsx":"125","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/SupplyAdminPage.tsx":"126","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/LabratoryTypeAdminPage.tsx":"127","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/CalendarEvent.tsx":"128","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientDocuments.tsx":"129","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/FileViewer.tsx":"130","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientBasicInfo.tsx":"131","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/models/models.tsx":"132","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/MenuComponent.tsx":"133","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/tabs/index.tsx":"134","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/RefractionDistanceForm.tsx":"135","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/BillingsAdminPage.tsx":"136","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/Header/index.tsx":"137","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateEyewearShopForm.tsx":"138","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdatePharmacyForm.tsx":"139","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdatePatientEncounterLimitForm.tsx":"140","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UserUpdateForm.tsx":"141","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddLabTypeForm.tsx":"142","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/HpiComponentTypeAdminTable.tsx":"143","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientInfoBlock.tsx":"144","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/VisitTypesAdminTable.tsx":"145","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddDiagnosticProcedureTypeForm.tsx":"146","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateDiagnosticProcedureTypeForm.tsx":"147","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UserTypeAdminTable.tsx":"148","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PastIllnessTypeAdminTable.tsx":"149","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SearchBarMedications.tsx":"150","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SearchBarAppointments.tsx":"151","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/LifestyleTypeAdminTable.tsx":"152","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/DiagnosisAdminTable.tsx":"153","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateLabTypeForm.tsx":"154","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/HpiComponentAdminTable.tsx":"155","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateTreatmentTypeForm.tsx":"156","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateSurgicalProcedureTypeForm.tsx":"157","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddPatientEncounterLimitForm.tsx":"158","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddPharmacyForm.tsx":"159","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/NavItem.tsx":"160","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/AppointmentsPage.tsx":"161","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/_context/AppointmentContext.tsx":"162","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientRegistrationDocumentsForm.tsx":"163","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientRegistrationDemographicForm.tsx":"164","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientRegistrationContactInfoForm.tsx":"165","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChatList.tsx":"166","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/stat_card/index.tsx":"167","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/PreanestheticPage.tsx":"168","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/FollowUpPage.tsx":"169","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/MedicationSideInfo.tsx":"170","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/VisionSideInfo.tsx":"171","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChatListItem.tsx":"172","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ProgressNoteComponent.tsx":"173","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/TreatmentObjectivePage.tsx":"174","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChatBubble.tsx":"175","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/SummaryPage.tsx":"176","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/IntraOpPage.tsx":"177","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/SurgeryPage.tsx":"178","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChatAvatar.tsx":"179","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/PrescriptionPage.tsx":"180","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/DifferentialDiagnosis.tsx":"181","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/Diagnosis.tsx":"182","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/VitalSigns.tsx":"183","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/Examination.tsx":"184","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/ChiefComplaints.tsx":"185","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/spinner/index.tsx":"186","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrderFollowUpForm.tsx":"187","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrderReferralForm.tsx":"188","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/MedicationTable.tsx":"189","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SurgicalProcedureTypes.tsx":"190","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrderSurgicalProcedureForm.tsx":"191","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrderLabForm.tsx":"192","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/DiagnosisList.tsx":"193","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrderDiagnosticProcedureForm.tsx":"194","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SlitLampExamComponent.tsx":"195","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PupilsComponent.tsx":"196","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OpticDiscComponent.tsx":"197","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/FunduscopyComponent.tsx":"198","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateLifestyleForm.tsx":"199","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ExternalExamComponent.tsx":"200","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateFamilyIllnessForm.tsx":"201","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdatePastSurgeryForm.tsx":"202","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SavePastSurgeryForm.tsx":"203","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdatePastInjuryForm.tsx":"204","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SavePastInjuryForm.tsx":"205","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SavePastHospitalizationForm.tsx":"206","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdatePastIllnessForm.tsx":"207","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OtherVitalsForm.tsx":"208","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/LabComponent.tsx":"209","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/LabTypes.tsx":"210","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/DiagnosticProcedureComponent.tsx":"211","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddEyeGlassPrescriptionForm.tsx":"212","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/FavoriteMedicationList.tsx":"213","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddMedicalPrescriptionForm.tsx":"214","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddAllergyForm.tsx":"215","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SketchTool.tsx":"216"},{"size":147,"mtime":1628603641335,"results":"217","hashOfConfig":"218"},{"size":803,"mtime":1628602208382,"results":"219","hashOfConfig":"218"},{"size":8497,"mtime":1628491488046,"results":"220","hashOfConfig":"218"},{"size":5602,"mtime":1628580203115,"results":"221","hashOfConfig":"218"},{"size":4825,"mtime":1628491488050,"results":"222","hashOfConfig":"218"},{"size":1232,"mtime":1628530850767,"results":"223","hashOfConfig":"218"},{"size":12767,"mtime":1628491488022,"results":"224","hashOfConfig":"218"},{"size":8658,"mtime":1628491488046,"results":"225","hashOfConfig":"218"},{"size":139,"mtime":1628491488042,"results":"226","hashOfConfig":"218"},{"size":1214,"mtime":1628491488050,"results":"227","hashOfConfig":"218"},{"size":2208,"mtime":1628491488030,"results":"228","hashOfConfig":"218"},{"size":4136,"mtime":1628491488050,"results":"229","hashOfConfig":"218"},{"size":16822,"mtime":1628578498616,"results":"230","hashOfConfig":"218"},{"size":5419,"mtime":1628491488022,"results":"231","hashOfConfig":"218"},{"size":5755,"mtime":1628491488018,"results":"232","hashOfConfig":"218"},{"size":5268,"mtime":1628491488018,"results":"233","hashOfConfig":"218"},{"size":4406,"mtime":1628491488026,"results":"234","hashOfConfig":"218"},{"size":1892,"mtime":1628491488030,"results":"235","hashOfConfig":"218"},{"size":5193,"mtime":1628491488030,"results":"236","hashOfConfig":"218"},{"size":5614,"mtime":1628491488030,"results":"237","hashOfConfig":"218"},{"size":3149,"mtime":1628491488026,"results":"238","hashOfConfig":"218"},{"size":15488,"mtime":1628491488050,"results":"239","hashOfConfig":"218"},{"size":9278,"mtime":1628491488046,"results":"240","hashOfConfig":"218"},{"size":3509,"mtime":1628491488046,"results":"241","hashOfConfig":"218"},{"size":15320,"mtime":1628491488022,"results":"242","hashOfConfig":"218"},{"size":4379,"mtime":1628491488030,"results":"243","hashOfConfig":"218"},{"size":2276,"mtime":1628491488030,"results":"244","hashOfConfig":"218"},{"size":6714,"mtime":1628580166260,"results":"245","hashOfConfig":"218"},{"size":3699,"mtime":1628491488030,"results":"246","hashOfConfig":"218"},{"size":14006,"mtime":1628491488030,"results":"247","hashOfConfig":"218"},{"size":6461,"mtime":1628491488030,"results":"248","hashOfConfig":"218"},{"size":3653,"mtime":1628491488026,"results":"249","hashOfConfig":"218"},{"size":10255,"mtime":1628491488030,"results":"250","hashOfConfig":"218"},{"size":1112,"mtime":1628491488022,"results":"251","hashOfConfig":"218"},{"size":472,"mtime":1628491488026,"results":"252","hashOfConfig":"218"},{"size":10310,"mtime":1628580667190,"results":"253","hashOfConfig":"218"},{"size":7817,"mtime":1628491488050,"results":"254","hashOfConfig":"218"},{"size":5089,"mtime":1628580196983,"results":"255","hashOfConfig":"218"},{"size":11050,"mtime":1628491488050,"results":"256","hashOfConfig":"218"},{"size":1400,"mtime":1628491488050,"results":"257","hashOfConfig":"218"},{"size":11722,"mtime":1628491488026,"results":"258","hashOfConfig":"218"},{"size":14248,"mtime":1628491488022,"results":"259","hashOfConfig":"218"},{"size":3719,"mtime":1628491488030,"results":"260","hashOfConfig":"218"},{"size":13194,"mtime":1628491488022,"results":"261","hashOfConfig":"218"},{"size":1898,"mtime":1628491488030,"results":"262","hashOfConfig":"218"},{"size":6527,"mtime":1628491488030,"results":"263","hashOfConfig":"218"},{"size":8280,"mtime":1628491488030,"results":"264","hashOfConfig":"218"},{"size":11966,"mtime":1628491488046,"results":"265","hashOfConfig":"218"},{"size":1456,"mtime":1628491488050,"results":"266","hashOfConfig":"218"},{"size":3222,"mtime":1628491488050,"results":"267","hashOfConfig":"218"},{"size":6430,"mtime":1628491488018,"results":"268","hashOfConfig":"218"},{"size":6622,"mtime":1628491488030,"results":"269","hashOfConfig":"218"},{"size":2718,"mtime":1628491488026,"results":"270","hashOfConfig":"218"},{"size":9687,"mtime":1628491488046,"results":"271","hashOfConfig":"218"},{"size":7320,"mtime":1628491488046,"results":"272","hashOfConfig":"218"},{"size":3030,"mtime":1628491488018,"results":"273","hashOfConfig":"218"},{"size":12003,"mtime":1628491488026,"results":"274","hashOfConfig":"218"},{"size":3619,"mtime":1628491488022,"results":"275","hashOfConfig":"218"},{"size":4479,"mtime":1628491488030,"results":"276","hashOfConfig":"218"},{"size":4473,"mtime":1628491488030,"results":"277","hashOfConfig":"218"},{"size":14638,"mtime":1628491488030,"results":"278","hashOfConfig":"218"},{"size":15597,"mtime":1628491488022,"results":"279","hashOfConfig":"218"},{"size":8336,"mtime":1628491488022,"results":"280","hashOfConfig":"218"},{"size":2417,"mtime":1628603289260,"results":"281","hashOfConfig":"218"},{"size":1973,"mtime":1628491488018,"results":"282","hashOfConfig":"218"},{"size":5256,"mtime":1628491488050,"results":"283","hashOfConfig":"218"},{"size":8809,"mtime":1628578624406,"results":"284","hashOfConfig":"218"},{"size":6958,"mtime":1628491488050,"results":"285","hashOfConfig":"218"},{"size":2988,"mtime":1628491488034,"results":"286","hashOfConfig":"218"},{"size":8104,"mtime":1628491488030,"results":"287","hashOfConfig":"218"},{"size":4381,"mtime":1628491488026,"results":"288","hashOfConfig":"218"},{"size":8742,"mtime":1628491488046,"results":"289","hashOfConfig":"218"},{"size":11302,"mtime":1628491488046,"results":"290","hashOfConfig":"218"},{"size":9720,"mtime":1628491488046,"results":"291","hashOfConfig":"218"},{"size":2993,"mtime":1628491488034,"results":"292","hashOfConfig":"218"},{"size":15511,"mtime":1628491488030,"results":"293","hashOfConfig":"218"},{"size":13329,"mtime":1628491488030,"results":"294","hashOfConfig":"218"},{"size":30794,"mtime":1628491488046,"results":"295","hashOfConfig":"218"},{"size":3207,"mtime":1628491488026,"results":"296","hashOfConfig":"218"},{"size":6499,"mtime":1628491488022,"results":"297","hashOfConfig":"218"},{"size":5056,"mtime":1628491488046,"results":"298","hashOfConfig":"218"},{"size":9230,"mtime":1628491488046,"results":"299","hashOfConfig":"218"},{"size":5294,"mtime":1628491488046,"results":"300","hashOfConfig":"218"},{"size":23543,"mtime":1628491488046,"results":"301","hashOfConfig":"218"},{"size":1960,"mtime":1628491488018,"results":"302","hashOfConfig":"218"},{"size":7886,"mtime":1628491488030,"results":"303","hashOfConfig":"218"},{"size":5842,"mtime":1628491488026,"results":"304","hashOfConfig":"218"},{"size":2792,"mtime":1628491488022,"results":"305","hashOfConfig":"218"},{"size":4313,"mtime":1628491488026,"results":"306","hashOfConfig":"218"},{"size":4230,"mtime":1628491488022,"results":"307","hashOfConfig":"218"},{"size":425,"mtime":1628491488050,"results":"308","hashOfConfig":"218"},{"size":768,"mtime":1628491488018,"results":"309","hashOfConfig":"218"},{"size":2297,"mtime":1628491488046,"results":"310","hashOfConfig":"218"},{"size":799,"mtime":1628491488034,"results":"311","hashOfConfig":"218"},{"size":563,"mtime":1628491488050,"results":"312","hashOfConfig":"218"},{"size":4470,"mtime":1628491488018,"results":"313","hashOfConfig":"218"},{"size":5617,"mtime":1628491488018,"results":"314","hashOfConfig":"218"},{"size":4914,"mtime":1628580175711,"results":"315","hashOfConfig":"218"},{"size":3900,"mtime":1628491488050,"results":"316","hashOfConfig":"218"},{"size":5165,"mtime":1628580184955,"results":"317","hashOfConfig":"218"},{"size":4562,"mtime":1628491488050,"results":"318","hashOfConfig":"218"},{"size":8147,"mtime":1628580207743,"results":"319","hashOfConfig":"218"},{"size":5174,"mtime":1628580190619,"results":"320","hashOfConfig":"218"},{"size":14801,"mtime":1628491488050,"results":"321","hashOfConfig":"218"},{"size":3992,"mtime":1628580180543,"results":"322","hashOfConfig":"218"},{"size":4758,"mtime":1628491488050,"results":"323","hashOfConfig":"218"},{"size":9896,"mtime":1628491488030,"results":"324","hashOfConfig":"218"},{"size":856,"mtime":1628491488018,"results":"325","hashOfConfig":"218"},{"size":1562,"mtime":1628491488050,"results":"326","hashOfConfig":"218"},{"size":5545,"mtime":1628491488046,"results":"327","hashOfConfig":"218"},{"size":14291,"mtime":1628491488022,"results":"328","hashOfConfig":"218"},{"size":25152,"mtime":1628491488026,"results":"329","hashOfConfig":"218"},{"size":6404,"mtime":1628491488026,"results":"330","hashOfConfig":"218"},{"size":9513,"mtime":1628491488050,"results":"331","hashOfConfig":"218"},{"size":3033,"mtime":1628491488030,"results":"332","hashOfConfig":"218"},{"size":8200,"mtime":1628491488026,"results":"333","hashOfConfig":"218"},{"size":6628,"mtime":1628491488022,"results":"334","hashOfConfig":"218"},{"size":6830,"mtime":1628491488026,"results":"335","hashOfConfig":"218"},{"size":3666,"mtime":1628491488026,"results":"336","hashOfConfig":"218"},{"size":1937,"mtime":1628491488050,"results":"337","hashOfConfig":"218"},{"size":18165,"mtime":1628491488022,"results":"338","hashOfConfig":"218"},{"size":6795,"mtime":1628491488046,"results":"339","hashOfConfig":"218"},{"size":12136,"mtime":1628491488046,"results":"340","hashOfConfig":"218"},{"size":11398,"mtime":1628491488046,"results":"341","hashOfConfig":"218"},{"size":16435,"mtime":1628491488046,"results":"342","hashOfConfig":"218"},{"size":20204,"mtime":1628491488046,"results":"343","hashOfConfig":"218"},{"size":9473,"mtime":1628491488046,"results":"344","hashOfConfig":"218"},{"size":915,"mtime":1628491488022,"results":"345","hashOfConfig":"218"},{"size":3409,"mtime":1628491488030,"results":"346","hashOfConfig":"218"},{"size":7776,"mtime":1628491488026,"results":"347","hashOfConfig":"218"},{"size":3481,"mtime":1628491488030,"results":"348","hashOfConfig":"218"},{"size":150455,"mtime":1628491488046,"results":"349","hashOfConfig":"218"},{"size":1858,"mtime":1628491488026,"results":"350","hashOfConfig":"218"},{"size":1325,"mtime":1628491488034,"results":"351","hashOfConfig":"218"},{"size":6603,"mtime":1628491488030,"results":"352","hashOfConfig":"218"},{"size":9435,"mtime":1628491488046,"results":"353","hashOfConfig":"218"},{"size":8704,"mtime":1628491488034,"results":"354","hashOfConfig":"218"},{"size":6704,"mtime":1628491488030,"results":"355","hashOfConfig":"218"},{"size":6630,"mtime":1628491488030,"results":"356","hashOfConfig":"218"},{"size":5039,"mtime":1628491488030,"results":"357","hashOfConfig":"218"},{"size":11229,"mtime":1628491488030,"results":"358","hashOfConfig":"218"},{"size":4535,"mtime":1628491488018,"results":"359","hashOfConfig":"218"},{"size":13854,"mtime":1628491488026,"results":"360","hashOfConfig":"218"},{"size":327,"mtime":1628491488030,"results":"361","hashOfConfig":"218"},{"size":14728,"mtime":1628491488030,"results":"362","hashOfConfig":"218"},{"size":4971,"mtime":1628491488018,"results":"363","hashOfConfig":"218"},{"size":6490,"mtime":1628491488030,"results":"364","hashOfConfig":"218"},{"size":14695,"mtime":1628491488030,"results":"365","hashOfConfig":"218"},{"size":15537,"mtime":1628491488030,"results":"366","hashOfConfig":"218"},{"size":828,"mtime":1628491488030,"results":"367","hashOfConfig":"218"},{"size":2209,"mtime":1628491488030,"results":"368","hashOfConfig":"218"},{"size":15404,"mtime":1628491488026,"results":"369","hashOfConfig":"218"},{"size":14716,"mtime":1628491488022,"results":"370","hashOfConfig":"218"},{"size":5867,"mtime":1628491488030,"results":"371","hashOfConfig":"218"},{"size":15247,"mtime":1628491488026,"results":"372","hashOfConfig":"218"},{"size":6991,"mtime":1628491488030,"results":"373","hashOfConfig":"218"},{"size":7483,"mtime":1628491488030,"results":"374","hashOfConfig":"218"},{"size":4769,"mtime":1628491488018,"results":"375","hashOfConfig":"218"},{"size":6358,"mtime":1628491488018,"results":"376","hashOfConfig":"218"},{"size":3339,"mtime":1628491488026,"results":"377","hashOfConfig":"218"},{"size":16421,"mtime":1628491488046,"results":"378","hashOfConfig":"218"},{"size":413,"mtime":1628491488018,"results":"379","hashOfConfig":"218"},{"size":4043,"mtime":1628491488030,"results":"380","hashOfConfig":"218"},{"size":8586,"mtime":1628491488030,"results":"381","hashOfConfig":"218"},{"size":6273,"mtime":1628491488030,"results":"382","hashOfConfig":"218"},{"size":624,"mtime":1628491488022,"results":"383","hashOfConfig":"218"},{"size":591,"mtime":1628491488034,"results":"384","hashOfConfig":"218"},{"size":71240,"mtime":1628491488046,"results":"385","hashOfConfig":"218"},{"size":5692,"mtime":1628491488046,"results":"386","hashOfConfig":"218"},{"size":1289,"mtime":1628491488026,"results":"387","hashOfConfig":"218"},{"size":4351,"mtime":1628491488030,"results":"388","hashOfConfig":"218"},{"size":2719,"mtime":1628491488022,"results":"389","hashOfConfig":"218"},{"size":15119,"mtime":1628491488030,"results":"390","hashOfConfig":"218"},{"size":2618,"mtime":1628491488046,"results":"391","hashOfConfig":"218"},{"size":702,"mtime":1628491488022,"results":"392","hashOfConfig":"218"},{"size":25610,"mtime":1628491488046,"results":"393","hashOfConfig":"218"},{"size":31717,"mtime":1628491488046,"results":"394","hashOfConfig":"218"},{"size":7933,"mtime":1628491488046,"results":"395","hashOfConfig":"218"},{"size":383,"mtime":1628491488022,"results":"396","hashOfConfig":"218"},{"size":14464,"mtime":1628491488046,"results":"397","hashOfConfig":"218"},{"size":8464,"mtime":1628491488046,"results":"398","hashOfConfig":"218"},{"size":7705,"mtime":1628491488046,"results":"399","hashOfConfig":"218"},{"size":3506,"mtime":1628491488050,"results":"400","hashOfConfig":"218"},{"size":9961,"mtime":1628491488046,"results":"401","hashOfConfig":"218"},{"size":23950,"mtime":1628491488046,"results":"402","hashOfConfig":"218"},{"size":210,"mtime":1628491488034,"results":"403","hashOfConfig":"218"},{"size":3021,"mtime":1628491488026,"results":"404","hashOfConfig":"218"},{"size":4304,"mtime":1628491488026,"results":"405","hashOfConfig":"218"},{"size":6102,"mtime":1628491488026,"results":"406","hashOfConfig":"218"},{"size":3794,"mtime":1628491488030,"results":"407","hashOfConfig":"218"},{"size":8700,"mtime":1628491488026,"results":"408","hashOfConfig":"218"},{"size":5726,"mtime":1628491488026,"results":"409","hashOfConfig":"218"},{"size":9639,"mtime":1628491488022,"results":"410","hashOfConfig":"218"},{"size":6182,"mtime":1628491488026,"results":"411","hashOfConfig":"218"},{"size":15511,"mtime":1628491488030,"results":"412","hashOfConfig":"218"},{"size":2680,"mtime":1628491488030,"results":"413","hashOfConfig":"218"},{"size":8380,"mtime":1628491488026,"results":"414","hashOfConfig":"218"},{"size":6985,"mtime":1628491488026,"results":"415","hashOfConfig":"218"},{"size":5464,"mtime":1628491488030,"results":"416","hashOfConfig":"218"},{"size":4433,"mtime":1628491488026,"results":"417","hashOfConfig":"218"},{"size":4729,"mtime":1628491488030,"results":"418","hashOfConfig":"218"},{"size":4144,"mtime":1628491488030,"results":"419","hashOfConfig":"218"},{"size":3852,"mtime":1628491488030,"results":"420","hashOfConfig":"218"},{"size":4025,"mtime":1628491488030,"results":"421","hashOfConfig":"218"},{"size":3834,"mtime":1628491488030,"results":"422","hashOfConfig":"218"},{"size":4912,"mtime":1628491488030,"results":"423","hashOfConfig":"218"},{"size":4698,"mtime":1628491488030,"results":"424","hashOfConfig":"218"},{"size":1748,"mtime":1628491488030,"results":"425","hashOfConfig":"218"},{"size":15302,"mtime":1628491488026,"results":"426","hashOfConfig":"218"},{"size":3447,"mtime":1628491488026,"results":"427","hashOfConfig":"218"},{"size":24002,"mtime":1628491488026,"results":"428","hashOfConfig":"218"},{"size":12791,"mtime":1628491488018,"results":"429","hashOfConfig":"218"},{"size":5049,"mtime":1628491488026,"results":"430","hashOfConfig":"218"},{"size":10173,"mtime":1628491488018,"results":"431","hashOfConfig":"218"},{"size":6643,"mtime":1628491488018,"results":"432","hashOfConfig":"218"},{"size":919,"mtime":1628491488030,"results":"433","hashOfConfig":"218"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18pryqw",{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"439","messages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"441","messages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"438"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"438"},{"filePath":"447","messages":"448","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"438"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"438"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"438"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"438"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"438"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"438"},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"438"},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"438"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"438"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"438"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"438"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"438"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"438"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"438"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"438"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"438"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529","usedDeprecatedRules":"438"},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"534","messages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"438"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539","usedDeprecatedRules":"438"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"438"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"438"},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"438"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"438"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"568","usedDeprecatedRules":"438"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"438"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"438"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"438"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"438"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"438"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"438"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601","usedDeprecatedRules":"438"},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"438"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"438"},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"438"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"438"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"438"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"438"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"626","usedDeprecatedRules":"438"},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"629","usedDeprecatedRules":"438"},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632","usedDeprecatedRules":"438"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"635","usedDeprecatedRules":"438"},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"438"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"438"},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"652","messages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656","usedDeprecatedRules":"438"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"659","usedDeprecatedRules":"438"},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"438"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"673","usedDeprecatedRules":"438"},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"438"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"438"},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"438"},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691","usedDeprecatedRules":"438"},{"filePath":"692","messages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694","usedDeprecatedRules":"438"},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"697","usedDeprecatedRules":"438"},{"filePath":"698","messages":"699","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"700","usedDeprecatedRules":"438"},{"filePath":"701","messages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703","usedDeprecatedRules":"438"},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706","usedDeprecatedRules":"438"},{"filePath":"707","messages":"708","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"709","messages":"710","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"715","usedDeprecatedRules":"438"},{"filePath":"716","messages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718","usedDeprecatedRules":"438"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"438"},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724","usedDeprecatedRules":"438"},{"filePath":"725","messages":"726","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"438"},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730","usedDeprecatedRules":"438"},{"filePath":"731","messages":"732","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"733","messages":"734","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"737","messages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741","usedDeprecatedRules":"438"},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"744","usedDeprecatedRules":"438"},{"filePath":"745","messages":"746","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"747","usedDeprecatedRules":"438"},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"750","usedDeprecatedRules":"438"},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753","usedDeprecatedRules":"438"},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"756","usedDeprecatedRules":"438"},{"filePath":"757","messages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"759","usedDeprecatedRules":"438"},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"764","messages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"766","usedDeprecatedRules":"438"},{"filePath":"767","messages":"768","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"769","messages":"770","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773","usedDeprecatedRules":"438"},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"776","usedDeprecatedRules":"438"},{"filePath":"777","messages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"779","messages":"780","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"781","usedDeprecatedRules":"438"},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"784","usedDeprecatedRules":"438"},{"filePath":"785","messages":"786","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"787","usedDeprecatedRules":"438"},{"filePath":"788","messages":"789","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"792","usedDeprecatedRules":"438"},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"795","usedDeprecatedRules":"438"},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798","usedDeprecatedRules":"438"},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"803","messages":"804","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"805","usedDeprecatedRules":"438"},{"filePath":"806","messages":"807","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"808","messages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"810","usedDeprecatedRules":"438"},{"filePath":"811","messages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"813","usedDeprecatedRules":"438"},{"filePath":"814","messages":"815","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"816","usedDeprecatedRules":"438"},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"819","messages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"821","messages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"823","usedDeprecatedRules":"438"},{"filePath":"824","messages":"825","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"826","usedDeprecatedRules":"438"},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"829","usedDeprecatedRules":"438"},{"filePath":"830","messages":"831","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"832","usedDeprecatedRules":"438"},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"835","usedDeprecatedRules":"438"},{"filePath":"836","messages":"837","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"838","usedDeprecatedRules":"438"},{"filePath":"839","messages":"840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"845","messages":"846","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"847","usedDeprecatedRules":"438"},{"filePath":"848","messages":"849","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"850","messages":"851","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"852","usedDeprecatedRules":"438"},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"855","messages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"861","messages":"862","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"863","usedDeprecatedRules":"438"},{"filePath":"864","messages":"865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"866","messages":"867","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"868","messages":"869","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"870","messages":"871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"872","messages":"873","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"874","usedDeprecatedRules":"438"},{"filePath":"875","messages":"876","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"877","messages":"878","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"879","messages":"880","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"881","usedDeprecatedRules":"438"},{"filePath":"882","messages":"883","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"884","usedDeprecatedRules":"438"},{"filePath":"885","messages":"886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"887","messages":"888","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"889","messages":"890","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"891","messages":"892","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"893","usedDeprecatedRules":"438"},{"filePath":"894","messages":"895","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"896","usedDeprecatedRules":"438"},{"filePath":"897","messages":"898","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"899","usedDeprecatedRules":"438"},{"filePath":"900","messages":"901","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"902","usedDeprecatedRules":"438"},{"filePath":"903","messages":"904","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"905","usedDeprecatedRules":"438"},{"filePath":"906","messages":"907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"908","messages":"909","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"912","messages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"914","usedDeprecatedRules":"438"},{"filePath":"915","messages":"916","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"917","usedDeprecatedRules":"438"},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"920","messages":"921","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"922","messages":"923","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"924","usedDeprecatedRules":"438"},{"filePath":"925","messages":"926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"927","messages":"928","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"929","usedDeprecatedRules":"438"},{"filePath":"930","messages":"931","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"932","usedDeprecatedRules":"438"},{"filePath":"933","messages":"934","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"935","usedDeprecatedRules":"438"},{"filePath":"936","messages":"937","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"938","usedDeprecatedRules":"438"},{"filePath":"939","messages":"940","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"941","messages":"942","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"943","usedDeprecatedRules":"438"},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"946","messages":"947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"948","messages":"949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"950","messages":"951","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"952","messages":"953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"956","messages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"958","messages":"959","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"960","usedDeprecatedRules":"438"},{"filePath":"961","messages":"962","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"963","usedDeprecatedRules":"438"},{"filePath":"964","messages":"965","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"966","usedDeprecatedRules":"438"},{"filePath":"967","messages":"968","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"969","usedDeprecatedRules":"438"},{"filePath":"970","messages":"971","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"972","usedDeprecatedRules":"438"},{"filePath":"973","messages":"974","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"975","usedDeprecatedRules":"438"},{"filePath":"976","messages":"977","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"978","messages":"979","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"980","messages":"981","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/history.js",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/util.ts",[],["982","983"],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/TreatmentOrdersPage.tsx",["984","985"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState, useEffect } from \"react\";\nimport { OrdersToolbar } from \"../components/OrdersToolbar\";\nimport { OrdersTable } from \"../components/OrdersTable\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { formatDate } from \"../util\";\nimport {\n  MutationConfirmOrderArgs,\n  MutationScheduleTreatmentArgs,\n  Order,\n  OrderFilterInput,\n  PaginationInput,\n  Query,\n  QueryOrdersArgs,\n} from \"../models/models\";\nimport { HandleOrderScheduleForm } from \"../components/HandleOrderScheduleForm\";\nimport { useLocation } from \"react-router-dom\";\n\nconst GET_ORDERS = gql`\n  query GerOrders($page: PaginationInput!, $filter: OrderFilterInput) {\n    orders(page: $page, filter: $filter) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          user {\n            id\n            firstName\n            lastName\n          }\n          firstName\n          lastName\n          phoneNo\n          patientId\n          emergency\n          note\n          status\n          orderType\n          payments {\n            id\n            invoiceNo\n            status\n            billing {\n              id\n              item\n              code\n              price\n              credit\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\n\nexport const SCHEDULE_TREATMENT = gql`\n  mutation ScheduleTreatment($input: ScheduleTreatmentInput!) {\n    scheduleTreatment(input: $input) {\n      id\n    }\n  }\n`;\n\nconst CONFIRM_ORDER = gql`\n  mutation ConfirmOrder($orderId: ID!, $invoiceNo: String!) {\n    confirmPayment(orderId: $orderId, invoiceNo: $invoiceNo) {\n      id\n    }\n  }\n`;\n\nfunction useRouterQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport const TreatmentOrdersPage: React.FC = () => {\n  const query = useRouterQuery();\n  const queryUserId = query.get(\"userId\");\n  const queryStatus = query.get(\"status\");\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const [filter, setFilter] = useState<OrderFilterInput>({\n    date: new Date(),\n    userId: queryUserId === null ? \"all\" : queryUserId,\n    status: queryStatus === null ? \"all\" : queryStatus,\n    orderType: \"TREATMENT\",\n  });\n\n  const [confirmOrder] = useMutation<any, MutationConfirmOrderArgs>(\n    CONFIRM_ORDER,\n    {\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [scheduleTreatment] = useMutation<any, MutationScheduleTreatmentArgs>(\n    SCHEDULE_TREATMENT,\n    {\n      onCompleted(data) {\n        refetch();\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Patient scheduled for treatment successfully\",\n          variant: \"success\",\n        });\n        bottomSheetDispatch({ type: \"hide\" });\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const { data, refetch } = useQuery<Query, QueryOrdersArgs>(GET_ORDERS, {\n    variables: {\n      page: paginationInput,\n      filter: {\n        date: filter.date,\n        userId: filter.userId === \"all\" ? undefined : filter.userId,\n        status: filter.status === \"all\" ? undefined : filter.status,\n        orderType: filter.orderType,\n        searchTerm:\n          filter.searchTerm?.length === 0 ? undefined : filter.searchTerm,\n      },\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [filter, paginationInput]);\n\n  const handleClear = () => {\n    setFilter({\n      date: new Date(),\n      userId: \"all\",\n      status: \"all\",\n      orderType: \"TREATMENT\",\n    });\n  };\n\n  const handleNextClick = () => {\n    const totalPages = data?.orders.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleOrderClick = (order: Order) => {\n    bottomSheetDispatch({\n      type: \"show\",\n      snapPoint: 0,\n      children: (\n        <HandleOrderScheduleForm\n          selectedOrder={order}\n          title={`Treatment order for ${order.firstName} ${order.lastName}`}\n          onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n          onSubmit={(value: any) => {\n            scheduleTreatment({\n              variables: {\n                input: {\n                  orderId: order.id,\n                  roomId: value.roomId,\n                  checkInTime: formatDate(value.checkInTime),\n                  invoiceNo: value.invoiceNo,\n                },\n              },\n            });\n          }}\n        />\n      ),\n    });\n  };\n\n  return (\n    <div className=\"h-screen\">\n      <OrdersToolbar\n        filter={filter}\n        onClear={handleClear}\n        onChange={setFilter}\n      />\n\n      <OrdersTable\n        orders={data?.orders}\n        onNext={handleNextClick}\n        onPrev={handlePrevClick}\n        onItemClick={handleOrderClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/EyeShopeHome.tsx",["986","987"],"import { gql, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { CompleteEyewearPrescriptionOrder } from \"../components/CompleteEyewearPrescriptionOrder\";\nimport { EyewearShopOrdersList } from \"../components/EyeShopOrdersList\";\nimport { PrescriptionOrdersToolbar } from \"../components/PrescriptionOrdersToolbar\";\nimport {\n  EyewearPrescriptionOrder,\n  PaginationInput,\n  Query,\n  QueryRefractionArgs,\n  QuerySearchMedicationPrescriptionOrdersArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\n\nconst SEARCH_EYEWEAR_PRESCRIPTION_ORDERS = gql`\n  query SearchEyewearPrescriptionOrders(\n    $page: PaginationInput!\n    $filter: PrescriptionOrdersFilter\n    $prescribedDate: Time\n    $searchTerm: String\n  ) {\n    searchEyewearPrescriptionOrders(\n      page: $page\n      filter: $filter\n      prescribedDate: $prescribedDate\n      searchTerm: $searchTerm\n    ) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          eyewearShopId\n          patientChartId\n          firstName\n          lastName\n          phoneNo\n          userName\n          orderedBy {\n            id\n            firstName\n            lastName\n          }\n          eyewearPrescriptions {\n            id\n            glass\n            plastic\n            singleVision\n            photoChromatic\n            glareFree\n            scratchResistant\n            bifocal\n            progressive\n            twoSeparateGlasses\n            prescribedDate\n            history\n            status\n          }\n          status\n          createdAt\n        }\n      }\n    }\n  }\n`;\n\nexport const EyeShopHome: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 10,\n  });\n\n  const [filter, setFilter] = useState({\n    date: new Date(),\n    status: \"Ordered\",\n    userId: \"all\",\n    searchTerm: \"\",\n  });\n\n  const { data, refetch } = useQuery<\n    Query,\n    QuerySearchMedicationPrescriptionOrdersArgs\n  >(SEARCH_EYEWEAR_PRESCRIPTION_ORDERS, {\n    variables: {\n      page: paginationInput,\n      filter: {\n        status: filter.status === \"all\" ? undefined : filter.status,\n      },\n      prescribedDate: filter.date,\n      searchTerm: filter.searchTerm === \"\" ? undefined : filter.searchTerm,\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput, filter]);\n\n  const handleNextClick = () => {\n    const totalPages =\n      data?.searchMedicationPrescriptionOrders.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleItemClick = (value: EyewearPrescriptionOrder) => {\n    bottomSheetDispatch({\n      type: \"show\",\n      snapPoint: 0,\n      children: (\n        <CompleteEyewearPrescriptionOrder\n          item={value}\n          onSuccess={() => {\n            bottomSheetDispatch({ type: \"hide\" });\n\n            refetch();\n\n            notifDispatch({\n              type: \"show\",\n              notifTitle: \"Success\",\n              notifSubTitle: \"Prescription marked completed\",\n              variant: \"success\",\n            });\n          }}\n          onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n        />\n      ),\n    });\n  };\n\n  return (\n    <div className=\"h-screen mb-20\">\n      <PrescriptionOrdersToolbar\n        date={filter.date}\n        onDateChange={(value) => {\n          setFilter({\n            ...filter,\n            date: value,\n          });\n        }}\n        status={filter.status}\n        onStatusChange={(value) => {\n          setFilter({\n            ...filter,\n            status: value,\n          });\n        }}\n        searchTerm={filter.searchTerm}\n        onSearchTermChange={(value) => {\n          setFilter({\n            ...filter,\n            searchTerm: value,\n          });\n        }}\n        onClear={() => {\n          setFilter({\n            date: new Date(),\n            status: \"Ordered\",\n            userId: \"all\",\n            searchTerm: \"\",\n          });\n        }}\n      />\n\n      <EyewearShopOrdersList\n        items={data?.searchEyewearPrescriptionOrders.edges.map((e) => e?.node)}\n        totalCount={data?.searchEyewearPrescriptionOrders.totalCount ?? 0}\n        onClick={handleItemClick}\n        onNextPage={handleNextClick}\n        onPrevPage={handlePreviousClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/layouts/main_layout/index.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ConfirmFollowUpOrderForm.tsx",["988","989"],"import FullCalendar, { DatesSetArg, EventClickArg } from \"@fullcalendar/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { gql, useLazyQuery, useMutation, useQuery } from \"@apollo/client\";\nimport {\n  ConfirmFollowOrderInput,\n  MutationConfirmFollowUpOrderArgs,\n  Order,\n  PaginationInput,\n  Query,\n  QueryPatientEncounterLimitByUserArgs,\n  QuerySearchAppointmentsArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { parseISO } from \"date-fns\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { CalendarEvent } from \"./CalendarEvent\";\nimport { formatDate } from \"../util\";\n\nconst APPOINTMENT_LOOKUPS = gql`\n  query AppointmentLookups(\n    $page: PaginationInput!\n    $userTypeTitle: String!\n  ) {\n    rooms(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n\n    visitTypes(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n\n    consultationBillings {\n      id\n      item\n      code\n      price\n      credit\n      remark\n    }\n\n    appointmentStatuses(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n\n    getByUserTypeTitle(input: $userTypeTitle) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\n\nconst CONFIRM_FOLLOWUP_ORDER = gql`\n  mutation ConfirmFollowupOrder($input: ConfirmFollowOrderInput!) {\n    confirmFollowUpOrder(input: $input) {\n      id\n    }\n  }\n`;\n\nconst SEARCH_APPOINTMENTS = gql`\n  query SearchAppointments(\n    $input: AppointmentSearchInput!\n    $page: PaginationInput!\n  ) {\n    searchAppointments(input: $input, page: $page) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          providerName\n          checkInTime\n          checkedInTime\n          checkedOutTime\n          patient {\n            id\n            firstName\n            lastName\n            phoneNo\n          }\n          room {\n            id\n            title\n          }\n          visitType {\n            id\n            title\n          }\n          appointmentStatus {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst GET_PATIENT_ENCOUNTER_LIMIT = gql`\n  query PatientEncounterLimit($userId: ID!) {\n    patientEncounterLimitByUser(userId: $userId) {\n      id\n      userId\n      dailyLimit\n      overbook\n    }\n  }\n`;\n\ninterface Props {\n  selectedOrder: Order;\n  title: string;\n  onSuccess: () => void;\n  onCancel: () => void;\n  onSubmit: (value: any) => void;\n}\n\nexport const ConfirmFollowUpOrderForm: React.FC<Props> = ({\n  selectedOrder,\n  title,\n  onCancel,\n  onSuccess,\n  onSubmit,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit, setValue, watch, getValues } =\n    useForm<ConfirmFollowOrderInput>();\n  const appointmentInput = watch();\n\n  const calendarRef = React.createRef<FullCalendar>();\n\n  const [order, setOrder] = useState<Order>(selectedOrder);\n  const [paginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const lookupQuery = useQuery<Query, any>(APPOINTMENT_LOOKUPS, {\n    variables: { page: paginationInput, userTypeTitle: \"Physician\" },\n  });\n\n  const patientEncounterLimitQuery = useLazyQuery<\n    Query,\n    QueryPatientEncounterLimitByUserArgs\n  >(GET_PATIENT_ENCOUNTER_LIMIT);\n\n  const patientEncounterLimit =\n    patientEncounterLimitQuery[1].data?.patientEncounterLimitByUser;\n\n  const providerAppointmentsQuery = useLazyQuery<\n    Query,\n    QuerySearchAppointmentsArgs\n  >(SEARCH_APPOINTMENTS);\n\n  const events =\n    providerAppointmentsQuery[1].data?.searchAppointments.edges.map((e) => ({\n      id: e?.node.id,\n      title: `${e?.node.visitType.title} with ${e?.node.providerName}`,\n      patientName: `${e?.node.firstName} ${e?.node.lastName}`,\n      date: parseISO(e?.node.checkInTime),\n    }));\n\n  useEffect(() => {\n    const values = getValues();\n\n    if (selectedOrder.user.id && values.checkInTime) {\n      providerAppointmentsQuery[0]({\n        variables: {\n          page: { page: 0, size: 100 },\n          input: {\n            userId: selectedOrder.user.id,\n            checkInTime: new Date(values.checkInTime),\n          },\n        },\n      });\n\n      patientEncounterLimitQuery[0]({\n        variables: {\n          userId: selectedOrder.user.id,\n        },\n      });\n    }\n  }, [selectedOrder.user.id, appointmentInput.checkInTime]);\n\n  useEffect(() => {\n    const followUp = lookupQuery.data?.visitTypes.edges.find(\n      (e) => e?.node.title === \"Follow Up\"\n    );\n\n    if (followUp) {\n      setValue(\"visitTypeId\", followUp.node.id);\n    }\n  }, [lookupQuery.data?.visitTypes]);\n\n  const [confirmFollowup, { error }] = useMutation<\n    any,\n    MutationConfirmFollowUpOrderArgs\n  >(CONFIRM_FOLLOWUP_ORDER, {\n    onCompleted(data) {\n      setOrder({\n        ...order,\n        status: \"COMPLETED\",\n      });\n\n      onSuccess();\n    },\n    update: (cache, mutationResult) => {\n      cache.modify({\n        id: cache.identify(order),\n        fields: {\n          status() {\n            return \"COMPLETED\";\n          },\n        },\n      });\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const handleFormSubmit = (input: ConfirmFollowOrderInput) => {\n    input.orderId = order.id;\n    input.checkInTime = formatDate(input.checkInTime);\n    confirmFollowup({ variables: { input } });\n  };\n\n  const handleDates = (rangeInfo: DatesSetArg) => {};\n  const handleDateClick = (arg: EventClickArg) => {};\n\n  const openAgenda =\n    selectedOrder.user.id !== undefined &&\n    appointmentInput.checkInTime !== undefined &&\n    appointmentInput.checkInTime.length > 0;\n\n  const selectedUser = lookupQuery.data?.getByUserTypeTitle.find(\n    (e) => e.id.toString() === selectedOrder.user.id?.toString()\n  );\n\n  const providerAppointments =\n    providerAppointmentsQuery[1].data?.searchAppointments;\n  const scheduledToday = providerAppointments?.totalCount ?? 0;\n  const dailyLimit = patientEncounterLimit?.dailyLimit ?? 0;\n  const overbook = patientEncounterLimit?.overbook ?? 0;\n\n  const bookingLeft = dailyLimit - scheduledToday;\n  const overbooked =\n    dailyLimit < scheduledToday && scheduledToday < dailyLimit + overbook;\n  const fullyBooked = scheduledToday >= dailyLimit + overbook;\n\n  return (\n    <div>\n      <div className=\"z-40 pb-5 bg-white\">\n        <div className=\"flex divide-x-2 divide-gray-300 h-full\">\n          <div className=\"flex-1 px-6\">\n            <div className=\"container flex justify-center pt-4 pb-6\">\n              <form onSubmit={handleSubmit(handleFormSubmit)}>\n                <p className=\"text-2xl text-teal-700 font-extrabold tracking-wider\">\n                  {title}\n                </p>\n                <div className=\"mt-4\">\n                  <label\n                    htmlFor=\"checkInTime\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Check-In time\n                  </label>\n                  <input\n                    type=\"datetime-local\"\n                    name=\"checkInTime\"\n                    id=\"checkInTime\"\n                    required\n                    ref={register({ required: true })}\n                    className=\"mt-1 block w-full sm:text-md border-gray-300 border rounded-md\"\n                  />\n                </div>\n                <div className=\"mt-4\">\n                  <label\n                    htmlFor=\"roomId\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Room\n                  </label>\n                  <select\n                    id=\"roomId\"\n                    name=\"roomId\"\n                    required\n                    ref={register({ required: true })}\n                    className=\"mt-1 block w-full border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                  >\n                    {lookupQuery.data?.rooms.edges.map((e) => (\n                      <option key={e?.node.id} value={e?.node.id}>\n                        {e?.node.title}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"mt-4\">\n                  <label\n                    htmlFor=\"visitTypeId\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Visit Type\n                  </label>\n                  <select\n                    id=\"visitTypeId\"\n                    name=\"visitTypeId\"\n                    disabled\n                    ref={register({ required: true })}\n                    className=\"mt-1 block w-full border border-gray-300 bg-gray-100 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                  >\n                    {lookupQuery.data?.visitTypes.edges.map((e) => (\n                      <option key={e?.node.id} value={e?.node.id}>\n                        {e?.node.title}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"mt-4\">\n                  {error && (\n                    <p className=\"text-red-600\">Error: {error?.message}</p>\n                  )}\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md  focus:outline-none text-white bg-teal-700 hover:bg-teal-800\"\n                >\n                  Schedule\n                </button>\n              </form>\n            </div>\n          </div>\n          {openAgenda && (\n            <div className=\"flex-1 px-6\">\n              <div className=\"flex justify-between\">\n                <div>\n                  <p className=\"text-xl font-extrabold text-gray-800\">\n                    {`Dr. ${selectedUser?.firstName} ${selectedUser?.lastName}'s Appointments`}\n                  </p>\n                  {!overbooked && !fullyBooked && (\n                    <p className=\"text-green-600 font-semibold\">\n                      {`${scheduledToday} scheduled on this day, ${bookingLeft} left`}\n                    </p>\n                  )}\n\n                  {overbooked && !fullyBooked && (\n                    <p className=\"text-yellow-500 font-semibold\">\n                      {`Provider is overbooked with ${scheduledToday} patients`}\n                    </p>\n                  )}\n\n                  {fullyBooked && (\n                    <p className=\"text-red-500 font-semibold\">\n                      {`Provider is fully booked with ${scheduledToday} patients`}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <button onClick={() => onCancel()}>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                      className=\"text-gray-600 h-8 w-8\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M6 18L18 6M6 6l12 12\"\n                      />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n              <div className=\"mt-8\">\n                <FullCalendar\n                  ref={calendarRef}\n                  plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                  headerToolbar={{\n                    left: \"prev,next today\",\n                    center: \"title\",\n                    right: \"dayGridMonth,timeGridWeek,timeGridDay\",\n                  }}\n                  datesSet={handleDates}\n                  eventClick={handleDateClick}\n                  initialView=\"dayGridMonth\"\n                  events={events}\n                  eventContent={(event) => <CalendarEvent eventInfo={event} />}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/PharmacyAdminPage.tsx",["990"],"import React, { useEffect, useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport {\n  Maybe,\n  PharmacyEdge,\n  Query,\n  QueryPharmaciesArgs,\n} from \"../../models/models\";\nimport { AddPharmacyForm } from \"../../components/AddPharmacyForm\";\nimport { UpdatePharmacyForm } from \"../../components/UpdatePharmacyForm\";\n\nconst PHARMACIES = gql`\n  query Pharmacies($page: PaginationInput!) {\n    pharmacies(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          address\n          region\n          country\n          phone\n          inHouse\n          active\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nexport const PharmacyAdminPage: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState({\n    page: 1,\n    size: 10,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryPharmaciesArgs>(PHARMACIES, {\n    variables: {\n      page: paginationInput,\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.pharmacies.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"overflow-x-auto\">\n        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  colSpan={4}\n                  className=\"px-6 py-3 bg-gray-700 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                >\n                  Pharmacies\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                >\n                  <button\n                    onClick={() => {\n                      bottomSheetDispatch({\n                        type: \"show\",\n                        snapPoint: 0,\n                        children: (\n                          <AddPharmacyForm\n                            onSuccess={() => {\n                              bottomSheetDispatch({ type: \"hide\" });\n                              notifDispatch({\n                                type: \"show\",\n                                notifTitle: \"Success\",\n                                notifSubTitle:\n                                  \"Pharmacy has been added successfully\",\n                                variant: \"success\",\n                              });\n                              refetch();\n                            }}\n                            onCancel={() =>\n                              bottomSheetDispatch({ type: \"hide\" })\n                            }\n                          />\n                        ),\n                      });\n                    }}\n                    className=\"uppercase bg-gray-800 hover:bg-gray-600 py-1 px-2 rounded-md text-sm\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"h-6 w-6\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </div>\n                      <div className=\"font-semibold\">Add</div>\n                    </div>\n                  </button>\n                </th>\n              </tr>\n              <tr>\n                <th colSpan={5}>\n                  <input\n                    type=\"text\"\n                    name=\"search\"\n                    id=\"billings-search\"\n                    placeholder=\"Search\"\n                    className=\"p-3 pl-4 block w-full sm:text-md border-gray-300\"\n                  />\n                </th>\n              </tr>\n              <tr className=\"bg-gray-50\">\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Title\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Address\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Phone\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Type\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Active\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {data?.pharmacies.edges.map((value: Maybe<PharmacyEdge>) => (\n                <tr\n                  key={value?.node.id}\n                  className=\"border-b hover:bg-gray-100 cursor-pointer\"\n                  onClick={() => {\n                    bottomSheetDispatch({\n                      type: \"show\",\n                      snapPoint: 0,\n                      children: (\n                        <UpdatePharmacyForm\n                          onUpdateSuccess={() => {\n                            bottomSheetDispatch({ type: \"hide\" });\n\n                            notifDispatch({\n                              type: \"show\",\n                              notifTitle: \"Success\",\n                              notifSubTitle:\n                                \"Pharmacy has been updated successfully\",\n                              variant: \"success\",\n                            });\n\n                            refetch();\n                          }}\n                          onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                          values={value?.node}\n                        />\n                      ),\n                    });\n                  }}\n                >\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {value?.node.title}\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {value?.node.address}\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {value?.node.phone}\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\n                      {value?.node.inHouse ? \"In-House\" : \"External\"}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\n                      {value?.node.active ? \"Active\" : \"Inactive\"}\n                    </span>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <TablePagination\n            totalCount={data?.pharmacies.totalCount ?? 0}\n            onNext={handleNextClick}\n            onPrevious={handlePreviousClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/layouts/main_layout/footer.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/HpiAdminPage.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientContactInfo.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Patient/patient_tabs.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ActionBar/index.tsx",["991"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Query } from \"../../models/models\";\nimport { fromJS, List, Map } from \"immutable\";\nimport { parseJwt } from \"../../util\";\n\nexport const GET_NOTIFS = gql`\n  query GetNotifs {\n    notifs {\n      diagnosticProcedureOrders\n      labOrders\n      treatmentOrders\n      surgicalOrders\n      referralOrders\n      paymentWaivers\n    }\n  }\n`;\n\nconst ACCESS_TOKEN = gql`\n  query AccessToken {\n    accessToken @client\n  }\n`;\n\ninterface Props {\n  onPageSelect: (route: string) => void;\n}\n\nexport const Actionbar: React.FC<Props> = ({ onPageSelect }) => {\n  const actions: any = fromJS([\n    Map({\n      title: \"Home\",\n      cancellable: false,\n      route: \"/\",\n      match: [\"/\"],\n      icon: (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n          className=\"h-4 w-4\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"\n          />\n        </svg>\n      ),\n    }),\n    Map({\n      title: \"Messages\",\n      route: \"/chats\",\n      cancellable: true,\n      match: [\"/chats\"],\n      icon: (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n          className=\"h-4 w-4\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\"\n          />\n        </svg>\n      ),\n    }),\n  ]);\n\n  const [pages, setPages] = useState<List<any>>(actions);\n\n  const handleClick = (route: string) => {\n    onPageSelect(route);\n  };\n\n  const { data } = useQuery<Query>(GET_NOTIFS, {});\n\n  const accessTokenQuery = useQuery(ACCESS_TOKEN);\n\n  useEffect(() => {\n    const token = accessTokenQuery.data.accessToken;\n    if (token !== null) {\n      const claim = parseJwt(token);\n\n      let newPages: List<any> = pages;\n\n      const newPatientsIdx = newPages.findIndex((e) => {\n        return e?.get(\"title\") === \"New patient\";\n      });\n\n      const appointmentsIdx = newPages.findIndex((e) => {\n        return e?.get(\"title\") === \"Appointments\";\n      });\n\n      const patientsIdx = newPages.findIndex((e) => {\n        return e?.get(\"title\") === \"Patients\";\n      });\n\n      const diagnosticIdx = newPages.findIndex((e) => {\n        return e?.get(\"title\") === \"Diagnostic orders\";\n      });\n      const labIdx = newPages.findIndex(\n        (e) => e?.get(\"title\") === \"Lab orders\"\n      );\n      const treatmentIdx = newPages.findIndex(\n        (e) => e?.get(\"title\") === \"Treatment orders\"\n      );\n      const surgicalIdx = newPages.findIndex(\n        (e) => e?.get(\"title\") === \"Surgical orders\"\n      );\n\n      const followupIdx = newPages.findIndex(\n        (e) => e?.get(\"title\") === \"Follow-Up orders\"\n      );\n\n      const referralIdx = newPages.findIndex(\n        (e) => e?.get(\"title\") === \"Referrals\"\n      );\n\n      const adminIdx = newPages.findIndex((e) => e?.get(\"title\") === \"Admin\");\n\n      if (claim.UserType.includes(\"Receptionist\")) {\n        if (newPatientsIdx === -1) {\n          newPages = newPages.push(\n            fromJS({\n              title: \"New patient\",\n              route: \"/new-patient\",\n              cancellable: true,\n              match: [\"/new-patient\"],\n              icon: (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                  className=\"h-4 w-4\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z\"\n                  />\n                </svg>\n              ),\n            })\n          );\n        }\n\n        if (patientsIdx !== -1) {\n          newPages = newPages.push(\n            fromJS({\n              title: \"Patients\",\n              route: \"/patients\",\n              cancellable: true,\n              match: [\"/patients\", \"/patients/:patientId\"],\n              icon: (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-4 w-4\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\n                  />\n                </svg>\n              ),\n            })\n          );\n        }\n\n        if (diagnosticIdx === -1) {\n          newPages = newPages.push(\n            fromJS({\n              title: \"Diagnostic orders\",\n              route: \"/diagnostic-orders?status=ORDERED\",\n              cancellable: true,\n              match: [\"/diagnostic-orders\"],\n              icon: (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                  className=\"h-4 w-4\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M8 4H6a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-2m-4-1v8m0 0l3-3m-3 3L9 8m-5 5h2.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293h3.172a1 1 0 00.707-.293l2.414-2.414a1 1 0 01.707-.293H20\"\n                  />\n                </svg>\n              ),\n            })\n          );\n        }\n\n        if (labIdx === -1) {\n          newPages = newPages.push(\n            fromJS({\n              title: \"Lab orders\",\n              route: \"/lab-orders?status=ORDERED\",\n              cancellable: true,\n              match: [\"/lab-orders\"],\n              icon: (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                  className=\"h-4 w-4\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z\"\n                  />\n                </svg>\n              ),\n            })\n          );\n        }\n\n        if (treatmentIdx === -1) {\n          newPages = newPages.push(\n            fromJS({\n              title: \"Treatment orders\",\n              route: \"/treatment-orders?status=ORDERED\",\n              cancellable: true,\n              match: [\"/treatment-orders\"],\n              icon: (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                  className=\"h-4 w-4\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M8 4H6a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-2m-4-1v8m0 0l3-3m-3 3L9 8m-5 5h2.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293h3.172a1 1 0 00.707-.293l2.414-2.414a1 1 0 01.707-.293H20\"\n                  />\n                </svg>\n              ),\n            })\n          );\n        }\n\n        if (surgicalIdx === -1) {\n          newPages = newPages.push(\n            fromJS({\n              title: \"Surgical orders\",\n              route: \"/surgical-orders?status=ORDERED\",\n              cancellable: true,\n              match: [\"/surgical-orders\"],\n              icon: (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                  className=\"h-4 w-4\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M8 4H6a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-2m-4-1v8m0 0l3-3m-3 3L9 8m-5 5h2.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293h3.172a1 1 0 00.707-.293l2.414-2.414a1 1 0 01.707-.293H20\"\n                  />\n                </svg>\n              ),\n            })\n          );\n        }\n\n        if (followupIdx === -1) {\n          newPages = newPages.push(\n            fromJS({\n              title: \"Follow-Up orders\",\n              route: \"/followup-orders?status=ORDERED\",\n              cancellable: true,\n              match: [\"/followup-orders\"],\n              icon: (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                  className=\"h-4 w-4\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M8 4H6a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-2m-4-1v8m0 0l3-3m-3 3L9 8m-5 5h2.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293h3.172a1 1 0 00.707-.293l2.414-2.414a1 1 0 01.707-.293H20\"\n                  />\n                </svg>\n              ),\n            })\n          );\n        }\n\n        if (referralIdx === -1) {\n          newPages = newPages.push(\n            fromJS({\n              title: \"Referrals\",\n              route: \"/referrals\",\n              cancellable: true,\n              match: [\"/referrals\"],\n              icon: (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                  className=\"h-4 w-4\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M8 4H6a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-2m-4-1v8m0 0l3-3m-3 3L9 8m-5 5h2.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293h3.172a1 1 0 00.707-.293l2.414-2.414a1 1 0 01.707-.293H20\"\n                  />\n                </svg>\n              ),\n            })\n          );\n        }\n      }\n\n      if (\n        (claim.UserType.includes(\"Receptionist\") ||\n          claim.UserType.includes(\"Admin\") ||\n          claim.UserType.includes(\"Nurse\") ||\n          claim.UserType.includes(\"Physician\")) &&\n        appointmentsIdx === -1\n      ) {\n        newPages = newPages.push(\n          fromJS({\n            title: \"Appointments\",\n            route: \"/appointments\",\n            cancellable: true,\n            match: [\n              \"/appointments\",\n              \"/appointments/:appointmentId\",\n              \"/appointments/:appointmentId/patient-details\",\n              \"/appointments/:appointmentId/history\",\n              \"/appointments/:appointmentId/chief-complaints\",\n              \"/appointments/:appointmentId/past-medications-allergies\",\n              \"/appointments/:appointmentId/vital-signs\",\n              \"/appointments/:appointmentId/examination\",\n              \"/appointments/:appointmentId/diagnostics\",\n              \"/appointments/:appointmentId/labratory\",\n              \"/appointments/:appointmentId/pre-op\",\n              \"/appointments/:appointmentId/intra-op\",\n              \"/appointments/:appointmentId/tx-objective\",\n              \"/appointments/:appointmentId/diagnosis\",\n              \"/appointments/:appointmentId/differential-diagnosis\",\n              \"/appointments/:appointmentId/surgery\",\n              \"/appointments/:appointmentId/tx-plan\",\n              \"/appointments/:appointmentId/rx\",\n              \"/appointments/:appointmentId/referral\",\n              \"/appointments/:appointmentId/summary\",\n            ],\n            icon: (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                className=\"h-4 w-4\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"\n                />\n              </svg>\n            ),\n          })\n        );\n      }\n\n      if (adminIdx === -1 && claim.UserType.includes(\"Admin\")) {\n        newPages = newPages.push(\n          fromJS({\n            title: \"Admin\",\n            route: \"/admin\",\n            cancellable: true,\n            match: [\"/admin\"],\n            icon: (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                className=\"h-4 w-4\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M8 4H6a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-2m-4-1v8m0 0l3-3m-3 3L9 8m-5 5h2.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293h3.172a1 1 0 00.707-.293l2.414-2.414a1 1 0 01.707-.293H20\"\n                />\n              </svg>\n            ),\n          })\n        );\n      }\n\n      if (data?.notifs) {\n        newPages = newPages.withMutations((ctx) => {\n          if (diagnosticIdx !== -1) {\n            ctx.setIn(\n              [diagnosticIdx, \"notifs\"],\n              data.notifs.diagnosticProcedureOrders\n            );\n          }\n\n          if (labIdx !== -1) {\n            ctx.setIn([labIdx, \"notifs\"], data.notifs.labOrders);\n          }\n\n          if (treatmentIdx !== -1) {\n            ctx.setIn([treatmentIdx, \"notifs\"], data.notifs.treatmentOrders);\n          }\n\n          if (surgicalIdx !== -1) {\n            ctx.setIn([surgicalIdx, \"notifs\"], data.notifs.surgicalOrders);\n          }\n\n          if (referralIdx !== -1) {\n            ctx.setIn([referralIdx, \"notifs\"], data.notifs.referralOrders);\n          }\n\n          if (adminIdx !== -1) {\n            ctx.setIn([adminIdx, \"notifs\"], data.notifs.paymentWaivers);\n          }\n        });\n      }\n\n      setPages(newPages);\n    }\n  }, [accessTokenQuery.data, data]);\n\n  return (\n    <div className=\"bg-gray-200\">\n      <header className=\"bg-white shadow\">\n        <div className=\"mx-auto py-2 px-4 sm:px-6 lg:px-8\">\n          <div className=\"gap-2 w-full flex flex-wrap -m-1\">\n            {pages.toJS().map((e: any, i) => (\n              <Link\n                key={e.route}\n                to={e.route}\n                onClick={() => handleClick(e.route)}\n              >\n                <Chip key={i} action={e} />\n              </Link>\n            ))}\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n};\n\nconst Chip: React.FC<{\n  action: { title: string; icon: JSX.Element; notifs?: number };\n}> = ({ action }) => {\n  return (\n    <button\n      className={classnames(\n        \"flex space-x-2 items-center bg-gray-200 h-10 rounded-full text-sm text-gray-800 focus:outline-none focus:ring-1 focus:ring-gray-400 m-1 transform hover:scale-105\",\n        {\n          \"px-3\": !action.notifs,\n          \"px-2\": action.notifs,\n        }\n      )}\n    >\n      <div className=\"flex space-x-1 items-center\">\n        <div>{action.icon}</div>\n        <div>{action.title}</div>\n      </div>\n      {action.notifs !== undefined && action.notifs !== 0 && (\n        <div className=\"bg-red-500 text-white h-6 w-6 rounded-full flex items-center justify-center shadow-inner\">\n          {action.notifs}\n        </div>\n      )}\n    </button>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddTreatmentTypeForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddSurgicalProcedureTypeForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddBillingForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/Modal.tsx",["992"],"import { Fragment, useRef, useState } from \"react\";\nimport { Dialog, Transition } from \"@headlessui/react\";\nimport { ExclamationIcon } from \"@heroicons/react/outline\";\n\ninterface Props {\n  open: boolean;\n  title: string;\n  description: string;\n  positive: string;\n  negative: string;\n  onPositiveClick: () => void;\n  onNegativeClick: () => void;\n  onClose: () => void;\n}\n\nexport default function Modal(props: Props) {\n  const cancelButtonRef = useRef(null);\n\n  return (\n    <Transition.Root show={props.open} as={Fragment}>\n      <Dialog\n        as=\"div\"\n        static\n        className=\"fixed z-10 inset-0 overflow-y-auto\"\n        initialFocus={cancelButtonRef}\n        open={props.open}\n        onClose={props.onClose}\n      >\n        <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0\"\n            enterTo=\"opacity-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <Dialog.Overlay className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\n          </Transition.Child>\n\n          {/* This element is to trick the browser into centering the modal contents. */}\n          <span\n            className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\n            aria-hidden=\"true\"\n          >\n            &#8203;\n          </span>\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n            enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\n            leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n          >\n            <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\n              <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n                <div className=\"sm:flex sm:items-start\">\n                  <div className=\"mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-teal-100 sm:mx-0 sm:h-10 sm:w-10\">\n                    <ExclamationIcon\n                      className=\"h-6 w-6 text-teal-600\"\n                      aria-hidden=\"true\"\n                    />\n                  </div>\n                  <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                    <Dialog.Title\n                      as=\"h3\"\n                      className=\"text-lg leading-6 font-medium text-gray-900\"\n                    >\n                      {props.title}\n                    </Dialog.Title>\n                    <div className=\"mt-2\">\n                      <p className=\"text-sm text-gray-500\">\n                        {props.description}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n                <button\n                  type=\"button\"\n                  className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-teal-600 text-base font-medium text-white hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 sm:ml-3 sm:w-auto sm:text-sm\"\n                  onClick={() => props.onPositiveClick()}\n                  ref={cancelButtonRef}\n                >\n                  {props.positive}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\n                  onClick={() => props.onNegativeClick()}\n                >\n                  {props.negative}\n                </button>\n              </div>\n            </div>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  );\n}\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/StickieComponent.tsx",["993","994","995","996","997","998","999"],"import { gql, useMutation } from \"@apollo/client\";\nimport React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { AUTO_SAVE_INTERVAL } from \"..\";\nimport {\n  PatientChartUpdateInput,\n  MutationUpdatePatientChartArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport IndexedDb from \"../_db\";\n\nconst UPDATE_PATIENT_CHART = gql`\n  mutation UpdatePatientChart($input: PatientChartUpdateInput!) {\n    updatePatientChart(input: $input) {\n      id\n    }\n  }\n`;\n\nexport const Stickie: React.FC<{\n  stickieNote: string | undefined | null;\n  patientChartId: string | undefined;\n}> = ({ stickieNote, patientChartId }) => {\n  const { register, setValue, watch } = useForm<PatientChartUpdateInput>({\n    defaultValues: {\n      stickieNote: stickieNote,\n    },\n  });\n\n  useEffect(() => {\n    if (stickieNote) {\n      setValue(\"stickieNote\", stickieNote);\n    }\n  }, [stickieNote]);\n\n  const notifDispatch = useNotificationDispatch();\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChartId) {\n      const runIndexDb = async () => {\n        const chart: any = {\n          ...data,\n          patientChartId: patientChartId.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(chart, \"patient_chart\", patientChartId)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChartId]);\n\n  return (\n    <div className=\"shadow overflow-hidden h-36 bg-yellow-200\">\n      <div className=\"bg-yellow-300\">\n        <p className=\"text-xs text-gray-600 pl-2\">Stickie</p>\n      </div>\n      <textarea\n        name=\"stickieNote\"\n        ref={register}\n        className=\"w-full h-full bg-yellow-100 p-1 text-xs focus:outline-none border-none\"\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SaveLifestyleForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdatePastHospitalizationForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/HistoryComponent.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/TreatmentPlanPage.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/DiagnosticProcedurePage.tsx",["1000"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport { DiagnosticProcedureTypes } from \"../../components/DiagnosticProcedureTypes\";\nimport { DiagnosticProcedureComponent } from \"../../components/DiagnosticProcedureComponent\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport {\n  DiagnosicProcedureStatus,\n  DiagnosticProcedureType,\n  MutationDeleteOrderArgs,\n  PatientChart,\n  Query,\n  QueryDiagnosticProcedureOrderArgs,\n} from \"../../models/models\";\nimport classnames from \"classnames\";\nimport { OrderDiagnosticProcedureForm } from \"../../components/OrderDiagnosticProcedureForm\";\nimport { AppointmentContext } from \"../../_context/AppointmentContext\";\n\nconst GET_DIAGNOSTIC_PROCEDURE_ORDER = gql`\n  query DiagnosticProcedureOrder($patientChartId: ID!) {\n    diagnosticProcedureOrder(patientChartId: $patientChartId) {\n      status\n      createdAt\n      diagnosticProcedures {\n        id\n        rightEyeText\n        leftEyeText\n        generalText\n        leftEyeText\n        generalText\n        rightDistanceSubjectiveSph\n        leftDistanceSubjectiveSph\n        rightDistanceSubjectiveCyl\n        leftDistanceSubjectiveCyl\n        rightDistanceSubjectiveAxis\n        leftDistanceSubjectiveAxis\n        rightNearSubjectiveSph\n        leftNearSubjectiveSph\n        rightNearSubjectiveCyl\n        leftNearSubjectiveCyl\n        rightNearSubjectiveAxis\n        leftNearSubjectiveAxis\n        rightDistanceObjectiveSph\n        leftDistanceObjectiveSph\n        rightDistanceObjectiveCyl\n        leftDistanceObjectiveCyl\n        rightDistanceObjectiveAxis\n        leftDistanceObjectiveAxis\n        rightNearObjectiveSph\n        leftNearObjectiveSph\n        rightNearObjectiveCyl\n        leftNearObjectiveCyl\n        rightNearObjectiveAxis\n        leftNearObjectiveAxis\n        rightDistanceFinalSph\n        leftDistanceFinalSph\n        rightDistanceFinalCyl\n        leftDistanceFinalCyl\n        rightDistanceFinalAxis\n        leftDistanceFinalAxis\n        rightNearFinalSph\n        leftNearFinalSph\n        rightNearFinalCyl\n        leftNearFinalCyl\n        rightNearFinalAxis\n        leftNearFinalAxis\n        rightVisualAcuity\n        leftVisualAcuity\n        farPd\n        nearPd\n        status\n        diagnosticProcedureType {\n          title\n        }\n        rightEyeImages {\n          id\n          size\n          hash\n          fileName\n          extension\n          contentType\n          createdAt\n        }\n        leftEyeImages {\n          id\n          size\n          hash\n          fileName\n          extension\n          contentType\n          createdAt\n        }\n        rightEyeSketches {\n          id\n          size\n          hash\n          fileName\n          extension\n          contentType\n          createdAt\n        }\n        leftEyeSketches {\n          id\n          size\n          hash\n          fileName\n          extension\n          contentType\n          createdAt\n        }\n        documents {\n          id\n          size\n          hash\n          fileName\n          extension\n          contentType\n          createdAt\n        }\n        payments {\n          id\n          status\n        }\n      }\n    }\n  }\n`;\n\nconst CANCEL_ORDER = gql`\n  mutation DeleteDiagnosticProcedure($id: ID!) {\n    deleteDiagnosticProcedure(id: $id)\n  }\n`;\n\nexport const DiagnosticProcedurePage: React.FC<{\n  patientId: string | undefined;\n  appointmentId: string | undefined;\n  patientChart: PatientChart;\n}> = ({ patientId, appointmentId, patientChart }) => {\n  const notifDispatch = useNotificationDispatch();\n  const bottomSheetDispatch = useBottomSheetDispatch();\n\n  const { data, refetch } = useQuery<Query, QueryDiagnosticProcedureOrderArgs>(\n    GET_DIAGNOSTIC_PROCEDURE_ORDER,\n    {\n      variables: {\n        patientChartId: patientChart.id,\n      },\n    }\n  );\n\n  const [isOrderExpanded, setIsOrderExpanded] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (\n      data &&\n      data.diagnosticProcedureOrder.diagnosticProcedures.length > 0 &&\n      data.diagnosticProcedureOrder.diagnosticProcedures.every((e) =>\n        e?.payments.every((i) => i.status === \"PAID\")\n      )\n    ) {\n      setIsOrderExpanded(true);\n    } else {\n      setIsOrderExpanded(false);\n    }\n  }, [data]);\n\n  const [cancelOrder] = useMutation<any, MutationDeleteOrderArgs>(\n    CANCEL_ORDER,\n    {\n      onCompleted(data) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Order cancelled successfully\",\n          variant: \"success\",\n        });\n\n        refetch();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const handleProcedureClick = (item: DiagnosticProcedureType | undefined) => {\n    if (patientChart?.id) {\n      bottomSheetDispatch({\n        type: \"show\",\n        snapPoint: 0,\n        children: (\n          <OrderDiagnosticProcedureForm\n            patientId={patientId}\n            patientChartId={patientChart.id}\n            appointmentId={appointmentId}\n            diagnosticProcedureType={item}\n            onSuccess={() => {\n              refetch();\n              notifDispatch({\n                type: \"show\",\n                notifTitle: \"Success\",\n                notifSubTitle: \"Procedure ordered successfully\",\n                variant: \"success\",\n              });\n              bottomSheetDispatch({ type: \"hide\" });\n            }}\n            onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n          />\n        ),\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex space-x-6\">\n      <div className=\"w-1/3\" hidden={isOrderExpanded}>\n        <DiagnosticProcedureTypes onItemClick={handleProcedureClick} />\n      </div>\n      <div className=\"flex-1 bg-gray-50 rounded shadow-lg p-5\">\n        <div className=\"flex items-center space-x-4\">\n          <div>\n            <button\n              type=\"button\"\n              onClick={() => setIsOrderExpanded(!isOrderExpanded)}\n            >\n              {isOrderExpanded ? (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-6 w-6\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M15 19l-7-7 7-7\"\n                  />\n                </svg>\n              ) : (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-6 w-6\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9 5l7 7-7 7\"\n                  />\n                </svg>\n              )}\n            </button>\n          </div>\n          <p className=\"text-2xl text-gray-600 font-bold\">\n            Diagnostic Procedures\n          </p>\n        </div>\n\n        <hr className=\"mt-4 mb-4\" />\n\n        {(data?.diagnosticProcedureOrder.diagnosticProcedures.length ?? 0) ===\n          0 && (\n          <div className=\"bg-gray-100 mt-5 flex h-44 rounded-sm shadow-inner\">\n            <div className=\"m-auto flex space-x-1 text-gray-500\">\n              <div className=\"material-icons\">inbox</div>\n              <p className=\"text-center\">Nothing here yet</p>\n            </div>\n          </div>\n        )}\n\n        {data?.diagnosticProcedureOrder.diagnosticProcedures.map((e, i) => (\n          <div\n            key={e?.id}\n            className={classnames(\"rounded-lg shadow-lg py-3 px-3 bg-white\", {\n              \"mt-5\": i !== 0,\n              \"border-l-4 border-teal-600\":\n                e?.status === DiagnosicProcedureStatus.Completed,\n            })}\n          >\n            <div className=\"flex justify-between items-center\">\n              <p className=\"text-2xl tracking-wider text-gray-800 font-light\">\n                {e?.diagnosticProcedureType.title}\n              </p>\n              {!e?.payments.every((e) => e.status === \"PAID\") && (\n                <button\n                  className=\"border border-red-600 text-red-800 px-2 text-sm py-1 rounded-lg flex space-x-1 items-center\"\n                  onClick={() => {\n                    if (e?.id) {\n                      cancelOrder({ variables: { id: e?.id } });\n                    }\n                  }}\n                >\n                  <div className=\"material-icons\">close</div>\n                  <p>Cancel order</p>\n                </button>\n              )}\n            </div>\n\n            <div className=\"mt-8\">\n              <DiagnosticProcedureComponent\n                values={e}\n                patientChartId={patientChart.id}\n                onRefersh={() => {\n                  //refetch();\n                }}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/PatientDetails.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChiefComplaintTypesAdminTable.tsx",["1001"],"import React, { useEffect, useState } from \"react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { Query, PaginationInput, QueryChiefComplaintTypesArgs, Maybe, ChiefComplaintTypeEdge, ChiefComplaintTypeInput, MutationSaveChiefComplaintTypeArgs, ChiefComplaintType, ChiefComplaintTypeUpdateInput, MutationUpdateChiefComplaintTypeArgs, MutationDeleteChiefComplaintTypeArgs } from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { TablePagination } from \"./table_pagination\";\nconst CHIEF_COMPLAINT_TYPES = gql`\n  query ChiefComplaintTypes($page: PaginationInput!) {\n    chiefComplaintTypes(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 5;\n\nexport const ChiefComplaintTypesTable: React.FC = () => {\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const { data, refetch } = useQuery<Query, QueryChiefComplaintTypesArgs>(\n    CHIEF_COMPLAINT_TYPES,\n    {\n      variables: { page: paginationInput },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.chiefComplaintTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n        <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n          <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead>\n                <tr>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-700 text-left text-sm font-medium text-gray-50 uppercase tracking-wider\"\n                  >\n                    Chief Complaint Types\n                  </th>\n\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                  >\n                    <button\n                      onClick={() =>\n                        bottomSheetDispatch({\n                          type: \"show\",\n                          snapPoint: 500,\n                          children: (\n                            <AddChiefComplaintTypeForm\n                              onSuccess={() => {\n                                bottomSheetDispatch({ type: \"hide\" });\n\n                                notifDispatch({\n                                  type: \"show\",\n                                  notifTitle: \"Success\",\n                                  notifSubTitle:\n                                    \"Chief complaint type has been saved successfully\",\n                                  variant: \"success\",\n                                });\n\n                                refetch();\n                              }}\n                              onCancel={() =>\n                                bottomSheetDispatch({ type: \"hide\" })\n                              }\n                            />\n                          ),\n                        })\n                      }\n                      className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                    >\n                      <div className=\"flex items-center\">\n                        <div>\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"currentColor\"\n                            className=\"h-6 w-6\"\n                          >\n                            <path\n                              fillRule=\"evenodd\"\n                              d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                              clipRule=\"evenodd\"\n                            />\n                          </svg>\n                        </div>\n                        <div className=\"font-semibold\">Add</div>\n                      </div>\n                    </button>\n                  </th>\n                </tr>\n                <tr>\n                  <th colSpan={2}>\n                    <input\n                      type=\"text\"\n                      name=\"search\"\n                      id=\"chief-complaint-search\"\n                      placeholder=\"Search\"\n                      className=\"p-1 pl-4 block w-full sm:text-md border-gray-300\"\n                    />\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {data?.chiefComplaintTypes.edges.map(\n                  (value: Maybe<ChiefComplaintTypeEdge>) => (\n                    <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {value?.node.title}\n                      </td>\n\n                      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                        <button\n                          className=\"text-indigo-600 hover:text-indigo-900\"\n                          onClick={() => {\n                            bottomSheetDispatch({\n                              type: \"show\",\n                              snapPoint: 500,\n                              children: (\n                                <UpdateChiefComplaintTypeForm\n                                  onUpdateSuccess={() => {\n                                    bottomSheetDispatch({ type: \"hide\" });\n\n                                    notifDispatch({\n                                      type: \"show\",\n                                      notifTitle: \"Success\",\n                                      notifSubTitle:\n                                        \"Chief complaint type has been updated successfully\",\n                                      variant: \"success\",\n                                    });\n\n                                    refetch();\n                                  }}\n                                  onDeleteSuccess={() => {\n                                    bottomSheetDispatch({ type: \"hide\" });\n\n                                    notifDispatch({\n                                      type: \"show\",\n                                      notifTitle: \"Success\",\n                                      notifSubTitle:\n                                        \"Chief complaint type has been deleted successfully\",\n                                      variant: \"success\",\n                                    });\n\n                                    refetch();\n                                  }}\n                                  onCancel={() =>\n                                    bottomSheetDispatch({ type: \"hide\" })\n                                  }\n                                  values={value?.node}\n                                />\n                              ),\n                            });\n                          }}\n                        >\n                          Edit\n                        </button>\n                      </td>\n                    </tr>\n                  )\n                )}\n              </tbody>\n            </table>\n            <TablePagination\n              totalCount={data?.chiefComplaintTypes.totalCount ?? 0}\n              onNext={handleNextClick}\n              onPrevious={handlePreviousClick}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SAVE_CHIEF_COMPLAINT_TYPE = gql`\n  mutation SaveChiefComplaintType($input: ChiefComplaintTypeInput!) {\n    saveChiefComplaintType(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\ninterface AddChiefComplaintTypeProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst AddChiefComplaintTypeForm: React.FC<AddChiefComplaintTypeProps> = ({\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<ChiefComplaintTypeInput>();\n  const [save, { error }] = useMutation<\n    any,\n    MutationSaveChiefComplaintTypeArgs\n  >(SAVE_CHIEF_COMPLAINT_TYPE, {\n    onCompleted(data) {\n      onSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ChiefComplaintTypeInput) => {\n    save({ variables: { input: data } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Add chief complaint type\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst UPDATE_CHIEF_COMPLAINT_TYPE = gql`\n  mutation UpdateChiefComplaintType($input: ChiefComplaintTypeUpdateInput!) {\n    updateChiefComplaintType(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\nconst DELETE_CHIEF_COMPLAINT_TYPE = gql`\n  mutation DeleteChiefComplaintType($id: ID!) {\n    deleteChiefComplaintType(id: $id)\n  }\n`;\n\ninterface UpdateChiefComplaintTypeProps {\n  values: ChiefComplaintType | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst UpdateChiefComplaintTypeForm: React.FC<UpdateChiefComplaintTypeProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<ChiefComplaintTypeUpdateInput>({\n    defaultValues: {\n      id: values?.id,\n      title: values?.title,\n    },\n  });\n\n  const [save, { error }] = useMutation<\n    any,\n    MutationUpdateChiefComplaintTypeArgs\n  >(UPDATE_CHIEF_COMPLAINT_TYPE, {\n    onCompleted(data) {\n      onUpdateSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [deleteChiefComplaintType] = useMutation<\n    any,\n    MutationDeleteChiefComplaintTypeArgs\n  >(DELETE_CHIEF_COMPLAINT_TYPE, {\n    onCompleted(data) {\n      onDeleteSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const onUpdateSubmit = (data: ChiefComplaintTypeUpdateInput) => {\n    if(values?.id) {\n      data.id = values?.id\n      save({ variables: { input: data } });\n    }\n  };\n\n  const onDeleteSubmit = (data: ChiefComplaintTypeUpdateInput) => {\n    deleteChiefComplaintType({ variables: { id: data.id } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update chief complaint type\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PharmacyOrdersList.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientRegistrationLayout.tsx",["1002"],"import React from \"react\";\nimport { Spinner } from \"./spinner\";\n\ninterface Props {\n  loading: boolean;\n  paperRecord: boolean;\n  update: boolean;\n  migrationAlert?: string;\n  demographic: React.ReactNode;\n  contactInfo: React.ReactNode;\n  emergencyInfo: React.ReactNode;\n  documents: React.ReactNode;\n  onMigrate?: () => void;\n  onSaveSchedule?: () => void;\n}\n\nexport const PatientRegistrationLayout: React.FC<Props> = ({\n  demographic,\n  contactInfo,\n  emergencyInfo,\n  documents,\n  loading,\n  update,\n  onSaveSchedule,\n}) => {\n  return (\n    <div className=\"bg-gray-50 p-4 rounded-md shadow-lg\">\n      <div className=\"mt-10 sm:mt-0\">{demographic}</div>\n\n      <div className=\"hidden sm:block\" aria-hidden=\"true\">\n        <div className=\"py-5\">\n          <div className=\"border-t border-gray-200\"></div>\n        </div>\n      </div>\n\n      <div className=\"mt-10 sm:mt-0\">{contactInfo}</div>\n\n      <div className=\"hidden sm:block\" aria-hidden=\"true\">\n        <div className=\"py-5\">\n          <div className=\"border-t border-gray-200\"></div>\n        </div>\n      </div>\n\n      <div className=\"mt-10 sm:mt-0\">{emergencyInfo}</div>\n\n      <div className=\"hidden sm:block\" aria-hidden=\"true\">\n        <div className=\"py-5\">\n          <div className=\"border-t border-gray-200\"></div>\n        </div>\n      </div>\n\n      <div className=\"mt-10 sm:mt-0\">{documents}</div>\n\n      <div className=\"md:grid md:grid-cols-3 md:gap-6\">\n        <div className=\"md:col-span-1\">\n          <div className=\"px-4 sm:px-0\">\n            <h3 className=\"text-lg font-medium leading-6 text-gray-900\"></h3>\n          </div>\n        </div>\n        <div className=\"mt-5 md:mt-0 md:col-span-2 flex space-x-6\">\n          <div className=\"py-3  bg-gray-50 w-full\">\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"inline-flex justify-center w-full py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-teal-600 hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n            >\n              {loading && <Spinner />}\n              <span className=\"ml-2\">{update ? \"Update\" : \"Save\"}</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChatComponent.tsx",["1003","1004"],"import { gql, useLazyQuery, useMutation } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport {\n  Chat,\n  ChatMessageInput,\n  MutationCreateChatArgs,\n  MutationSendMessageArgs,\n  Query,\n  QueryGetChatMessagesArgs,\n  QueryUserArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { parseJwt } from \"../util\";\nimport { ChatAvatar } from \"./ChatAvatar\";\nimport { ChatBubble } from \"./ChatBubble\";\n\nconst GET_CHAT_MESSAGES = gql`\n  query GetChatMessages($id: ID!) {\n    getChatMessages(id: $id) {\n      id\n      body\n      chatId\n      userId\n      createdAt\n    }\n  }\n`;\n\nconst SEND_MESSAGE = gql`\n  mutation SendMessage($input: ChatMessageInput!) {\n    sendMessage(input: $input) {\n      id\n    }\n  }\n`;\n\nconst CREATE_NEW_CHAT = gql`\n  mutation CreateChat($input: ChatInput!) {\n    createChat(input: $input) {\n      id\n    }\n  }\n`;\n\nconst GET_USER_INFO = gql`\n  query GetUser($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\ninterface Props {\n  chat?: Chat | undefined;\n  isNewChat: boolean;\n  onRefresh: () => void;\n}\n\nfunction useRouterQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport const ChatComponent: React.FC<Props> = ({\n  chat,\n  isNewChat,\n  onRefresh,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const history = useHistory();\n\n  const query = useRouterQuery();\n  const queryUserId = query.get(\"userId\");\n\n  const token = sessionStorage.getItem(\"accessToken\");\n  const claim = parseJwt(token);\n\n  const [recipient, setRecipient] = useState<{\n    id: string | undefined;\n    fullName: string | undefined;\n  }>({\n    id: undefined,\n    fullName: \"\",\n  });\n\n  const chatMessagesQuery = useLazyQuery<Query, QueryGetChatMessagesArgs>(\n    GET_CHAT_MESSAGES\n  );\n\n  const getUserQuery = useLazyQuery<Query, QueryUserArgs>(GET_USER_INFO, {\n    onCompleted(data) {\n      setRecipient({\n        id: data.user.id,\n        fullName: data.user.firstName + \" \" + data.user.lastName,\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (chat) {\n      const member = chat?.chatMembers.find((e) => e?.userId !== claim.ID);\n\n      setRecipient({\n        id: member?.id,\n        fullName: member?.displayName,\n      });\n      chatMessagesQuery[0]({\n        variables: {\n          id: chat.id,\n        },\n      });\n    }\n  }, [chat]);\n\n  useEffect(() => {\n    if (isNewChat && queryUserId) {\n      getUserQuery[0]({\n        variables: {\n          id: queryUserId,\n        },\n      });\n    }\n  }, [isNewChat, queryUserId]);\n\n  const [sendMessage] = useMutation<any, MutationSendMessageArgs>(\n    SEND_MESSAGE,\n    {\n      onCompleted(data) {\n        if (chatMessagesQuery[1].refetch) {\n          chatMessagesQuery[1].refetch();\n        }\n\n        setValue(\"body\", \"\");\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [createChat] = useMutation<any, MutationCreateChatArgs>(\n    CREATE_NEW_CHAT,\n    {\n      onCompleted(data) {\n        if (data.createChat.id) {\n          onRefresh();\n          history.replace(`/chats/${data.createChat.id}`);\n        }\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const { register, setValue, handleSubmit } = useForm<ChatMessageInput>();\n  const onSubmit = (data: ChatMessageInput) => {\n    if (isNewChat && queryUserId) {\n      createChat({\n        variables: {\n          input: {\n            recipientId: queryUserId,\n            message: data.body,\n          },\n        },\n      });\n    } else {\n      if (chat) {\n        data.chatId = chat.id;\n        sendMessage({\n          variables: {\n            input: data,\n          },\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"bg-white shadow-lg rounded-md\">\n      <div className=\"flex justify-between items-center p-5\">\n        <div>\n          <div className=\"flex space-x-2\">\n            <ChatAvatar fullName={recipient?.fullName ?? \"\"} />\n            <div>\n              <p className=\"font-semibold text-gray-700\">\n                {recipient?.fullName ?? \"\"}\n              </p>\n              <p className=\"text-xs text-teal-600\"></p>\n            </div>\n          </div>\n        </div>\n        <div>\n          <button type=\"button\" onClick={() => {}}>\n            <p className=\"material-icons\">more_vert</p>\n          </button>\n        </div>\n      </div>\n      <hr />\n      <div className=\"p-5 max-h-screen overflow-auto\">\n        {chatMessagesQuery[1].data?.getChatMessages.length === 0 ||\n          (chatMessagesQuery[1].data?.getChatMessages.length === undefined && (\n            <div className=\"bg-white mt-5 flex h-72\">\n              <div className=\"m-auto flex space-x-1 text-gray-500\">\n                <div className=\"material-icons\">inbox</div>\n                <p className=\"text-center\">Nothing here yet</p>\n              </div>\n            </div>\n          ))}\n\n        {chatMessagesQuery[1].data?.getChatMessages.map((chatMessage) => (\n          <ChatBubble\n            key={chatMessage?.id}\n            message={chatMessage?.body}\n            isReceived={chatMessage?.userId !== claim.ID}\n            displayName={\n              chat?.chatMembers.find(\n                (chatMember) => chatMember?.userId === chatMessage?.userId\n              )?.displayName\n            }\n          />\n        ))}\n      </div>\n      <hr />\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"flex p-3 space-x-5 items-center\">\n          <div className=\"flex flex-1 space-x-2 items-center\">\n            <div>\n              <button\n                type=\"button\"\n                className=\"focus:outline-none\"\n                onClick={() => {}}\n              >\n                <p className=\"material-icons text-gray-600\">attachment</p>\n              </button>\n            </div>\n            <div className=\"flex-1\">\n              <input\n                type=\"text\"\n                name=\"body\"\n                ref={register}\n                className=\"w-full p-2 border-none\"\n                placeholder=\"Type a message here\"\n              />\n            </div>\n          </div>\n          <div>\n            <button type=\"submit\" className=\"focus:outline-none\">\n              <p className=\"material-icons text-gray-600\">send</p>\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/TreatmentTypes.tsx",["1005"],"import { gql, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { TablePagination } from \"../components/table_pagination\";\nimport {\n  TreatmentType,\n  PaginationInput,\n  QueryTreatmentTypesArgs,\n  Query,\n} from \"../models/models\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\nconst TREATMENT_TYPES = gql`\n  query TreatmentTypes($page: PaginationInput!, $searchTerm: String) {\n    treatmentTypes(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          active\n          billings {\n            id\n            item\n            code\n            price\n          }\n          supplies {\n            id\n            title\n            billings {\n              id\n              item\n              code\n              price\n            }\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nexport const TreatmentTypesComponent: React.FC<{\n  onItemClick: (item: TreatmentType) => void;\n}> = ({ onItemClick }) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryTreatmentTypesArgs>(\n    TREATMENT_TYPES,\n    {\n      variables: { page: paginationInput, searchTerm },\n    }\n  );\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput, searchTerm]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.treatmentTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleItemClick = (item: TreatmentType) => {\n    onItemClick(item);\n  };\n\n  return (\n    <div className=\"overflow-hidden rounded-lg shadow-xl\">\n      <table className=\"w-full\">\n        <thead>\n          <tr>\n            <th\n              scope=\"col\"\n              colSpan={2}\n              className=\"px-4 py-2 bg-teal-700 text-left text-xs text-gray-50 uppercase tracking-wider\"\n            >\n              Treatments list\n            </th>\n          </tr>\n          <tr>\n            <th colSpan={2}>\n              <input\n                type=\"search\"\n                name=\"search\"\n                placeholder=\"Search\"\n                className=\"w-full sm:text-md border-none\"\n                onChange={(evt) => setSearchTerm(evt.target.value.trim())}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200 p-1\">\n          {data?.treatmentTypes.edges.map((e) => (\n            <tr\n              key={e?.node.id}\n              onClick={() =>\n                !patientChartLocked[0] && e?.node && handleItemClick(e?.node)\n              }\n              className=\"hover:bg-gray-100 border-t cursor-pointer\"\n            >\n              <td className=\"px-6 py-5 text-sm text-gray-900\">\n                {e?.node.title}\n              </td>\n              <td className=\"p-2\">\n                <span className=\"material-icons\">keyboard_arrow_right</span>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <TablePagination\n        totalCount={data?.treatmentTypes.totalCount ?? 0}\n        onNext={handleNextClick}\n        onPrevious={handlePreviousClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateEyeGlassPrescriptionForm.tsx",["1006","1007","1008"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  DiagnosticProcedure,\n  EyewearPrescription,\n  EyewearPrescriptionUpdateInput,\n  MutationDeleteEyewearPrescriptionArgs,\n  MutationUpdateEyewearPrescriptionArgs,\n  Query,\n  QueryEyewearShopsArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport RefractionDistanceComponent from \"./RefractionDistanceForm\";\nimport RefractionNearComponent from \"./RefractionNearForm\";\nimport Select from \"react-select\";\n\nconst UPDATE_EYEGLASS_PRESCRIPTION = gql`\n  mutation UpdateEyewearPrescription($input: EyewearPrescriptionUpdateInput!) {\n    updateEyewearPrescription(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_EYEGLASS_PRESCRIPTION = gql`\n  mutation DeleteEyewearPrescription($id: ID!) {\n    deleteEyewearPrescription(id: $id)\n  }\n`;\n\nconst EYE_WEAR_SHOPS = gql`\n  query EyewearShops($page: PaginationInput!) {\n    eyewearShops(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          address\n          region\n          country\n          phone\n          inHouse\n          active\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\ninterface UpdateEyewearPrescriptionProps {\n  values: EyewearPrescription | undefined;\n  refraction: DiagnosticProcedure | undefined;\n  eyewearShopIdValue: string | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport const UpdateEyewearPrescriptionForm: React.FC<UpdateEyewearPrescriptionProps> =\n  ({\n    values,\n    refraction,\n    onUpdateSuccess,\n    eyewearShopIdValue,\n    onDeleteSuccess,\n    onCancel,\n  }) => {\n    const notifDispatch = useNotificationDispatch();\n    const { register, reset, handleSubmit } =\n      useForm<EyewearPrescriptionUpdateInput>();\n\n    useEffect(() => {\n      if (values) {\n        reset(values);\n      }\n    }, [values]);\n\n    const refractionForm = useForm<DiagnosticProcedure>();\n    useEffect(() => {\n      if (refraction) {\n        refractionForm.reset(refraction);\n      }\n    }, [refraction]);\n\n    const { data } = useQuery<Query, QueryEyewearShopsArgs>(EYE_WEAR_SHOPS, {\n      variables: {\n        page: { page: 1, size: 1000 },\n      },\n    });\n\n    const [selectedEyewearShop, setSelectedEyewearShop] = useState<any>();\n    useEffect(() => {\n      if (eyewearShopIdValue) {\n        const eyewearShop = data?.eyewearShops.edges.find(\n          (e) => e?.node.id === eyewearShopIdValue\n        )?.node;\n\n        const value = {\n          value: eyewearShop?.id,\n          label: `${eyewearShop?.title} - ${eyewearShop?.address}, ${\n            eyewearShop?.region\n          }, ${eyewearShop?.country} ${\n            eyewearShop?.inHouse ? \"(In-House)\" : \"\"\n          }`,\n        };\n\n        setSelectedEyewearShop(value);\n      }\n    }, [values, data]);\n\n    const [update, { error }] = useMutation<\n      any,\n      MutationUpdateEyewearPrescriptionArgs\n    >(UPDATE_EYEGLASS_PRESCRIPTION, {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    });\n\n    const [deleteEyeGlassPrescription] = useMutation<\n      any,\n      MutationDeleteEyewearPrescriptionArgs\n    >(DELETE_EYEGLASS_PRESCRIPTION, {\n      onCompleted(data) {\n        onDeleteSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    });\n\n    const onUpdateSubmit = (data: any) => {\n      if (values?.id !== undefined) {\n        data.id = values.id;\n\n        update({ variables: { input: data } });\n      }\n    };\n\n    const onDeleteSubmit = (data: any) => {\n      if (values?.id !== undefined) {\n        deleteEyeGlassPrescription({ variables: { id: values?.id } });\n      }\n    };\n\n    const eyeWearShops = data?.eyewearShops.edges.map((e) => ({\n      value: e?.node.id,\n      label: `${e?.node.title} - ${e?.node.address}, ${e?.node.region}, ${\n        e?.node.country\n      } ${e?.node.inHouse ? \"(In-House)\" : \"\"}`,\n    }));\n\n    return (\n      <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n        <div className=\"w-3/4\">\n          <div className=\"float-right\">\n            <button onClick={onCancel}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                className=\"h-8 w-8 text-gray-500\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </button>\n          </div>\n\n          <form onSubmit={handleSubmit(onUpdateSubmit)}>\n            <p className=\"text-2xl font-extrabold tracking-wider text-teal-700\">\n              Update Eye Glass Prescription\n            </p>\n\n            <div className=\"mt-4\">\n              <Select\n                placeholder=\"Eyewear Shops\"\n                options={eyeWearShops}\n                value={selectedEyewearShop}\n                onChange={(value) => {\n                  setSelectedEyewearShop(value);\n                }}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <hr />\n            </div>\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center mt-10\">\n              <div className=\"col-span-1\"></div>\n              <div className=\"col-span-4 justify-self-center\">OD</div>\n              <div className=\"col-span-4 justify-self-center\">OS</div>\n\n              <div className=\"col-span-1\"></div>\n              <div className=\"col-span-4\">\n                <div className=\"flex justify-around\">\n                  <div>SPH</div>\n                  <div>CYL</div>\n                  <div>AXIS</div>\n                </div>\n              </div>\n              <div className=\"col-span-4\">\n                <div className=\"flex justify-around\">\n                  <div>SPH</div>\n                  <div>CYL</div>\n                  <div>AXIS</div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center p-2 rounded-md\">\n              <div className=\"co-span-1\">\n                <span className=\"text-xs\">Distance</span>\n              </div>\n              <div className=\"col-span-4\"></div>\n              <div className=\"col-span-4\"></div>\n            </div>\n\n            <RefractionDistanceComponent\n              readonly={true}\n              register={refractionForm.register}\n              handleChange={() => {}}\n            />\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center p-2 rounded-md\">\n              <div className=\"co-span-1\">\n                <span className=\"text-xs\">Near</span>\n              </div>\n              <div className=\"col-span-4\"></div>\n              <div className=\"col-span-4\"></div>\n            </div>\n\n            <RefractionNearComponent\n              readonly={true}\n              register={refractionForm.register}\n              handleChange={() => {}}\n            />\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center mt-5\">\n              <div className=\"col-span-1\">\n                <span className=\"text-gray-600 tracking-wide text-sm\">\n                  Visual Acuity\n                </span>\n              </div>\n              <div className=\"col-span-4\">\n                <input\n                  type=\"text\"\n                  name=\"rightVisualAcuity\"\n                  readOnly\n                  ref={refractionForm.register}\n                  className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                  onChange={() => {}}\n                />\n              </div>\n              <div className=\"col-span-4\">\n                <input\n                  type=\"text\"\n                  name=\"leftVisualAcuity\"\n                  readOnly\n                  ref={refractionForm.register}\n                  className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                  onChange={() => {}}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center mt-2\">\n              <div className=\"col-span-1\">\n                <span className=\"text-gray-600 tracking-wide text-sm\">\n                  Far PD\n                </span>\n              </div>\n              <div className=\"col-span-4\">\n                <input\n                  type=\"text\"\n                  name=\"farPd\"\n                  readOnly\n                  ref={refractionForm.register}\n                  className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                  onChange={() => {}}\n                />\n              </div>\n              <div className=\"col-span-4\"></div>\n              <div className=\"col-span-1\">\n                <span className=\"text-gray-600 tracking-wide text-sm\">\n                  Near PD\n                </span>\n              </div>\n              <div className=\"col-span-4\">\n                <input\n                  type=\"text\"\n                  name=\"nearPd\"\n                  readOnly\n                  ref={refractionForm.register}\n                  className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                  onChange={() => {}}\n                />\n              </div>\n              <div className=\"col-span-4\"></div>\n            </div>\n\n            <div className=\"mt-10 grid grid-cols-4 space-y-2 text-lg\">\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"glass\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Glass</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"photoChromatic\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Photo Chromatic</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"bifocal\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Bifocal</span>\n              </label>\n\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"plastic\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Plastic</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"glareFree\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Glare Free</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"progressive\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Progressive</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"singleVision\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Single vision</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"scratchResistant\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Scratch Resistant</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"twoSeparateGlasses\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Two separate glasses</span>\n              </label>\n            </div>\n            <div className=\"mt-4\">\n              {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n            </div>\n            <div className=\"flex space-x-5\">\n              <button\n                type=\"button\"\n                onClick={handleSubmit(onUpdateSubmit)}\n                className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n              >\n                <span className=\"ml-2\">Update</span>\n              </button>\n\n              <button\n                type=\"submit\"\n                onClick={handleSubmit(onDeleteSubmit)}\n                className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n              >\n                <span className=\"ml-2\">Delete</span>\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  };\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/VisualAcuityForm.tsx",["1009"],"import React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport IndexedDb from \"../_db\";\nimport { VisualAcuity, VisualAcuityInput } from \"../models/models\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\ninterface Props {\n  patientChartId: string | undefined;\n  values: VisualAcuity | undefined;\n}\n\nexport const VisualAcuityForm: React.FC<Props> = ({\n  values,\n  patientChartId,\n}) => {\n  const { register, reset, watch } = useForm<VisualAcuityInput>({\n    defaultValues: {\n      patientChartId: patientChartId,\n    },\n  });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    if (values !== undefined) {\n      reset({\n        rightDistanceUncorrected: values.rightDistanceUncorrected,\n        leftDistanceUncorrected: values.leftDistanceUncorrected,\n        rightDistancePinhole: values.rightDistancePinhole,\n        leftDistancePinhole: values.leftDistancePinhole,\n        rightDistanceCorrected: values.rightDistanceCorrected,\n        leftDistanceCorrected: values.leftDistanceCorrected,\n        rightNearUncorrected: values.rightNearUncorrected,\n        leftNearUncorrected: values.leftNearUncorrected,\n        rightNearPinhole: values.rightNearPinhole,\n        leftNearPinhole: values.leftNearPinhole,\n        rightNearCorrected: values.rightNearCorrected,\n        leftNearCorrected: values.leftNearCorrected,\n      });\n    }\n  }, [values]);\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChartId) {\n      const runIndexDb = async () => {\n        const visualAcuity: any = {\n          ...data,\n          patientChartId: patientChartId.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(visualAcuity, \"visual_acuity\", patientChartId)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChartId]);\n\n  return (\n    <div className=\"grid grid-cols-5 gap-y-6 gap-x-6 justify-items-stretch\">\n      <div className=\"text-sm text-gray-400 tracking-wider justify-self-center\">\n        Distance\n      </div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Uncorrected</p>\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"rightDistanceUncorrected\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"leftDistanceUncorrected\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Pinhole</p>\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"rightDistancePinhole\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"leftDistancePinhole\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Corrected</p>\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"rightDistanceCorrected\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"leftDistanceCorrected\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n\n      <div className=\"text-sm text-gray-400 tracking-wider justify-self-center\">\n        Near\n      </div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Uncorrected</p>\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"rightNearUncorrected\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"leftNearUncorrected\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Pinhole</p>\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"rightNearPinhole\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"leftNearPinhole\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Corrected</p>\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"rightNearCorrected\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"leftNearCorrected\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/DiagnosticProcedureTypes.tsx",["1010"],"import { gql, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { TablePagination } from \"../components/table_pagination\";\nimport {\n  DiagnosticProcedureType,\n  PaginationInput,\n  Query,\n  QueryDiagnosticProcedureTypesArgs,\n} from \"../models/models\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\nconst DIAGNOSTIC_PROCEDURE_TYPES = gql`\n  query DiagnosticProcedureTypes($page: PaginationInput!, $searchTerm: String) {\n    diagnosticProcedureTypes(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          billings {\n            id\n            item\n            code\n            price\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nexport const DiagnosticProcedureTypes: React.FC<{\n  onItemClick: (item: DiagnosticProcedureType) => void;\n}> = ({ onItemClick }) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryDiagnosticProcedureTypesArgs>(\n    DIAGNOSTIC_PROCEDURE_TYPES,\n    {\n      variables: { page: paginationInput, searchTerm },\n    }\n  );\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput, searchTerm]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.diagnosticProcedureTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleItemClick = (item: DiagnosticProcedureType | undefined) => {\n    if (item !== undefined) {\n      onItemClick(item);\n    }\n  };\n\n  return (\n    <div className=\"overflow-hidden rounded-lg shadow-xl\">\n      <table className=\"w-full\">\n        <thead>\n          <tr>\n            <th\n              scope=\"col\"\n              colSpan={2}\n              className=\"px-4 py-2 bg-teal-700 text-left text-xs text-gray-50 uppercase tracking-wider\"\n            >\n              Diagnostic procedures list\n            </th>\n          </tr>\n          <tr>\n            <th colSpan={2}>\n              <input\n                type=\"search\"\n                name=\"search\"\n                placeholder=\"Search\"\n                className=\"w-full border-none\"\n                onChange={(evt) => setSearchTerm(evt.target.value.trim())}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200 p-1\">\n          {data?.diagnosticProcedureTypes.edges.map((e) => (\n            <tr\n              key={e?.node.id}\n              onClick={() => !patientChartLocked[0] && handleItemClick(e?.node)}\n              className=\"hover:bg-gray-100 border-t cursor-pointer\"\n            >\n              <td className=\"px-6 py-5 whitespace-nowrap text-sm text-gray-900\">\n                {e?.node.title}\n              </td>\n              <td className=\"p-2\">\n                <span className=\"material-icons\">keyboard_arrow_right</span>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <TablePagination\n        totalCount={data?.diagnosticProcedureTypes.totalCount ?? 0}\n        onNext={handleNextClick}\n        onPrevious={handlePreviousClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateMedicationForm.tsx",["1011","1012"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  MedicalPrescription,\n  MedicalPrescriptionUpdateInput,\n  MutationUpdateMedicationPrescriptionArgs,\n  MutationDeleteMedicalPrescriptionArgs,\n  Query,\n  QueryPharmaciesArgs,\n  MedicalPrescriptionOrder,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport Select from \"react-select\";\n\nconst UPDATE_MEDICATION_PRESCRIPTION = gql`\n  mutation UpdateMedicationPrescription(\n    $input: MedicalPrescriptionUpdateInput!\n  ) {\n    updateMedicationPrescription(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_MEDICAL_PRESCRIPTION = gql`\n  mutation DeleteMedicalPrescription($id: ID!) {\n    deleteMedicalPrescription(id: $id)\n  }\n`;\n\nconst PHARMACIES = gql`\n  query Pharmacies($page: PaginationInput!) {\n    pharmacies(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          address\n          region\n          country\n          phone\n          inHouse\n          active\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\ninterface UpdateMedicalPrescriptionProps {\n  values: MedicalPrescription | undefined;\n  pharmacyIdValue: string | undefined | null;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport const UpdateMedicalPrescriptionForm: React.FC<UpdateMedicalPrescriptionProps> =\n  ({ values, pharmacyIdValue, onUpdateSuccess, onDeleteSuccess, onCancel }) => {\n    const notifDispatch = useNotificationDispatch();\n    const { register, handleSubmit } = useForm<MedicalPrescriptionUpdateInput>({\n      defaultValues: values,\n    });\n\n    const { data } = useQuery<Query, QueryPharmaciesArgs>(PHARMACIES, {\n      variables: {\n        page: { page: 1, size: 1000 },\n      },\n    });\n\n    const [selectedPharmacy, setSelectedPharmacy] = useState<any>();\n\n    useEffect(() => {\n      if (pharmacyIdValue) {\n        const pharmacy = data?.pharmacies.edges.find(\n          (e) => e?.node.id === pharmacyIdValue,\n        )?.node;\n\n        const value = {\n          value: pharmacy?.id,\n          label: `${pharmacy?.title} - ${pharmacy?.address}, ${\n            pharmacy?.region\n          }, ${pharmacy?.country} ${pharmacy?.inHouse ? \"(In-House)\" : \"\"}`,\n        };\n\n        setSelectedPharmacy(value);\n      }\n    }, [values, data]);\n\n    const [update, { error }] = useMutation<\n      any,\n      MutationUpdateMedicationPrescriptionArgs\n    >(UPDATE_MEDICATION_PRESCRIPTION, {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    });\n\n    const [deleteMedicalPrescription] = useMutation<\n      any,\n      MutationDeleteMedicalPrescriptionArgs\n    >(DELETE_MEDICAL_PRESCRIPTION, {\n      onCompleted(data) {\n        onDeleteSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    });\n\n    const onUpdateSubmit = (data: any) => {\n      if (values?.id !== undefined) {\n        data.id = values.id;\n        data.generic = data.generic === \"true\";\n        data.substitutionAllowed = data.substitutionAllowed === \"true\";\n        data.pharmacyId = selectedPharmacy.value;\n        \n        update({ variables: { input: data } });\n      }\n    };\n\n    const onDeleteSubmit = (data: any) => {\n      if (values?.id !== undefined) {\n        deleteMedicalPrescription({ variables: { id: values?.id } });\n      }\n    };\n\n    const pharmacies = data?.pharmacies.edges.map((e) => ({\n      value: e?.node.id,\n      label: `${e?.node.title} - ${e?.node.address}, ${e?.node.region}, ${\n        e?.node.country\n      } ${e?.node.inHouse ? \"(In-House)\" : \"\"}`,\n    }));\n\n    return (\n      <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n        <div className=\"w-1/2\">\n          <div className=\"float-right\">\n            <button onClick={onCancel}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                className=\"h-8 w-8 text-gray-500\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </button>\n          </div>\n\n          <form>\n            <p className=\"text-2xl font-extrabold tracking-wider\">\n              Update Medical Prescription\n            </p>\n            <div className=\"mt-4\">\n              <Select\n                placeholder=\"Pharmacy\"\n                options={pharmacies}\n                value={selectedPharmacy}\n                onChange={(value) => {\n                  setSelectedPharmacy(value);\n                }}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <hr />\n            </div>\n            <div className=\"mt-4\">\n              <label\n                htmlFor=\"medication\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Medication\n              </label>\n              <input\n                type=\"text\"\n                name=\"medication\"\n                id=\"medication\"\n                ref={register({ required: true })}\n                className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n              />\n            </div>\n            <div className=\"mt-4\">\n              <label\n                htmlFor=\"sig\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Sig\n              </label>\n              <input\n                type=\"text\"\n                name=\"sig\"\n                id=\"sig\"\n                ref={register({ required: true })}\n                className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n              />\n            </div>\n            <div className=\"mt-4\">\n              <label\n                htmlFor=\"refill\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Refill\n              </label>\n              <select\n                id=\"refill\"\n                name=\"refill\"\n                ref={register}\n                className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n              >\n                {[0, 1, 2, 3, 4, 5].map((e) => (\n                  <option key={e} value={e}>\n                    {e}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"mt-4\">\n              <label\n                htmlFor=\"generic\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Generic\n              </label>\n              <select\n                id=\"generic\"\n                name=\"generic\"\n                ref={register}\n                className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n              >\n                <option value={\"true\"}>Yes</option>\n                <option value={\"false\"}>No</option>\n              </select>\n            </div>\n            <div className=\"mt-4\">\n              <label\n                htmlFor=\"substitutionAllowed\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Substitution Allowed\n              </label>\n              <select\n                id=\"substitutionAllowed\"\n                name=\"substitutionAllowed\"\n                ref={register}\n                className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n              >\n                <option value={\"false\"}>No</option>\n                <option value={\"true\"}>Yes</option>\n              </select>\n            </div>\n            <div className=\"mt-4\">\n              <label\n                htmlFor=\"directionToPatient\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Direction To Patient\n              </label>\n              <textarea\n                rows={3}\n                name=\"directionToPatient\"\n                id=\"directionToPatient\"\n                ref={register}\n                className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n              />\n            </div>\n            <div className=\"mt-4\">\n              <input type=\"checkbox\" id=\"favorite\" name=\"favorite\" />\n              <label className=\"ml-2 text-sm\" htmlFor=\"favorite\">\n                Save to favorites\n              </label>\n            </div>\n            <div className=\"mt-4\">\n              {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n            </div>\n            <div className=\"flex space-x-5\">\n              <button\n                type=\"button\"\n                onClick={handleSubmit(onUpdateSubmit)}\n                className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n              >\n                <span className=\"ml-2\">Update</span>\n              </button>\n\n              <button\n                type=\"submit\"\n                onClick={handleSubmit(onDeleteSubmit)}\n                className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n              >\n                <span className=\"ml-2\">Delete</span>\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  };\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChatUserListItem.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/MessageBody.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/App.tsx",["1013"],"import { gql, useQuery } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport ProtectedRoute from \"./components/protected_route\";\nimport { useNotificationDispatch, useNotificationState } from \"./notification\";\nimport { HomePage } from \"./pages/HomePage\";\nimport { LoginPage } from \"./pages/LoginPage\";\nimport { RegisterPage } from \"./pages/RegisterPage\";\nimport { useSpring, animated } from \"react-spring\";\nimport { parseJwt } from \"./util\";\nimport { isAfter } from \"date-fns\";\nimport { isLoggedInVar } from \"./cache\";\nimport { useApolloClient } from \"@apollo/client\";\nimport \"./App.css\";\nimport IndexedDb from \"./_db\";\nimport {\n  saveIop,\n  saveVisualAcuity,\n  savePatientChart,\n  saveCoverTest,\n  saveExternalExam,\n  saveFunduscopy,\n  saveOcularMotility,\n  saveOpticDisc,\n  savePupils,\n  saveSlitLampExam,\n  saveSurgicalProcedure,\n  saveDiagnosticProcedure,\n} from \"./_repository\";\nimport { PatientChartUpdateInput } from \"./models/models\";\n\nconst IS_LOGGED_IN = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n  }\n`;\n\nconst App: React.FC = () => {\n  const client = useApolloClient();\n\n  const props = useSpring({\n    opacity: 1,\n    config: { duration: 1000 },\n    from: { opacity: 0 },\n  });\n\n  const { data } = useQuery(IS_LOGGED_IN);\n\n  const notifDispatch = useNotificationDispatch();\n  const { showNotification, notifTitle, notifSubTitle, variant } =\n    useNotificationState();\n\n  useEffect(() => {\n    const token = sessionStorage.getItem(\"accessToken\");\n\n    if (token !== null) {\n      const claim = parseJwt(token);\n      if (claim !== null) {\n        const tokenExpired = isAfter(new Date(), new Date(claim.exp * 1000));\n\n        if (tokenExpired) {\n          client.cache.gc();\n          sessionStorage.removeItem(\"accessToken\");\n          isLoggedInVar(false);\n        }\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    setInterval(() => {\n      const runIndexDb = async () => {\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .getDataToSync()\n          .then((toSync) => {\n            toSync.forEach(async (data: any) => {\n              const syncData = await indexedDb.getValue(\n                data.tableName,\n                data.trackingColumnValue.toString()\n              );\n\n              if (data.tableName === \"visual_acuity\") {\n                saveVisualAcuity(syncData)\n                  .then(() => {\n                    data.syncedAt = new Date();\n                    indexedDb.putValue(\"sync\", data);\n                  })\n                  .catch((error: any) => {\n                    console.log(error);\n                  });\n              } else if (data.tableName === \"iop\") {\n                saveIop(syncData)\n                  .then(() => {\n                    data.syncedAt = new Date();\n                    indexedDb.putValue(\"sync\", data);\n                  })\n                  .catch((error: any) => {\n                    console.log(error);\n                  });\n              } else if (data.tableName === \"patient_chart\") {\n                const { patientChartId, __typename, ...patientChartData } =\n                  syncData;\n\n                const patientChart: PatientChartUpdateInput = {\n                  id: patientChartId,\n                  ...patientChartData,\n                };\n\n                savePatientChart(patientChart)\n                  .then(() => {\n                    data.syncedAt = new Date();\n                    indexedDb.putValue(\"sync\", data);\n                  })\n                  .catch((error: any) => {\n                    console.log(error);\n                  });\n              } else if (data.tableName === \"cover_test\") {\n                saveCoverTest(syncData)\n                  .then(() => {\n                    data.syncedAt = new Date();\n                    indexedDb.putValue(\"sync\", data);\n                  })\n                  .catch((error: any) => {\n                    console.log(error);\n                  });\n              } else if (data.tableName === \"external_exam\") {\n                saveExternalExam(syncData)\n                  .then(() => {\n                    data.syncedAt = new Date();\n                    indexedDb.putValue(\"sync\", data);\n                  })\n                  .catch((error: any) => {\n                    console.log(error);\n                  });\n              } else if (data.tableName === \"funduscopy\") {\n                saveFunduscopy(syncData)\n                  .then(() => {\n                    data.syncedAt = new Date();\n                    indexedDb.putValue(\"sync\", data);\n                  })\n                  .catch((error: any) => {\n                    console.log(error);\n                  });\n              } else if (data.tableName === \"ocular_motility\") {\n                saveOcularMotility(syncData)\n                  .then(() => {\n                    data.syncedAt = new Date();\n                    indexedDb.putValue(\"sync\", data);\n                  })\n                  .catch((error: any) => {\n                    console.log(error);\n                  });\n              } else if (data.tableName === \"optic_disc\") {\n                saveOpticDisc(syncData)\n                  .then(() => {\n                    data.syncedAt = new Date();\n                    indexedDb.putValue(\"sync\", data);\n                  })\n                  .catch((error: any) => {\n                    console.log(error);\n                  });\n              } else if (data.tableName === \"pupils\") {\n                savePupils(syncData)\n                  .then(() => {\n                    data.syncedAt = new Date();\n                    indexedDb.putValue(\"sync\", data);\n                  })\n                  .catch((error: any) => {\n                    console.log(error);\n                  });\n              } else if (data.tableName === \"slit_lamp_exam\") {\n                saveSlitLampExam(syncData)\n                  .then(() => {\n                    data.syncedAt = new Date();\n                    indexedDb.putValue(\"sync\", data);\n                  })\n                  .catch((error: any) => {\n                    console.log(error);\n                  });\n              } else if (data.tableName === \"surgical_procedure\") {\n                saveSurgicalProcedure(syncData)\n                  .then(() => {\n                    data.syncedAt = new Date();\n                    indexedDb.putValue(\"sync\", data);\n                  })\n                  .catch((error: any) => {\n                    console.log(error);\n                  });\n              } else if (data.tableName === \"diagnostic_procedure\") {\n                const { patientChartId, ...diagnosticProcedureData } = syncData;\n\n                saveDiagnosticProcedure(diagnosticProcedureData)\n                  .then(() => {\n                    data.syncedAt = new Date();\n                    indexedDb.putValue(\"sync\", data);\n                  })\n                  .catch((error: any) => {\n                    console.log(error);\n                  });\n              }\n            });\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      };\n\n      if (data.isLoggedIn) {\n        runIndexDb();\n      }\n    }, 5000);\n  }, [data.isLoggedIn]);\n\n  return (\n    <div>\n      <Switch>\n        <Route path=\"/login\">\n          <LoginPage />\n        </Route>\n        <Route path=\"/register\">\n          <RegisterPage />\n        </Route>\n        <ProtectedRoute\n          component={HomePage}\n          isAllowed={data.isLoggedIn}\n          isAuthenticated={data.isLoggedIn}\n          authenticationPath={\"/login\"}\n          restrictedPath={\"/\"}\n        />\n      </Switch>\n      {showNotification && (\n        <animated.div style={props}>\n          <div className=\"h-10 fixed top-10 right-10 z-50\">\n            <div className=\"flex p-5 bg-white rounded-md shadow-xl\">\n              <div className=\"flex-initial\">\n                {variant === \"success\" ? (\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                    className=\"h-7 w-7 text-green-400\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                    />\n                  </svg>\n                ) : (\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                    className=\"h-7 w-7 text-red-400\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n                    />\n                  </svg>\n                )}\n              </div>\n              <div className=\"flex-1 ml-2\">\n                <p className=\"font-bold text-gray-700\">{notifTitle}</p>\n                <p className=\"text-gray-500\">{notifSubTitle}</p>\n              </div>\n              <div className=\"flex-initial ml-5\">\n                <button\n                  onClick={() => {\n                    notifDispatch({ type: \"hide\" });\n                  }}\n                >\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                    className=\"h-6 w-6 text-gray-500\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M6 18L18 6M6 6l12 12\"\n                    />\n                  </svg>\n                </button>\n              </div>\n            </div>\n          </div>\n        </animated.div>\n      )}\n    </div>\n  );\n};\nexport default App;\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/LoginPage.tsx",["1014","1015","1016","1017","1018","1019"],"import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useSpring } from \"react-spring\";\nimport { isLoggedInVar, accessToken } from \"../cache\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { useHistory } from \"react-router-dom\";\nimport Logo from \"../img/logo-dark.png\";\nimport ReactLoading from \"react-loading\";\nimport classnames from \"classnames\";\n\nexport const LoginPage: React.FC = () => {\n  const history = useHistory();\n\n  const [isLegacy, setIsLegacy] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (isLoggedInVar() === true) {\n      history.replace(\"/\");\n    }\n  }, [isLoggedInVar()]);\n\n  const props = useSpring({\n    opacity: 1,\n    config: { duration: 1000 },\n    from: { opacity: 0 },\n  });\n\n  const { register, handleSubmit } = useForm<any>();\n  const notifDispatch = useNotificationDispatch();\n\n  const onSubmit = (data: any) => {\n    setIsLoading(true);\n\n    if (isLegacy) {\n      fetch(`${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/legacy-login`, {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      })\n        .then((res) => {\n          if (!res.ok) {\n            throw res;\n          }\n\n          return res.json();\n        })\n        .then((data) => {\n          setIsLoading(false);\n          sessionStorage.setItem(\"accessToken\", data.token as string);\n          isLoggedInVar(true);\n          accessToken(data.token);\n        })\n        .catch((error) => {\n          setIsLoading(false);\n\n          if (typeof error.json !== \"function\") {\n            notifDispatch({\n              type: \"show\",\n              notifTitle: \"Error\",\n              notifSubTitle: \"Couldn't connect to the server\",\n              variant: \"failure\",\n            });\n\n            return;\n          }\n\n          error.json().then((data: any) => {\n            notifDispatch({\n              type: \"show\",\n              notifTitle: \"Error\",\n              notifSubTitle: data.message,\n              variant: \"failure\",\n            });\n          });\n        });\n    } else {\n      fetch(`${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/login`, {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      })\n        .then((res) => {\n          if (!res.ok) {\n            throw res;\n          }\n\n          return res.json();\n        })\n        .then((data) => {\n          setIsLoading(false);\n          sessionStorage.setItem(\"accessToken\", data.token as string);\n          isLoggedInVar(true);\n          accessToken(data.token);\n        })\n        .catch((error) => {\n          setIsLoading(false);\n          if (typeof error.json !== \"function\") {\n            notifDispatch({\n              type: \"show\",\n              notifTitle: \"Error\",\n              notifSubTitle: \"Couldn't connect to the server\",\n              variant: \"failure\",\n            });\n\n            return;\n          }\n\n          error.json().then((data: any) => {\n            notifDispatch({\n              type: \"show\",\n              notifTitle: \"Error\",\n              notifSubTitle: data.message,\n              variant: \"failure\",\n            });\n          });\n        });\n    }\n  };\n\n  return (\n    <div className=\"h-screen w-screen bg-gray-600 p-16\">\n      <div className=\"h-full w-full bg-white rounded-lg shadow-xl p-5 overflow-auto bg-login bg-center bg-cover\">\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <div>\n            <img className=\"h-auto w-44\" src={Logo} />\n          </div>\n          <div className=\"flex justify-center ml-16 mt-10\">\n            <div className=\"px-7 flex-initial\">\n              <p className=\"text-3xl text-gray-800 font-bold tracking-wide\">\n                Welcome Back\n              </p>\n\n              <p className=\"text-gray-400 font-semibold\">Biruh Vision</p>\n\n              <div className=\"mt-16 w-full z-20 \">\n                {isLegacy && (\n                  <p className=\"text-gray-400 font-semibold mt-6\">\n                    Log in using your legacy account\n                  </p>\n                )}\n\n                {isLegacy && (\n                  <input\n                    className=\"mt-3 p-3 border-none w-full rounded-md bg-gray-200 focus:bg-white focus:placeholder-gray-400\"\n                    type=\"text\"\n                    placeholder=\"Username\"\n                    name=\"username\"\n                    id=\"username\"\n                    required\n                    ref={register({ required: true })}\n                  />\n                )}\n                <input\n                  className=\"mt-6 p-3 border-none w-full rounded-md bg-gray-200 focus:bg-white focus:placeholder-gray-400\"\n                  type=\"text\"\n                  placeholder=\"Email\"\n                  name=\"email\"\n                  id=\"email\"\n                  required\n                  ref={register({ required: true })}\n                />\n                <input\n                  className=\"mt-6 p-3 border-none w-full rounded-md bg-gray-200 focus:bg-white focus:placeholder-gray-400\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  name=\"password\"\n                  id=\"password\"\n                  required\n                  ref={register({ required: true })}\n                />\n              </div>\n\n              <div className=\"mt-4 text-sm text-gray-600 flex justify-between\">\n                <div>\n                  <input type=\"checkbox\" id=\"rememberMe\" name=\"rememberMe\" />\n                  <label className=\"ml-2\" htmlFor=\"rememberMe\">\n                    Remember me\n                  </label>\n                </div>\n                <div>\n                  {isLegacy ? (\n                    <a\n                      href=\"#\"\n                      onClick={(evt) => {\n                        evt.preventDefault();\n                        setIsLegacy(false);\n                      }}\n                    >\n                      New Account?\n                    </a>\n                  ) : (\n                    <a\n                      href=\"#\"\n                      onClick={(evt) => {\n                        evt.preventDefault();\n                        setIsLegacy(true);\n                      }}\n                    >\n                      Legacy Account?\n                    </a>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"mt-10 flex\">\n                <div className=\"flex-1\">\n                  <button\n                    className={classnames(\n                      \"p-3 tracking-wide text-white rounded-full w-full flex items-center justify-center\",\n                      {\n                        \"bg-teal-600 hover:bg-teal-700\": !isLoading,\n                        \"bg-gray-600\": isLoading,\n                      }\n                    )}\n                    type=\"submit\"\n                    disabled={isLoading}\n                  >\n                    {isLoading ? (\n                      <ReactLoading\n                        type={\"cylon\"}\n                        color={\"white\"}\n                        height={30}\n                        width={30}\n                        className=\"inline-block\"\n                      />\n                    ) : (\n                      <p>Login now</p>\n                    )}\n                  </button>\n                </div>\n                <div className=\"flex-1\">\n                  <button\n                    className=\"p-3 w-full text-gray-800 tracking-wide\"\n                    type=\"button\"\n                    onClick={() => {\n                      history.push(\"/register\");\n                    }}\n                  >\n                    Create account\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/SurgicalOrdersPage.tsx",["1020"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState, useEffect } from \"react\";\nimport { OrdersToolbar } from \"../components/OrdersToolbar\";\nimport { OrdersTable } from \"../components/OrdersTable\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { formatDate } from \"../util\";\nimport {\n  MutationScheduleSurgeryArgs,\n  Order,\n  OrderFilterInput,\n  PaginationInput,\n  Query,\n  QueryOrdersArgs,\n} from \"../models/models\";\nimport { HandleOrderScheduleForm } from \"../components/HandleOrderScheduleForm\";\nimport { useLocation } from \"react-router-dom\";\n\nconst SCHEDULE_SURGERY = gql`\n  mutation ScheduleSurgery($input: ScheduleSurgeryInput!) {\n    scheduleSurgery(input: $input) {\n      id\n    }\n  }\n`;\n\nconst GET_ORDERS = gql`\n  query GerOrders($page: PaginationInput!, $filter: OrderFilterInput) {\n    orders(page: $page, filter: $filter) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          user {\n            id\n            firstName\n            lastName\n          }\n          firstName\n          lastName\n          phoneNo\n          patientId\n          emergency\n          note\n          status\n          orderType\n          payments {\n            id\n            invoiceNo\n            status\n            billing {\n              id\n              item\n              code\n              price\n              credit\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\n\nfunction useRouterQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport const SurgicalOrdersPage: React.FC = () => {\n  const query = useRouterQuery();\n  const queryUserId = query.get(\"userId\");\n  const queryStatus = query.get(\"status\");\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const [filter, setFilter] = useState<OrderFilterInput>({\n    date: new Date(),\n    userId: queryUserId === null ? \"all\" : queryUserId,\n    status: queryStatus === null ? \"all\" : queryStatus,\n    orderType: \"SURGICAL_PROCEDURE\",\n  });\n\n  const [scheduleSurgery] = useMutation<any, MutationScheduleSurgeryArgs>(\n    SCHEDULE_SURGERY,\n    {\n      onCompleted(data) {\n        refetch();\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Patient scheduled for surgery successfully\",\n          variant: \"success\",\n        });\n        bottomSheetDispatch({ type: \"hide\" });\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const { data, refetch } = useQuery<Query, QueryOrdersArgs>(GET_ORDERS, {\n    variables: {\n      page: paginationInput,\n      filter: {\n        date: filter.date,\n        userId: filter.userId === \"all\" ? undefined : filter.userId,\n        status: filter.status === \"all\" ? undefined : filter.status,\n        orderType: filter.orderType,\n        searchTerm:\n          filter.searchTerm?.length === 0 ? undefined : filter.searchTerm,\n      },\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [filter, paginationInput]);\n\n  const handleClear = () => {\n    setFilter({\n      date: new Date(),\n      userId: \"all\",\n      status: \"all\",\n      orderType: \"SURGICAL_PROCEDURE\",\n    });\n  };\n\n  const handleNextClick = () => {\n    const totalPages = data?.orders.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleOrderClick = (order: Order) => {\n    bottomSheetDispatch({\n      type: \"show\",\n      snapPoint: 0,\n      children: (\n        <HandleOrderScheduleForm\n          selectedOrder={order}\n          title={`Surgical order for ${order.firstName} ${order.lastName}`}\n          onSubmit={(value: any) => {\n            scheduleSurgery({\n              variables: {\n                input: {\n                  orderId: order.id,\n                  roomId: value.roomId,\n                  checkInTime: formatDate(value.checkInTime),\n                  invoiceNo: value.invoiceNo,\n                },\n              },\n            });\n          }}\n          onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n        />\n      ),\n    });\n  };\n\n  return (\n    <div className=\"h-screen\">\n      <OrdersToolbar\n        filter={filter}\n        onClear={handleClear}\n        onChange={setFilter}\n      />\n\n      <OrdersTable\n        orders={data?.orders}\n        onNext={handleNextClick}\n        onPrev={handlePrevClick}\n        onItemClick={handleOrderClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/ProfilePage.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Patient/index.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/HandleReferralOrderForm.tsx",["1021","1022","1023","1024","1025","1026","1027"],"import { useQuery, useMutation, gql, useLazyQuery } from \"@apollo/client\";\nimport FullCalendar, { DatesSetArg, EventClickArg } from \"@fullcalendar/react\";\nimport { parseISO } from \"date-fns\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  AppointmentInput,\n  Order,\n  PaginationInput,\n  Query,\n  QueryPatientEncounterLimitByUserArgs,\n  QuerySearchAppointmentsArgs,\n} from \"../models/models\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { CalendarEvent } from \"./CalendarEvent\";\n\nconst APPOINTMENT_LOOKUPS = gql`\n  query AppointmentLookups(\n    $page: PaginationInput!\n    $userTypeTitle: String!\n  ) {\n    rooms(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n\n    visitTypes(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n\n    consultationBillings {\n      id\n      item\n      code\n      price\n      credit\n      remark\n    }\n\n    appointmentStatuses(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n\n    getByUserTypeTitle(input: $userTypeTitle) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\n\nconst SEARCH_APPOINTMENTS = gql`\n  query SearchAppointments(\n    $input: AppointmentSearchInput!\n    $page: PaginationInput!\n  ) {\n    searchAppointments(input: $input, page: $page) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          providerName\n          checkInTime\n          checkedInTime\n          checkedOutTime\n          patient {\n            id\n            firstName\n            lastName\n            phoneNo\n          }\n          room {\n            id\n            title\n          }\n          visitType {\n            id\n            title\n          }\n          appointmentStatus {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst GET_PATIENT_ENCOUNTER_LIMIT = gql`\n  query PatientEncounterLimit($userId: ID!) {\n    patientEncounterLimitByUser(userId: $userId) {\n      id\n      userId\n      dailyLimit\n      overbook\n    }\n  }\n`;\n\ninterface Props {\n  selectedOrder: Order;\n  title: string;\n  onCancel: () => void;\n  onSubmit: (value: any) => void;\n}\n\nexport const HandleReferralOrderForm: React.FC<Props> = ({\n  selectedOrder,\n  title,\n  onCancel,\n  onSubmit,\n}) => {\n  const { register, handleSubmit, setValue, watch, getValues } =\n    useForm<AppointmentInput>();\n  const appointmentInput = watch();\n\n  const calendarRef = React.createRef<FullCalendar>();\n\n  const [order, setOrder] = useState<Order>(selectedOrder);\n  const [errors, setErrors] = useState<Array<any>>([]);\n  const [paginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const lookupQuery = useQuery<Query, any>(APPOINTMENT_LOOKUPS, {\n    variables: { page: paginationInput, userTypeTitle: \"Physician\" },\n  });\n\n  const patientEncounterLimitQuery = useLazyQuery<\n    Query,\n    QueryPatientEncounterLimitByUserArgs\n  >(GET_PATIENT_ENCOUNTER_LIMIT);\n\n  const patientEncounterLimit =\n    patientEncounterLimitQuery[1].data?.patientEncounterLimitByUser;\n\n  const providerAppointmentsQuery = useLazyQuery<\n    Query,\n    QuerySearchAppointmentsArgs\n  >(SEARCH_APPOINTMENTS);\n\n  const events =\n    providerAppointmentsQuery[1].data?.searchAppointments.edges.map((e) => ({\n      id: e?.node.id,\n      title: `${e?.node.visitType.title} with ${e?.node.providerName}`,\n      patientName: `${e?.node.firstName} ${e?.node.lastName}`,\n      date: parseISO(e?.node.checkInTime),\n    }));\n\n  useEffect(() => {\n    const values = getValues();\n\n    if (selectedOrder.user.id && values.checkInTime) {\n      providerAppointmentsQuery[0]({\n        variables: {\n          page: { page: 0, size: 100 },\n          input: {\n            userId: selectedOrder.user.id,\n            checkInTime: new Date(values.checkInTime),\n          },\n        },\n      });\n\n      patientEncounterLimitQuery[0]({\n        variables: {\n          userId: selectedOrder.user.id,\n        },\n      });\n    }\n  }, [selectedOrder.user.id, watch(\"checkInTime\")]);\n\n  useEffect(() => {\n    const referral = lookupQuery.data?.visitTypes.edges.find(\n      (e) => e?.node.title === \"Referral\"\n    );\n\n    if (referral) {\n      setValue(\"visitTypeId\", referral.node.id);\n    }\n  }, [lookupQuery.data?.visitTypes]);\n\n  const handleDates = (rangeInfo: DatesSetArg) => {};\n  const handleDateClick = (arg: EventClickArg) => {};\n\n  const openAgenda =\n    selectedOrder.user.id !== undefined &&\n    appointmentInput.checkInTime !== undefined &&\n    appointmentInput.checkInTime.length > 0;\n\n  const selectedUser = lookupQuery.data?.getByUserTypeTitle.find(\n    (e) => e.id.toString() === selectedOrder.user.id?.toString()\n  );\n\n  const providerAppointments =\n    providerAppointmentsQuery[1].data?.searchAppointments;\n  const scheduledToday = providerAppointments?.totalCount ?? 0;\n  const dailyLimit = patientEncounterLimit?.dailyLimit ?? 0;\n  const overbook = patientEncounterLimit?.overbook ?? 0;\n\n  const bookingLeft = dailyLimit - scheduledToday;\n  const overbooked =\n    dailyLimit < scheduledToday && scheduledToday < dailyLimit + overbook;\n  const fullyBooked = scheduledToday >= dailyLimit + overbook;\n\n  const handleFormSubmit = (input: any) => {\n    input.orderId = selectedOrder.id;\n    onSubmit(input);\n  };\n\n  return (\n    <div>\n      <div className=\"z-40 pb-5 bg-white\">\n        <div className=\"flex divide-x-2 divide-gray-300 h-full\">\n          <div className=\"flex-1 px-10\">\n            <div className=\"pt-4 pb-6\">\n              <form onSubmit={handleSubmit(handleFormSubmit)}>\n                <p className=\"text-2xl text-teal-700 font-extrabold tracking-wider\">\n                  {title}\n                </p>\n\n                <div className=\"mt-4\">\n                  <label\n                    htmlFor=\"checkInTime\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Check-In time\n                  </label>\n                  <input\n                    type=\"datetime-local\"\n                    name=\"checkInTime\"\n                    id=\"checkInTime\"\n                    required\n                    ref={register({ required: true })}\n                    className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n                  />\n                </div>\n\n                <div className=\"mt-4\">\n                  <label\n                    htmlFor=\"roomId\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Room\n                  </label>\n                  <select\n                    id=\"roomId\"\n                    name=\"roomId\"\n                    required\n                    ref={register({ required: true })}\n                    className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                  >\n                    {lookupQuery.data?.rooms.edges.map((e) => (\n                      <option key={e?.node.id} value={e?.node.id}>\n                        {e?.node.title}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"mt-4\">\n                  <label\n                    htmlFor=\"visitTypeId\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Visit Type\n                  </label>\n                  <select\n                    id=\"visitTypeId\"\n                    name=\"visitTypeId\"\n                    disabled\n                    ref={register({ required: true })}\n                    className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-gray-100 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                  >\n                    {lookupQuery.data?.visitTypes.edges.map((e) => (\n                      <option key={e?.node.id} value={e?.node.id}>\n                        {e?.node.title}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"mt-4\">\n                  {errors.length > 0 &&\n                    errors.map((e) => (\n                      <p className=\"text-red-600\">Error: {e?.message}</p>\n                    ))}\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md focus:outline-none text-white bg-teal-700 hover:bg-teal-800\"\n                >\n                  Confirm\n                </button>\n              </form>\n            </div>\n          </div>\n          {openAgenda && (\n            <div className=\"flex-1 px-6\">\n              <div className=\"flex justify-between\">\n                <div>\n                  <p className=\"text-xl font-extrabold text-gray-800\">\n                    {`Dr. ${selectedUser?.firstName} ${selectedUser?.lastName}'s Appointments`}\n                  </p>\n                  {!overbooked && !fullyBooked && (\n                    <p className=\"text-green-600 font-semibold\">\n                      {`${scheduledToday} scheduled on this day, ${bookingLeft} left`}\n                    </p>\n                  )}\n\n                  {overbooked && !fullyBooked && (\n                    <p className=\"text-yellow-500 font-semibold\">\n                      {`Provider is overbooked with ${scheduledToday} patients`}\n                    </p>\n                  )}\n\n                  {fullyBooked && (\n                    <p className=\"text-red-500 font-semibold\">\n                      {`Provider is fully booked with ${scheduledToday} patients`}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <button onClick={() => onCancel()}>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                      className=\"text-gray-600 h-8 w-8\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M6 18L18 6M6 6l12 12\"\n                      />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n              <div className=\"mt-8\">\n                <FullCalendar\n                  ref={calendarRef}\n                  plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                  headerToolbar={{\n                    left: \"prev,next today\",\n                    center: \"title\",\n                    right: \"dayGridMonth,timeGridWeek,timeGridDay\",\n                  }}\n                  datesSet={handleDates}\n                  eventClick={handleDateClick}\n                  initialView=\"dayGridMonth\"\n                  events={events}\n                  eventContent={(event) => <CalendarEvent eventInfo={event} />}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/CompleteEyewearPrescriptionOrder.tsx",["1028"],"import { gql, useLazyQuery, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  DiagnosticProcedure,\n  EyewearPrescriptionOrder,\n  MutationUpdateEyewearPrescriptionOrderArgs,\n  Query,\n  QueryPatientChartArgs,\n  QueryRefractionArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport RefractionDistanceComponent from \"./RefractionDistanceForm\";\nimport RefractionNearComponent from \"./RefractionNearForm\";\n\nconst GET_PATIENT_CHART = gql`\n  query PatientChart($id: ID!) {\n    patientChart(id: $id) {\n      id\n      appointmentId\n    }\n  }\n`;\n\nconst UPDATE_EYEWEAR_PRESCRIPTION_ORDER = gql`\n  mutation UpdateEyewearPrescriptionOrder(\n    $input: EyewearPrescriptionOrderUpdateInput!\n  ) {\n    updateEyewearPrescriptionOrder(input: $input) {\n      id\n    }\n  }\n`;\n\nconst GET_REFRACTION = gql`\n  query GetRefraction($patientChartId: ID!) {\n    refraction(patientChartId: $patientChartId) {\n      id\n      rightDistanceSubjectiveSph\n      leftDistanceSubjectiveSph\n      rightDistanceSubjectiveCyl\n      leftDistanceSubjectiveCyl\n      rightDistanceSubjectiveAxis\n      leftDistanceSubjectiveAxis\n      rightNearSubjectiveSph\n      leftNearSubjectiveSph\n      rightNearSubjectiveCyl\n      leftNearSubjectiveCyl\n      rightNearSubjectiveAxis\n      leftNearSubjectiveAxis\n      rightDistanceObjectiveSph\n      leftDistanceObjectiveSph\n      rightDistanceObjectiveCyl\n      leftDistanceObjectiveCyl\n      rightDistanceObjectiveAxis\n      leftDistanceObjectiveAxis\n      rightNearObjectiveSph\n      leftNearObjectiveSph\n      rightNearObjectiveCyl\n      leftNearObjectiveCyl\n      rightNearObjectiveAxis\n      leftNearObjectiveAxis\n      rightDistanceFinalSph\n      leftDistanceFinalSph\n      rightDistanceFinalCyl\n      leftDistanceFinalCyl\n      rightDistanceFinalAxis\n      leftDistanceFinalAxis\n      rightNearFinalSph\n      leftNearFinalSph\n      rightNearFinalCyl\n      leftNearFinalCyl\n      rightNearFinalAxis\n      leftNearFinalAxis\n      rightVisualAcuity\n      leftVisualAcuity\n      farPd\n      nearPd\n    }\n  }\n`;\n\ninterface Props {\n  onCancel: () => void;\n  onSuccess: () => void;\n  item: EyewearPrescriptionOrder;\n}\n\nexport const CompleteEyewearPrescriptionOrder: React.FC<Props> = ({\n  onCancel,\n  onSuccess,\n  item,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const refractionForm = useForm<DiagnosticProcedure>();\n\n  const { data } = useQuery<Query, QueryRefractionArgs>(GET_REFRACTION, {\n    variables: {\n      patientChartId: item.patientChartId,\n    },\n  });\n\n  useEffect(() => {\n    if (data?.refraction) {\n      refractionForm.reset(data.refraction);\n    }\n  }, [data?.refraction]);\n\n  const patientChartLazyQuery = useLazyQuery<Query, QueryPatientChartArgs>(\n    GET_PATIENT_CHART,\n    {\n      onCompleted(data) {\n        const appointmentId = data.patientChart.appointmentId;\n        if (appointmentId) {\n          window.open(\n            `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/pdf_eyeglass_prescription?appointmentId=${appointmentId}`\n          );\n        }\n      },\n    }\n  );\n\n  const [updateEyewearPrescriptionOrder] = useMutation<\n    any,\n    MutationUpdateEyewearPrescriptionOrderArgs\n  >(UPDATE_EYEWEAR_PRESCRIPTION_ORDER, {\n    onCompleted(data) {\n      onSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const handlePrint = () => {\n    patientChartLazyQuery[0]({\n      variables: {\n        id: item.patientChartId,\n      },\n    });\n  };\n\n  const handleCompleted = () => {\n    updateEyewearPrescriptionOrder({\n      variables: {\n        input: {\n          id: item.id,\n          status: \"COMPLETED\",\n        },\n      },\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div>\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        <div>\n          <p className=\"text-2xl font-extrabold tracking-wider text-teal-700\">\n            Prescription\n          </p>\n          <div className=\"mt-6\">\n            <hr />\n            <p className=\"text-2xl font-semibold mt-5 text-center\">\n              Refraction\n            </p>\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center mt-10\">\n              <div className=\"col-span-1\"></div>\n              <div className=\"col-span-4 justify-self-center font-semibold\">\n                OD\n              </div>\n              <div className=\"col-span-4 justify-self-center font-semibold\">\n                OS\n              </div>\n\n              <div className=\"col-span-1\"></div>\n              <div className=\"col-span-4\">\n                <div className=\"flex justify-around\">\n                  <div>SPH</div>\n                  <div>CYL</div>\n                  <div>AXIS</div>\n                </div>\n              </div>\n              <div className=\"col-span-4\">\n                <div className=\"flex justify-around\">\n                  <div>SPH</div>\n                  <div>CYL</div>\n                  <div>AXIS</div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center p-2 rounded-md\">\n              <div className=\"co-span-1\">\n                <span className=\"text-xs\">Distance</span>\n              </div>\n              <div className=\"col-span-4\"></div>\n              <div className=\"col-span-4\"></div>\n            </div>\n\n            <RefractionDistanceComponent\n              readonly={true}\n              register={refractionForm.register}\n              handleChange={() => {}}\n            />\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center p-2 rounded-md\">\n              <div className=\"co-span-1\">\n                <span className=\"text-xs\">Near</span>\n              </div>\n              <div className=\"col-span-4\"></div>\n              <div className=\"col-span-4\"></div>\n            </div>\n\n            <RefractionNearComponent\n              readonly={true}\n              register={refractionForm.register}\n              handleChange={() => {}}\n            />\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center mt-5\">\n              <div className=\"col-span-1\">\n                <span className=\"text-gray-600 tracking-wide text-sm\">\n                  Visual Acuity\n                </span>\n              </div>\n              <div className=\"col-span-4\">\n                <input\n                  type=\"text\"\n                  name=\"rightVisualAcuity\"\n                  readOnly\n                  ref={refractionForm.register}\n                  className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                  onChange={() => {}}\n                />\n              </div>\n              <div className=\"col-span-4\">\n                <input\n                  type=\"text\"\n                  name=\"leftVisualAcuity\"\n                  readOnly\n                  ref={refractionForm.register}\n                  className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                  onChange={() => {}}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center mt-2\">\n              <div className=\"col-span-1\">\n                <span className=\"text-gray-600 tracking-wide text-sm\">\n                  Far PD\n                </span>\n              </div>\n              <div className=\"col-span-4\">\n                <input\n                  type=\"text\"\n                  name=\"farPd\"\n                  readOnly\n                  ref={refractionForm.register}\n                  className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                  onChange={() => {}}\n                />\n              </div>\n              <div className=\"col-span-4\"></div>\n              <div className=\"col-span-1\">\n                <span className=\"text-gray-600 tracking-wide text-sm\">\n                  Near PD\n                </span>\n              </div>\n              <div className=\"col-span-4\">\n                <input\n                  type=\"text\"\n                  name=\"nearPd\"\n                  readOnly\n                  ref={refractionForm.register}\n                  className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                  onChange={() => {}}\n                />\n              </div>\n              <div className=\"col-span-4\"></div>\n            </div>\n          </div>\n          <div>\n            {item.eyewearPrescriptions.map((e, i) => (\n              <div key={e?.id} className=\"mt-10\">\n                <p className=\"text-2xl font-semibold text-center\">{`Prescription ${++i}`}</p>\n\n                <div className=\"mt-4 grid grid-cols-4 space-y-2 text-lg\">\n                  <label className=\"inline-flex items-center\">\n                    <input\n                      readOnly\n                      type=\"checkbox\"\n                      name=\"glass\"\n                      checked={e?.glass ?? false}\n                      onChange={() => {}}\n                    />\n                    <span className=\"ml-2\">Glass</span>\n                  </label>\n                  <label className=\"inline-flex items-center\">\n                    <input\n                      readOnly\n                      type=\"checkbox\"\n                      name=\"photoChromatic\"\n                      checked={e?.photoChromatic ?? false}\n                      onChange={() => {}}\n                    />\n                    <span className=\"ml-2\">Photo Chromatic</span>\n                  </label>\n                  <label className=\"inline-flex items-center\">\n                    <input\n                      readOnly\n                      type=\"checkbox\"\n                      name=\"bifocal\"\n                      checked={e?.bifocal ?? false}\n                      onChange={() => {}}\n                    />\n                    <span className=\"ml-2\">Bifocal</span>\n                  </label>\n\n                  <label className=\"inline-flex items-center\">\n                    <input\n                      readOnly\n                      type=\"checkbox\"\n                      name=\"plastic\"\n                      checked={e?.plastic ?? false}\n                      onChange={() => {}}\n                    />\n                    <span className=\"ml-2\">Plastic</span>\n                  </label>\n                  <label className=\"inline-flex items-center\">\n                    <input\n                      readOnly\n                      type=\"checkbox\"\n                      name=\"glareFree\"\n                      checked={e?.glareFree ?? false}\n                      onChange={() => {}}\n                    />\n                    <span className=\"ml-2\">Glare Free</span>\n                  </label>\n                  <label className=\"inline-flex items-center\">\n                    <input\n                      readOnly\n                      type=\"checkbox\"\n                      name=\"progressive\"\n                      checked={e?.progressive ?? false}\n                      onChange={() => {}}\n                    />\n                    <span className=\"ml-2\">Progressive</span>\n                  </label>\n                  <label className=\"inline-flex items-center\">\n                    <input\n                      readOnly\n                      type=\"checkbox\"\n                      name=\"singleVision\"\n                      checked={e?.singleVision ?? false}\n                      onChange={() => {}}\n                    />\n                    <span className=\"ml-2\">Single vision</span>\n                  </label>\n                  <label className=\"inline-flex items-center\">\n                    <input\n                      readOnly\n                      type=\"checkbox\"\n                      name=\"scratchResistant\"\n                      checked={e?.scratchResistant ?? false}\n                      onChange={() => {}}\n                    />\n                    <span className=\"ml-2\">Scratch Resistant</span>\n                  </label>\n                  <label className=\"inline-flex items-center\">\n                    <input\n                      readOnly\n                      type=\"checkbox\"\n                      name=\"twoSeparateGlasses\"\n                      checked={e?.twoSeparateGlasses ?? false}\n                      onChange={() => {}}\n                    />\n                    <span className=\"ml-2\">Two separate glasses</span>\n                  </label>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className=\"flex space-x-5 mt-5\">\n          <button\n            type=\"button\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 shadow-sm text-sm font-medium rounded-md text-teal border border-teal-700 focus:outline-none\"\n            onClick={() => handlePrint()}\n          >\n            <span className=\"material-icons\">print</span>\n            <span className=\"ml-2\">Print</span>\n          </button>\n\n          {item.status === \"Ordered\" && (\n            <button\n              type=\"submit\"\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-teal-600 focus:outline-none\"\n              onClick={() => handleCompleted()}\n            >\n              <span className=\"material-icons\">done</span>\n              <span className=\"ml-2\">Complete</span>\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientRegistrationEmergencyInfoForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/CompleteLabOrderForm.tsx",["1029","1030","1031"],"import { gql, useMutation } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useNotificationDispatch } from \"../notification\";\nimport MenuComponent from \"./MenuComponent\";\nimport { Menu } from \"@headlessui/react\";\nimport { PrinterIcon, SortAscendingIcon } from \"@heroicons/react/outline\";\nimport {\n  LabOrder,\n  LabOrderStatus,\n  MutationConfirmLabOrderArgs,\n  MutationRequestPaymentWaiverArgs,\n} from \"../models/models\";\nimport { useForm } from \"react-hook-form\";\nimport classnames from \"classnames\";\n\nconst CONFIRM_PAYMENT = gql`\n  mutation ConfirmPayment($id: ID!, $invoiceNo: String!) {\n    confirmPayment(id: $id, invoiceNo: $invoiceNo) {\n      id\n    }\n  }\n`;\n\nconst CONFIRM_LAB_ORDER = gql`\n  mutation ConfirmLabOrder($id: ID!, $invoiceNo: String!) {\n    confirmLabOrder(id: $id, invoiceNo: $invoiceNo) {\n      id\n    }\n  }\n`;\n\nconst REQUEST_WAIVER = gql`\n  mutation RequestPaymentWaiver($paymentId: ID!, $patientId: ID!) {\n    requestPaymentWaiver(paymentId: $paymentId, patientId: $patientId) {\n      id\n    }\n  }\n`;\n\nconst REQUEST_WAIVER_BATCH = gql`\n  mutation RequestPaymentWaivers($ids: [ID!]!, $patientId: ID!) {\n    requestPaymentWaivers(ids: $ids, patientId: $patientId)\n  }\n`;\n\ninterface Props {\n  selectedOrder: LabOrder;\n  onSuccess: () => void;\n  onCancel: () => void;\n  onRefresh: () => void;\n}\n\nexport const CompleteLabOrderForm: React.FC<Props> = ({\n  selectedOrder,\n  onSuccess,\n  onCancel,\n  onRefresh,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n\n  const { register, handleSubmit } = useForm();\n\n  const [order, setOrder] = useState<LabOrder>(selectedOrder);\n  const [requestedWaiver, setRequestedWaiver] = useState<{\n    labIdx: number | -1;\n    paymentId: string | null;\n    patientId: string | null;\n  }>({\n    labIdx: -1,\n    paymentId: null,\n    patientId: null,\n  });\n\n  const [errors, setErrors] = useState<Array<any>>([]);\n\n  useEffect(() => {\n    const { labIdx, paymentId, patientId } = requestedWaiver;\n    if (labIdx !== -1 && paymentId !== null && patientId !== null) {\n      requestWaiver({\n        variables: {\n          paymentId: paymentId,\n          patientId: patientId,\n        },\n      });\n    }\n  }, [requestedWaiver]);\n\n  const [confirmLabOrder, confirmLabOrderResult] = useMutation<\n    any,\n    MutationConfirmLabOrderArgs\n  >(CONFIRM_LAB_ORDER, {\n    onCompleted(data) {\n      onSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [requestWaiver, requestWaiverResult] = useMutation<\n    any,\n    MutationRequestPaymentWaiverArgs\n  >(REQUEST_WAIVER, {\n    onCompleted(data) {\n      const paymentId = data.requestPaymentWaiver.id;\n\n      const lab = order.labs[requestedWaiver.labIdx];\n\n      if (lab) {\n        const labIdx = lab.payments.findIndex((p) => p.id === paymentId);\n\n        setOrder({\n          ...order,\n          labs: [\n            ...order.labs.slice(0, requestedWaiver.labIdx),\n            {\n              ...lab,\n              payments: [\n                ...lab.payments.slice(0, labIdx),\n                {\n                  ...lab.payments[labIdx],\n                  status: \"PAYMENT_WAIVER_REQUESTED\",\n                },\n                ...lab.payments?.slice(labIdx + 1),\n              ],\n            },\n            ...order.labs.slice(requestedWaiver.labIdx + 1),\n          ],\n        });\n      }\n    },\n    update: (cache, mutationResult) => {\n      const lab = order.labs[requestedWaiver.labIdx];\n\n      let payment = lab.payments?.find(\n        (e) => e?.id === mutationResult.data.requestPaymentWaiver.id\n      );\n\n      if (payment) {\n        cache.modify({\n          id: cache.identify(payment),\n          fields: {\n            status(cachedStatus) {\n              return \"PAYMENT_WAIVER_REQUESTED\";\n            },\n          },\n        });\n      }\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    let newErrors = [];\n    if (requestWaiverResult.error) newErrors.push(requestWaiverResult.error);\n    if (confirmLabOrderResult.error)\n      newErrors.push(confirmLabOrderResult.error);\n    setErrors(newErrors);\n  }, [requestWaiverResult.error, confirmLabOrderResult.error]);\n\n  const handleFormSubmit = (values: any) => {\n    confirmLabOrder({\n      variables: { id: order.id, invoiceNo: values.invoiceNo },\n    });\n  };\n\n  const hasPendingPayments = order.labs\n    .map((e) => e.payments)\n    .flat()\n    .some((e) => e.status === \"PAYMENT_WAIVER_REQUESTED\");\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit(handleFormSubmit)}>\n          <p className=\"text-2xl text-teal-700 font-extrabold tracking-wider\">{`Order for ${order.firstName} ${order.lastName}`}</p>\n\n          {order.labs.map((lab, index) => (\n            <div key={lab.id} className=\"mt-5\">\n              {order.labs.length - 1 === index && <hr className=\"mb-5\" />}\n              <p className=\"text-center font-semibold text-xl\">\n                {lab.labType.title}\n              </p>\n              <table className=\"table-fixed w-full mt-5\">\n                <thead>\n                  <tr className=\"bg-gray-50\">\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                    >\n                      Billing\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                    >\n                      Code\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                    >\n                      Price\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                    ></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {lab.payments.map((payment) => (\n                    <tr key={payment.id} className=\"border-t\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {payment.billing.item}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {payment.billing.code}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        <span className=\"text-gray-600 tracking-wide\">\n                          ETB{\" \"}\n                        </span>\n                        <span>{payment.billing.price.toLocaleString()}</span>\n                      </td>\n                      <td className=\"px-6 py-4 text-sm\">\n                        {payment.status === \"PAID\" && (\n                          <p className=\"text-green-700 uppercase font-semibold\">\n                            Payment Confirmed\n                          </p>\n                        )}\n                        {payment.status === \"PAYMENT_WAIVER_REQUESTED\" && (\n                          <p className=\"text-yellow-700 uppercase font-semibold animate-pulse\">\n                            Payment waiver requested\n                          </p>\n                        )}\n                        {payment.status === \"NOTPAID\" && (\n                          <MenuComponent\n                            title={\"Options\"}\n                            menus={\n                              <div className=\"px-1 py-1\">\n                                <Menu.Item>\n                                  {({ active }) => (\n                                    <button\n                                      disabled\n                                      className={`${\n                                        active\n                                          ? \"bg-teal-500 text-white\"\n                                          : \"text-gray-900\"\n                                      } group flex rounded-md items-center w-full px-2 py-2 text-sm opacity-20`}\n                                      type=\"button\"\n                                      onClick={() => {}}\n                                    >\n                                      <PrinterIcon\n                                        className=\"w-5 h-5 mr-2 text-teal-700\"\n                                        aria-hidden=\"true\"\n                                      />\n                                      Confirm Payment\n                                    </button>\n                                  )}\n                                </Menu.Item>\n                                <Menu.Item>\n                                  {({ active }) => (\n                                    <button\n                                      className={`${\n                                        active\n                                          ? \"bg-teal-500 text-white\"\n                                          : \"text-gray-900\"\n                                      } group flex rounded-md items-center w-full px-2 py-2 text-sm`}\n                                      type=\"button\"\n                                      onClick={() => {\n                                        setRequestedWaiver({\n                                          labIdx: index,\n                                          paymentId: payment.id,\n                                          patientId: order.patientId,\n                                        });\n                                      }}\n                                    >\n                                      <SortAscendingIcon\n                                        className=\"w-5 h-5 mr-2 text-teal-700\"\n                                        aria-hidden=\"true\"\n                                      />\n                                      Request Payment Waiver\n                                    </button>\n                                  )}\n                                </Menu.Item>\n                              </div>\n                            }\n                          />\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ))}\n\n          <div className=\"mt-4\">\n            {errors.length > 0 &&\n              errors.map((e) => (\n                <p className=\"text-red-600\">Error: {e?.message}</p>\n              ))}\n          </div>\n\n          {order.status === LabOrderStatus.Ordered && (\n            <div className=\"mt-5\">\n                 <div>\n                <label\n                  htmlFor=\"invoiceNo\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Invoice\n                </label>\n                <input\n                  id=\"invoiceNo\"\n                  name=\"invoiceNo\"\n                  required\n                  ref={register({ required: true })}\n                  className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                />\n              </div>\n\n              <div className=\"py-3 mt-2 bg-gray-50 text-right\">\n                <button\n                  type=\"submit\"\n                  disabled={hasPendingPayments}\n                  className={classnames(\n                    \"inline-flex justify-center w-full py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md focus:outline-none\",\n                    {\n                      \"bg-teal-600 hover:bg-teal-700 text-white\":\n                        !hasPendingPayments,\n                      \"bg-yellow-500 text-yellow-800 animate-pulse\":\n                        hasPendingPayments,\n                    }\n                  )}\n                >\n                  <span className=\"ml-2\">\n                    {hasPendingPayments\n                      ? \"Pending waiver approval\"\n                      : \"Confirm All Payments\"}\n                  </span>\n                </button>\n              </div>\n            </div>\n          )}\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientEmergencyContactInfo.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/RefractionNearForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/WorkflowTable/index.tsx",["1032","1033","1034","1035","1036","1037"],"import { gql, useLazyQuery, useQuery } from \"@apollo/client\";\nimport { formatDistance, parseISO } from \"date-fns\";\nimport debounce from \"lodash-es/debounce\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  Appointment,\n  PaginationInput,\n  Query,\n  QueryGetUserAppointmentsArgs,\n} from \"../../models/models\";\nimport Modal from \"../Modal\";\nimport { TablePagination } from \"../table_pagination\";\n\nconst GET_APPOINTMENTS = gql`\n  query GetUserAppointments($page: PaginationInput!, $searchTerm: String) {\n    getUserAppointments(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          visitType {\n            title\n          }\n          patient {\n            id\n            firstName\n            lastName\n          }\n          patientChart {\n            id\n          }\n          checkInTime\n          checkedInTime\n        }\n      }\n    }\n  }\n`;\n\ninterface WorkflowProps {\n  onAppointmentClick: (appointment: Appointment) => void;\n}\n\nexport const WorkflowTable: React.FC<WorkflowProps> = ({\n  onAppointmentClick,\n}) => {\n  const [showSearch, setShowSearch] = useState<boolean>(false);\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(\"\");\n  const [referralModel, setReferralModel] = useState({\n    open: false,\n    appointmentId: null,\n  });\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 10,\n  });\n\n  const appointmentQuery = useLazyQuery<Query, QueryGetUserAppointmentsArgs>(\n    GET_APPOINTMENTS,\n    {\n      variables: { page: paginationInput },\n    }\n  );\n\n  useEffect(() => {\n    appointmentQuery[0]({\n      variables: {\n        page: paginationInput,\n      },\n    });\n  }, []);\n\n  useEffect(() => {\n    appointmentQuery[0]({\n      variables: {\n        page: paginationInput,\n        searchTerm: debouncedSearchTerm,\n      },\n    });\n  }, [paginationInput, debouncedSearchTerm]);\n\n  const handleNextClick = () => {\n    const totalPages =\n      appointmentQuery[1].data?.getUserAppointments.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n  const debouncer = useCallback(\n    debounce((_searchVal: string) => {\n      setDebouncedSearchTerm(_searchVal);\n    }, 1000),\n    []\n  );\n\n  return (\n    <div className=\"shadow overflow-auto border-b border-gray-200 sm:rounded-lg\">\n      <table className=\"min-w-full divide-y divide-gray-200\">\n        <thead>\n          <tr className=\"border-green-700 border-l-4\">\n            <th\n              scope=\"col\"\n              colSpan={1}\n              className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              Workflow\n            </th>\n            <th\n              scope=\"col\"\n              colSpan={2}\n              className=\"px-6 py-3 bg-gray-50 text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              <div className=\"flex justify-end\">\n                {showSearch && (\n                  <input\n                    autoFocus\n                    type=\"search\"\n                    placeholder=\"Search\"\n                    value={searchTerm}\n                    onChange={(evt) => {\n                      setSearchTerm(evt.target.value.trim());\n                      debouncer(evt.target.value.trim());\n                    }}\n                    onBlur={() => setShowSearch(false)}\n                    className=\"px-2 py-1 border border-gray-200 rounded-md shadow-inner\"\n                  />\n                )}\n\n                {!showSearch && (\n                  <button type=\"button\" onClick={() => setShowSearch(true)}>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                      className=\"h-5 w-5\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                      />\n                    </svg>\n                  </button>\n                )}\n              </div>\n            </th>\n          </tr>\n          <tr className=\"bg-gray-100\">\n            <th\n              scope=\"col\"\n              className=\"px-6 py-2 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n            >\n              Patient\n            </th>\n            <th\n              scope=\"col\"\n              className=\"px-6 py-2 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n            >\n              Visit Type\n            </th>\n            <th\n              scope=\"col\"\n              className=\"px-6 py-2 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n            >\n              Checked-In\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200\">\n          {appointmentQuery[1].data?.getUserAppointments.edges.map((e) => (\n            <tr\n              key={e?.node.id}\n              className=\"hover:bg-gray-100 cursor-pointer\"\n              onClick={() => {\n                e?.node && onAppointmentClick(e.node);\n              }}\n            >\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0 h-10 w-10\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                      className=\"h-10 w-10 text-gray-600\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                      />\n                    </svg>\n                  </div>\n                  <div className=\"ml-4\">\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {`${e?.node.patient.firstName} ${e?.node.patient.lastName}`}\n                    </div>\n                  </div>\n                </div>\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                <span className=\"px-1 inline-flex leading-5\">\n                  {e?.node.visitType?.title}\n                </span>\n              </td>\n\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                <span className=\"text-green-700\">\n                  {e?.node.checkedInTime &&\n                    formatDistance(\n                      parseISO(e?.node.checkedInTime),\n                      new Date(),\n                      {\n                        addSuffix: true,\n                      }\n                    )}\n                </span>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <TablePagination\n        totalCount={\n          appointmentQuery[1].data?.getUserAppointments.totalCount ?? 0\n        }\n        onNext={handleNextClick}\n        onPrevious={handlePrevClick}\n      />\n\n      <Modal\n        open={false}\n        title={\"Referral\"}\n        description={\n          \"This patient was referred to you by a provider. Would you like a blank page or prefer the notes automatically copied from the previous provider?\"\n        }\n        positive={\"Blank Page\"}\n        negative={\"Copy Notes\"}\n        onNegativeClick={() => {}}\n        onPositiveClick={() => {}}\n        onClose={() => {}}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/PaymentWaiversPage.tsx",["1038"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport {\n  Maybe,\n  Mutation,\n  MutationApprovePaymentWaiverArgs,\n  PaginationInput,\n  PaymentWaiver,\n  PaymentWaiverEdge,\n  Query,\n  QueryPaymentWaiversArgs,\n} from \"../../models/models\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport classnames from \"classnames\";\n\nexport const PAYMENT_WAIVERS = gql`\n  query PaymentWaivers($page: PaginationInput!) {\n    paymentWaivers(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          patient {\n            id\n            firstName\n            lastName\n          }\n          user {\n            id\n            firstName\n            lastName\n          }\n          payment {\n            id\n            billing {\n              id\n              item\n              code\n              price\n            }\n          }\n          approved\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst APPROVE_PAYMENT_WAIVER = gql`\n  mutation ApprovePaymentWaiver($id: ID!, $approve: Boolean!) {\n    approvePaymentWaiver(id: $id, approve: $approve) {\n      id\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 20;\n\nexport const PaymentWaiversPage: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryPaymentWaiversArgs>(\n    PAYMENT_WAIVERS,\n    {\n      variables: { page: paginationInput },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.paymentWaivers.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleRequestClick = (paymentWaiver: PaymentWaiver) => {\n    bottomSheetDispatch({\n      type: \"show\",\n      snapPoint: 500,\n      children: (\n        <HandleWaiverForm\n          paymentWaiver={paymentWaiver}\n          onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n          onSuccess={() => {\n            refetch();\n            bottomSheetDispatch({ type: \"hide\" });\n          }}\n        />\n      ),\n    });\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"overflow-x-auto\">\n        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  colSpan={6}\n                  className=\"px-6 py-3 bg-gray-700 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                >\n                  Payment waiver requests\n                </th>\n              </tr>\n              <tr>\n                <th colSpan={6}>\n                  <input\n                    type=\"text\"\n                    name=\"search\"\n                    placeholder=\"Search\"\n                    className=\"p-3 pl-4 block w-full sm:text-md border-gray-300\"\n                  />\n                </th>\n              </tr>\n              <tr className=\"bg-gray-50\">\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Patient\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Billing\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Code\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Price\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Requested by\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Status\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {data?.paymentWaivers.edges.map(\n                (value: Maybe<PaymentWaiverEdge>) => (\n                  <tr\n                    key={value?.node.id}\n                    className=\"hover:bg-gray-100\"\n                    onClick={() => {\n                      value?.node && handleRequestClick(value.node);\n                    }}\n                  >\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {`${value?.node.patient.firstName} ${value?.node.patient.lastName}`}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {`${value?.node.payment.billing.item}`}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {`${value?.node.payment.billing.code}`}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {`ETB ${value?.node.payment.billing.price}`}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {`${value?.node.user.firstName} ${value?.node.user.lastName}`}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      <span\n                        className={classnames(\n                          \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\",\n                          {\n                            \"bg-yellow-100 text-yellow-800\":\n                              !value?.node.approved,\n                          },\n                          {\n                            \"bg-green-100 text-green-800\": value?.node.approved,\n                          }\n                        )}\n                      >\n                        {value?.node.approved ? \"Approved\" : \"Not approved\"}\n                      </span>\n                    </td>\n                  </tr>\n                )\n              )}\n            </tbody>\n          </table>\n          <TablePagination\n            totalCount={data?.paymentWaivers.totalCount ?? 0}\n            onNext={handleNextClick}\n            onPrevious={handlePreviousClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface HandleWaiverFormProps {\n  paymentWaiver: PaymentWaiver;\n  onCancel: () => void;\n  onSuccess: () => void;\n}\n\nexport const HandleWaiverForm: React.FC<HandleWaiverFormProps> = ({\n  paymentWaiver,\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n\n  const [updatePaymentWaiver] = useMutation<\n    Mutation,\n    MutationApprovePaymentWaiverArgs\n  >(APPROVE_PAYMENT_WAIVER, {\n    onCompleted(data) {\n      onSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const onApprove = () => {\n    updatePaymentWaiver({\n      variables: {\n        id: paymentWaiver.id,\n        approve: true,\n      },\n    });\n  };\n\n  const onReject = () => {\n    updatePaymentWaiver({\n      variables: {\n        id: paymentWaiver.id,\n        approve: false,\n      },\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        <form>\n          <p className=\"text-2xl text-teal-700 font-semibold tracking-wider\">\n            Payment waiver request\n          </p>\n          <div className=\"mt-5\">\n            <table className=\"table-fixed w-full\">\n              <thead>\n                <tr className=\"bg-gray-50\">\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                  >\n                    Patient\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                  >\n                    Billing\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                  >\n                    Price\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                  >\n                    Requested by\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr className=\"border-t\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {`${paymentWaiver?.patient.firstName} ${paymentWaiver?.patient.lastName}`}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {`${paymentWaiver?.payment.billing.item} (${paymentWaiver?.payment.billing.code})`}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {paymentWaiver?.payment.billing.price}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {`${paymentWaiver?.user.firstName} ${paymentWaiver?.user.lastName}`}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <div className=\"mt-5 flex space-x-3\">\n            <button\n              type=\"button\"\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-teal-700 hover:bg-teal-800 focus:outline-none\"\n              onClick={onApprove}\n            >\n              <span className=\"ml-2\">Approve</span>\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-yellow-700 hover:bg-yellow-800 focus:outline-none\"\n              onClick={onReject}\n            >\n              <span className=\"ml-2\">Reject</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/GeneralAdminPage.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Patient/PatientsPage.tsx",["1039","1040","1041","1042"],"import { gql, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  PaginationInput,\n  Patient,\n  Query,\n  QueryPatientsArgs,\n} from \"../../models/models\";\nimport { Page } from \"../../models/page\";\n\nconst PATIENTS = gql`\n  query Patients($page: PaginationInput) {\n    patients(page: $page) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          firstName\n          lastName\n          phoneNo\n        }\n      }\n    }\n  }\n`;\n\nexport const PatientsPage: React.FC<{ onAddPage: (page: Page) => void }> = ({\n  onAddPage,\n}) => {\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryPatientsArgs>(PATIENTS, {\n    variables: {\n      page: paginationInput,\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.patients.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handlePatientClick = (patient: Patient) => {};\n\n  return (\n    <div className=\"h-screen\">\n      <Toolbar />\n      <PatientsTable />\n    </div>\n  );\n};\n\ninterface ToolbarProps {}\n\nconst Toolbar: React.FC<ToolbarProps> = () => {\n  return (\n    <div className=\"flex bg-white w-full h-16 p-4 mt-4 rounded-md shadow-md justify-between items-center\">\n      <div className=\"flex items-center text-gray-700\">\n        <div className=\"relative mx-auto text-gray-600\">\n          <input\n            className=\"border-2 border-gray-300 bg-white h-10 px-5 pr-16 rounded-lg text-sm focus:outline-none\"\n            type=\"search\"\n            name=\"searchTerm\"\n            placeholder=\"Search\"\n            onChange={(evt) => {}}\n          />\n          <button type=\"submit\" className=\"absolute right-0 top-0 mt-3 mr-4\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n              className=\"h-4 w-4\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface PatientsTableProps {}\n\nconst PatientsTable: React.FC<PatientsTableProps> = () => {\n  return (\n    <div className=\"flex flex-col mt-4\">\n      <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n        <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n          <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n            <table className=\"min-w-full divide-y divide-gray-200\"></table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddEyewearShopForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateBillingForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/IopSideInfo.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/MedicationAllergiesPage.tsx",["1043"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { AddMedicalPrescriptionForm } from \"../../components/AddMedicalPrescriptionForm\";\nimport { UpdateMedicalPrescriptionForm } from \"../../components/UpdateMedicationForm\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport { MedicationTable } from \"../../components/MedicationTable\";\nimport { AddAllergyForm } from \"../../components/AddAllergyForm\";\nimport { AllergyTable } from \"../../components/AllergyTable\";\nimport { UpdateAllergyForm } from \"../../components/UpdateAllergyForm\";\nimport {\n  Allergy,\n  MedicalPrescription,\n  MutationUpdateMedicationPrescriptionArgs,\n  Query,\n  QueryAllergiesArgs,\n  QuerySearchMedicalPrescriptionsArgs,\n} from \"../../models/models\";\nimport { AppointmentContext } from \"../../_context/AppointmentContext\";\n\ninterface Props {\n  patientChartId: string | undefined;\n  patientHistoryId: string | undefined;\n  patientId: string | undefined;\n}\n\nexport const MedicationAllergiesPage: React.FC<Props> = (props) => {\n  return (\n    <div className=\"\">\n      <div className=\"mt-5\">\n        <PastMedications {...props} />\n      </div>\n\n      <div className=\"mt-5\">\n        <Allergies patientHistoryId={props.patientHistoryId} />\n      </div>\n    </div>\n  );\n};\n\nconst MEDICATION_PRESCRIPTIONS = gql`\n  query SearchMedicalPrescriptions(\n    $page: PaginationInput!\n    $filter: MedicalPrescriptionFilter\n  ) {\n    searchMedicalPrescriptions(page: $page, filter: $filter) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          medication\n          sig\n          refill\n          generic\n          substitutionAllowed\n          directionToPatient\n          prescribedDate\n          history\n          status\n        }\n      }\n    }\n  }\n`;\n\nconst UPDATE_MEDICATION_PRESCRIPTION = gql`\n  mutation UpdateMedicationPrescription(\n    $input: MedicalPrescriptionUpdateInput!\n  ) {\n    updateMedicationPrescription(input: $input) {\n      id\n    }\n  }\n`;\n\nconst PastMedications: React.FC<Props> = ({ patientChartId, patientId }) => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  const { data, refetch } = useQuery<\n    Query,\n    QuerySearchMedicalPrescriptionsArgs\n  >(MEDICATION_PRESCRIPTIONS, {\n    variables: {\n      page: { page: 0, size: 20 },\n      filter: { patientId: patientId, history: true },\n    },\n  });\n\n  const [update] = useMutation<any, MutationUpdateMedicationPrescriptionArgs>(\n    UPDATE_MEDICATION_PRESCRIPTION,\n    {\n      onCompleted(data) {\n        refetch();\n\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Medication has been updated successfully\",\n          variant: \"success\",\n        });\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  return (\n    <div className=\"flex-1 bg-gray-50 rounded shadow-lg p-5\">\n      <p className=\"text-2xl text-gray-600 font-bold\">Past Medications</p>\n\n      <hr className=\"mt-4 mb-4\" />\n\n      <div className=\"flex justify-end\">\n        <button\n          disabled={patientChartLocked[0]}\n          onClick={() =>\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 0,\n              children: (\n                <AddMedicalPrescriptionForm\n                  history={true}\n                  patientId={patientId}\n                  patientChartId={patientChartId}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Medication has been saved successfully\",\n                      variant: \"success\",\n                    });\n                    refetch();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                />\n              ),\n            })\n          }\n          className=\"border border-teal-600 text-teal-800 px-3 py-1 rounded-lg flex space-x-1 items-center\"\n        >\n          <div className=\"material-icons\">add</div>\n          <p>Add</p>\n        </button>\n      </div>\n\n      <MedicationTable\n        items={data?.searchMedicalPrescriptions.edges.map((e) => e?.node)}\n        onUpdate={(item: MedicalPrescription, value: string) => {\n          if (item.id !== undefined) {\n            update({\n              variables: {\n                input: {\n                  id: item.id,\n                  status: value,\n                },\n              },\n            });\n          }\n        }}\n        onEdit={(item: MedicalPrescription) => {\n          bottomSheetDispatch({\n            type: \"show\",\n            snapPoint: 0,\n            children: (\n              <UpdateMedicalPrescriptionForm\n                onUpdateSuccess={() => {\n                  bottomSheetDispatch({ type: \"hide\" });\n\n                  notifDispatch({\n                    type: \"show\",\n                    notifTitle: \"Success\",\n                    notifSubTitle: \"Medication has been updated successfully\",\n                    variant: \"success\",\n                  });\n\n                  refetch();\n                }}\n                onDeleteSuccess={() => {\n                  bottomSheetDispatch({ type: \"hide\" });\n\n                  notifDispatch({\n                    type: \"show\",\n                    notifTitle: \"Success\",\n                    notifSubTitle: \"Medication has been deleted successfully\",\n                    variant: \"success\",\n                  });\n\n                  refetch();\n                }}\n                onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                values={item}\n                pharmacyIdValue={null}\n              />\n            ),\n          });\n        }}\n        onPrint={() => {}}\n      />\n    </div>\n  );\n};\n\nconst ALLERGIES = gql`\n  query Allergies($page: PaginationInput!, $filter: AllergyFilter) {\n    allergies(page: $page, filter: $filter) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          title\n          issueSeverity\n          issueReaction\n          issueOutcome\n          issueOccurrence\n        }\n      }\n    }\n  }\n`;\n\nconst UPDATE_ALLERGY = gql`\n  mutation UpdateAllergy($input: AllergyUpdateInput!) {\n    updateAllergy(input: $input) {\n      id\n    }\n  }\n`;\n\nconst Allergies: React.FC<{ patientHistoryId: string | undefined }> = ({\n  patientHistoryId,\n}) => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  const { data, refetch } = useQuery<Query, QueryAllergiesArgs>(ALLERGIES, {\n    variables: {\n      page: { page: 0, size: 20 },\n      filter: { patientHistoryId },\n    },\n  });\n\n  return (\n    <div className=\"flex-1 bg-gray-50 rounded shadow-lg p-5\">\n      <p className=\"text-2xl text--600 font-bold\">Allergies</p>\n\n      <hr className=\"mt-4 mb-4\" />\n\n      <div className=\"flex justify-end\">\n        <button\n          disabled={patientChartLocked[0]}\n          onClick={() =>\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 0,\n              children: (\n                <AddAllergyForm\n                  patientHistoryId={patientHistoryId}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Medication has been saved successfully\",\n                      variant: \"success\",\n                    });\n                    refetch();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                />\n              ),\n            })\n          }\n          className=\"border border-teal-600 text-teal-800 px-3 py-1 rounded-lg flex space-x-1 items-center\"\n        >\n          <div className=\"material-icons\">add</div>\n          <p>Add</p>\n        </button>\n      </div>\n\n      <AllergyTable\n        items={data?.allergies.edges}\n        onEdit={(item: Allergy) => {\n          bottomSheetDispatch({\n            type: \"show\",\n            snapPoint: 0,\n            children: (\n              <UpdateAllergyForm\n                onUpdateSuccess={() => {\n                  bottomSheetDispatch({ type: \"hide\" });\n\n                  notifDispatch({\n                    type: \"show\",\n                    notifTitle: \"Success\",\n                    notifSubTitle: \"Allergy has been updated successfully\",\n                    variant: \"success\",\n                  });\n\n                  refetch();\n                }}\n                onDeleteSuccess={() => {\n                  bottomSheetDispatch({ type: \"hide\" });\n\n                  notifDispatch({\n                    type: \"show\",\n                    notifTitle: \"Success\",\n                    notifSubTitle: \"Allergy has been deleted successfully\",\n                    variant: \"success\",\n                  });\n\n                  refetch();\n                }}\n                onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                values={item}\n              />\n            ),\n          });\n        }}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/LabPage.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddAmendmentForm.tsx",["1044"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { AmendmentInput, MutationCreateAmendmentArgs } from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\n\nconst CREATE_AMENDMENT = gql`\n  mutation CreateAmendment($input: AmendmentInput!) {\n    createAmendment(input: $input) {\n      id\n    }\n  }\n`;\n\ninterface Props {\n  patientChartId: string | undefined;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport const AddAmendmentForm: React.FC<Props> = ({\n  patientChartId,\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n\n  const { register, handleSubmit } = useForm<AmendmentInput>();\n\n  const [createAmendment, { error }] = useMutation<\n    any,\n    MutationCreateAmendmentArgs\n  >(CREATE_AMENDMENT, {\n    onCompleted(data) {\n      onSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AmendmentInput) => {\n    if (patientChartId) {\n      data.patientChartId = patientChartId;\n      createAmendment({ variables: { input: data } });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider text-teal-800\">\n            Add amendment\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"note\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Note\n            </label>\n            <textarea\n              name=\"note\"\n              ref={register}\n              rows={4}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-teal-700 hover:bg-teal-800 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OcularMotilityComponent.tsx",["1045","1046","1047"],"import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { AUTO_SAVE_INTERVAL } from \"..\";\nimport IndexedDb from \"../_db\";\nimport { OcularMotility, OcularMotilityInput } from \"../models/models\";\nimport AutocompleteInput from \"./AutocompleteInput\";\n\nimport \"./OcularMotilityComponent.css\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\ninterface Props {\n  patientChartId: string | undefined;\n  values: OcularMotility | undefined;\n}\n\nconst ocularValues = [-4, -3, -2, -1, 0, 1, 2, 3, 4];\n\nexport const OcularMotilityComponent: React.FC<Props> = ({\n  values,\n  patientChartId,\n}) => {\n  const { register, reset, watch, control, setValue } =\n    useForm<OcularMotilityInput>({\n      defaultValues: {\n        patientChartId: patientChartId,\n      },\n    });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    if (values !== undefined) {\n      reset({\n        rightOcularMotility: values.rightOcularMotility,\n        leftOcularMotility: values.leftOcularMotility,\n        rsr: values.rsr,\n        rio: values.rio,\n        rlr: values.rlr,\n        rmr: values.rmr,\n        rir: values.rir,\n        rso: values.rso,\n        rightFlick: values.rightFlick,\n        lsr: values.lsr,\n        lio: values.lio,\n        llr: values.llr,\n        lmr: values.lmr,\n        lir: values.lir,\n        lso: values.lso,\n        leftFlick: values.leftFlick,\n        distance: values.distance,\n        near: values.near,\n        note: values.note,\n      });\n    }\n  }, [values]);\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChartId) {\n      const runIndexDb = async () => {\n        const ocularMotility: any = {\n          ...data,\n          patientChartId: patientChartId.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(ocularMotility, \"ocular_motility\", patientChartId)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChartId]);\n\n  return (\n    <div className=\"grid grid-cols-5 gap-y-7 gap-x-6 justify-items-stretch\">\n      <div className=\"col-span-1\"></div>\n      <div className=\"col-span-2 justify-self-stretch\">\n        <div className=\"grid grid-cols-6 gap-2 justify-items-center\">\n          <div className=\"col-span-2 justify-self-end\">\n            <select\n              name=\"rsr\"\n              ref={register}\n              placeholder=\"rsr\"\n              disabled={patientChartLocked[0]}\n              className=\"bg-gray-50 focus:outline-none border-none text-xs text-gray-500\"\n            >\n              <option value=\"\">RSR</option>\n              {ocularValues.map((e) => (\n                <option key={e + \"rsr\"} value={e + \"\"}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"col-span-2\"></div>\n          <div className=\"col-span-2 justify-self-start\">\n            <select\n              name=\"rio\"\n              ref={register}\n              placeholder=\"rio\"\n              disabled={patientChartLocked[0]}\n              className=\"bg-gray-50 focus:outline-none border-none text-xs text-gray-500\"\n            >\n              <option value=\"\">RIO</option>\n              {ocularValues.map((e) => (\n                <option key={e + \"rio\"} value={e + \"\"}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"col-span-1\"></div>\n          <div className=\"col-span-4\">\n            <div className=\"top-half-circle\" />\n          </div>\n          <div className=\"col-span-1\"></div>\n\n          <div className=\"col-span-2 justify-self-end\">\n            <select\n              name=\"rlr\"\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"bg-gray-50 focus:outline-none border-none text-xs text-gray-500\"\n            >\n              <option value=\"\">RLR</option>\n              {ocularValues.map((e) => (\n                <option key={e + \"rlr\"} value={e + \"\"}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"col-span-2\"></div>\n          <div className=\"col-span-2 justify-self-start\">\n            <select\n              name=\"rmr\"\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"bg-gray-50 focus:outline-none border-none text-xs text-gray-500\"\n            >\n              <option value=\"\">RMR</option>\n              {ocularValues.map((e) => (\n                <option key={e + \"rmr\"} value={e + \"\"}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"col-span-1\"></div>\n          <div className=\"col-span-4\">\n            <div className=\"bottom-half-circle\" />\n          </div>\n          <div className=\"col-span-1\"></div>\n\n          <div className=\"col-span-2 justify-self-end\">\n            <select\n              name=\"rir\"\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"bg-gray-50 focus:outline-none border-none text-xs text-gray-500\"\n            >\n              <option value=\"\">RIR</option>\n              {ocularValues.map((e) => (\n                <option key={e + \"rir\"} value={e + \"\"}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"col-span-2\"></div>\n          <div className=\"col-span-2 justify-self-start\">\n            <select\n              name=\"rso\"\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"bg-gray-50 focus:outline-none border-none text-xs text-gray-500\"\n            >\n              <option value=\"\">RSO</option>\n              {ocularValues.map((e) => (\n                <option key={e + \"rso\"} value={e + \"\"}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-span-2 justify-self-stretch\">\n        <div className=\"grid grid-cols-6 gap-2 justify-items-center\">\n          <div className=\"col-span-2 justify-self-end\">\n            <select\n              name=\"lio\"\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"bg-gray-50 focus:outline-none border-none text-xs text-gray-500\"\n            >\n              <option value=\"\">LIO</option>\n              {ocularValues.map((e) => (\n                <option key={e + \"lio\"} value={e + \"\"}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"col-span-2\"></div>\n          <div className=\"col-span-2 justify-self-start\">\n            <select\n              name=\"lsr\"\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"bg-gray-50 focus:outline-none border-none text-xs text-gray-500\"\n            >\n              <option value=\"\">LSR</option>\n              {ocularValues.map((e) => (\n                <option key={e + \"lsr\"} value={e + \"\"}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"col-span-1\"></div>\n          <div className=\"col-span-4\">\n            <div className=\"top-half-circle\" />\n          </div>\n          <div className=\"col-span-1\"></div>\n\n          <div className=\"col-span-2 justify-self-end\">\n            <select\n              name=\"lmr\"\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"bg-gray-50 focus:outline-none border-none text-xs text-gray-500\"\n            >\n              <option value=\"\">LMR</option>\n              {ocularValues.map((e) => (\n                <option key={e + \"lmr\"} value={e + \"\"}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"col-span-2\"></div>\n          <div className=\"col-span-2 justify-self-start\">\n            <select\n              name=\"llr\"\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"bg-gray-50 focus:outline-none border-none text-xs text-gray-500\"\n            >\n              <option value=\"\">LLR</option>\n              {ocularValues.map((e) => (\n                <option key={e + \"llr\"} value={e + \"\"}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"col-span-1\"></div>\n          <div className=\"col-span-4\">\n            <div className=\"bottom-half-circle\" />\n          </div>\n          <div className=\"col-span-1\"></div>\n\n          <div className=\"col-span-2 justify-self-end\">\n            <select\n              name=\"lso\"\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"bg-gray-50 focus:outline-none border-none text-xs text-gray-500\"\n            >\n              <option value=\"\">LSO</option>\n              {ocularValues.map((e) => (\n                <option key={e + \"lso\"} value={e + \"\"}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"col-span-2\"></div>\n          <div className=\"col-span-2 justify-self-start\">\n            <select\n              name=\"lir\"\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"bg-gray-50 focus:outline-none border-none text-xs text-gray-500\"\n            >\n              <option value=\"\">LIR</option>\n              {ocularValues.map((e) => (\n                <option key={e + \"lir\"} value={e + \"\"}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-500 tracking-wide\">Distance</p>\n      </div>\n      <div className=\"col-span-4\">\n        <input\n          type=\"text\"\n          name=\"distance\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-500 tracking-wide\">Near</p>\n      </div>\n      <div className=\"col-span-4\">\n        <input\n          type=\"text\"\n          name=\"near\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-500 tracking-wide\">Ocular Motility</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightOcularMotility\"\n          uri=\"right_ocular_motility\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftOcularMotility\"\n          uri=\"left_ocular_motility\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-500 tracking-wide\">Note</p>\n      </div>\n      <div className=\"col-span-4\">\n        <textarea\n          name=\"note\"\n          ref={register}\n          rows={3}\n          disabled={patientChartLocked[0]}\n          className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n        />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AllergyTable.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SaveFamilyIllnessForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SavePastIllnessForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/RoomsAdminTable.tsx",["1048","1049"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { Query, PaginationInput, QueryRoomsArgs, Maybe, RoomEdge, RoomInput, MutationSaveRoomArgs, Room, MutationUpdateRoomArgs, MutationDeleteRoomArgs } from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { TablePagination } from \"./table_pagination\";\n\nconst ROOMS = gql`\n  query Rooms($page: PaginationInput!) {\n    rooms(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 5;\n\nexport const RoomsTable: React.FC = () => {\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const { data, refetch } = useQuery<Query, QueryRoomsArgs>(ROOMS, {\n    variables: { page: paginationInput },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.rooms.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"flex flex-col\">\n        <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n            <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead>\n                  <tr>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 bg-gray-700 text-left text-sm font-medium text-gray-50 uppercase tracking-wider\"\n                    >\n                      Rooms\n                    </th>\n\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                    >\n                      <button\n                        onClick={() =>\n                          bottomSheetDispatch({\n                            type: \"show\",\n                            snapPoint: 500,\n                            children: (\n                              <AddRoomForm\n                                onSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Room has been saved successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onCancel={() =>\n                                  bottomSheetDispatch({ type: \"hide\" })\n                                }\n                              />\n                            ),\n                          })\n                        }\n                        className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                      >\n                        <div className=\"flex items-center\">\n                          <div>\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 20 20\"\n                              fill=\"currentColor\"\n                              className=\"h-6 w-6\"\n                            >\n                              <path\n                                fillRule=\"evenodd\"\n                                d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                                clipRule=\"evenodd\"\n                              />\n                            </svg>\n                          </div>\n                          <div className=\"font-semibold\">Add</div>\n                        </div>\n                      </button>\n                    </th>\n                  </tr>\n                  <tr>\n                    <th colSpan={2}>\n                      <input\n                        type=\"text\"\n                        name=\"search\"\n                        id=\"rooms-search\"\n                        placeholder=\"Search\"\n                        className=\"p-1 pl-4 block w-full sm:text-md border-gray-300\"\n                      />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {data?.rooms.edges.map((value: Maybe<RoomEdge>) => (\n                    <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {value?.node.title}\n                      </td>\n\n                      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                        <button\n                          className=\"text-indigo-600 hover:text-indigo-900\"\n                          onClick={() => {\n                            bottomSheetDispatch({\n                              type: \"show\",\n                              snapPoint: 500,\n                              children: (\n                                <UpdateRoomForm\n                                  onUpdateSuccess={() => {\n                                    bottomSheetDispatch({ type: \"hide\" });\n\n                                    notifDispatch({\n                                      type: \"show\",\n                                      notifTitle: \"Success\",\n                                      notifSubTitle:\n                                        \"Room has been updated successfully\",\n                                      variant: \"success\",\n                                    });\n\n                                    refetch();\n                                  }}\n                                  onDeleteSuccess={() => {\n                                    bottomSheetDispatch({ type: \"hide\" });\n\n                                    notifDispatch({\n                                      type: \"show\",\n                                      notifTitle: \"Success\",\n                                      notifSubTitle:\n                                        \"Room has been deleted successfully\",\n                                      variant: \"success\",\n                                    });\n\n                                    refetch();\n                                  }}\n                                  onCancel={() =>\n                                    bottomSheetDispatch({ type: \"hide\" })\n                                  }\n                                  values={value?.node}\n                                />\n                              ),\n                            });\n                          }}\n                        >\n                          Edit\n                        </button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              <TablePagination\n                totalCount={data?.rooms.totalCount ?? 0}\n                onNext={handleNextClick}\n                onPrevious={handlePreviousClick}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SAVE_ROOM = gql`\n  mutation SaveRoom($input: RoomInput!) {\n    saveRoom(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\ninterface AddRoomProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst AddRoomForm: React.FC<AddRoomProps> = ({ onSuccess, onCancel }) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<RoomInput>();\n  const [save, { error }] = useMutation<any, MutationSaveRoomArgs>(\n    SAVE_ROOM,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSubmit = (data: RoomInput) => {\n    save({ variables: { input: data } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">Add room</p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst UPDATE_ROOM = gql`\n  mutation UpdateRoom($input: RoomInput!, $id: ID!) {\n    updateRoom(input: $input, id: $id) {\n      id\n    }\n  }\n`;\n\nconst DELETE_ROOM = gql`\n  mutation DeleteRoom($id: ID!) {\n    deleteRoom(id: $id)\n  }\n`;\n\ninterface UpdateRoomProps {\n  values: Room | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst UpdateRoomForm: React.FC<UpdateRoomProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit, setValue } = useForm<RoomInput>();\n  const [save, { error }] = useMutation<any, MutationUpdateRoomArgs>(\n    UPDATE_ROOM,\n    {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n  const [deleteRoom] = useMutation<any, MutationDeleteRoomArgs>(DELETE_ROOM, {\n    onCompleted(data) {\n      onDeleteSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    setValue(\"title\", values?.title ?? \"\");\n  }, [values]);\n\n  const onUpdateSubmit = (data: RoomInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    save({ variables: { id: id, input: data } });\n  };\n\n  const onDeleteSubmit = (data: RoomInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    deleteRoom({ variables: { id: id } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">Update room</p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AppointmentStatusAdminTable.tsx",["1050","1051"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport {\n  Query,\n  PaginationInput,\n  QueryAppointmentStatusesArgs,\n  Maybe,\n  AppointmentStatusEdge,\n  AppointmentStatusInput,\n  MutationSaveAppointmentStatusArgs,\n  AppointmentStatus,\n  MutationUpdateAppointmentStatusArgs,\n  MutationDeleteAppointmentStatusArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { TablePagination } from \"./table_pagination\";\n\nconst APPOINTMENT_STATUSES = gql`\n  query AppointmentStatuses($page: PaginationInput!) {\n    appointmentStatuses(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 5;\n\nexport const AppointmentStatusTable: React.FC = () => {\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const { data, refetch } = useQuery<Query, QueryAppointmentStatusesArgs>(\n    APPOINTMENT_STATUSES,\n    {\n      variables: { page: paginationInput },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.appointmentStatuses.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"flex flex-col\">\n        <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n            <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead>\n                  <tr>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 bg-gray-700 text-left text-sm font-medium text-gray-50 uppercase tracking-wider\"\n                    >\n                      Appointment Status\n                    </th>\n\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                    >\n                      <button\n                        onClick={() =>\n                          bottomSheetDispatch({\n                            type: \"show\",\n                            snapPoint: 500,\n                            children: (\n                              <SaveAppointmentStatusForm\n                                onSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Appointment status has been saved successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onCancel={() =>\n                                  bottomSheetDispatch({ type: \"hide\" })\n                                }\n                              />\n                            ),\n                          })\n                        }\n                        className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                      >\n                        <div className=\"flex items-center\">\n                          <div>\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 20 20\"\n                              fill=\"currentColor\"\n                              className=\"h-6 w-6\"\n                            >\n                              <path\n                                fillRule=\"evenodd\"\n                                d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                                clipRule=\"evenodd\"\n                              />\n                            </svg>\n                          </div>\n                          <div className=\"font-semibold\">Add</div>\n                        </div>\n                      </button>\n                    </th>\n                  </tr>\n                  <tr>\n                    <th colSpan={2}>\n                      <input\n                        type=\"text\"\n                        name=\"search\"\n                        id=\"queue-destination-search\"\n                        placeholder=\"Search\"\n                        className=\"p-1 pl-4 block w-full sm:text-md border-gray-300\"\n                      />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {data?.appointmentStatuses.edges.map(\n                    (value: Maybe<AppointmentStatusEdge>) => (\n                      <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {value?.node.title}\n                        </td>\n\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <button\n                            className=\"text-indigo-600 hover:text-indigo-900\"\n                            onClick={() => {\n                              bottomSheetDispatch({\n                                type: \"show\",\n                                snapPoint: 500,\n                                children: (\n                                  <UpdateAppointmentStatusForm\n                                    onUpdateSuccess={() => {\n                                      bottomSheetDispatch({ type: \"hide\" });\n\n                                      notifDispatch({\n                                        type: \"show\",\n                                        notifTitle: \"Success\",\n                                        notifSubTitle:\n                                          \"Queue destination has been updated successfully\",\n                                        variant: \"success\",\n                                      });\n\n                                      refetch();\n                                    }}\n                                    onDeleteSuccess={() => {\n                                      bottomSheetDispatch({ type: \"hide\" });\n\n                                      notifDispatch({\n                                        type: \"show\",\n                                        notifTitle: \"Success\",\n                                        notifSubTitle:\n                                          \"Room has been deleted successfully\",\n                                        variant: \"success\",\n                                      });\n\n                                      refetch();\n                                    }}\n                                    onCancel={() =>\n                                      bottomSheetDispatch({ type: \"hide\" })\n                                    }\n                                    values={value?.node}\n                                  />\n                                ),\n                              });\n                            }}\n                          >\n                            Edit\n                          </button>\n                        </td>\n                      </tr>\n                    )\n                  )}\n                </tbody>\n              </table>\n              <TablePagination\n                totalCount={data?.appointmentStatuses.totalCount ?? 0}\n                onNext={handleNextClick}\n                onPrevious={handlePreviousClick}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SAVE_APPOINTMENT_STATUS = gql`\n  mutation SaveAppointmentStatus($input: AppointmentStatusInput!) {\n    saveAppointmentStatus(input: $input) {\n      id\n    }\n  }\n`;\n\ninterface SaveAppointmentStatusProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst SaveAppointmentStatusForm: React.FC<SaveAppointmentStatusProps> = ({\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<AppointmentStatusInput>();\n  const [save, { error }] = useMutation<any, MutationSaveAppointmentStatusArgs>(\n    SAVE_APPOINTMENT_STATUS,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSubmit = (data: AppointmentStatusInput) => {\n    save({ variables: { input: data } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Add Appointment Status\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst UPDATE_APPOINTMENT_STATUS = gql`\n  mutation UpdateAppointmentStatus($input: AppointmentStatusInput!, $id: ID!) {\n    updateAppointmentStatus(input: $input, id: $id) {\n      id\n    }\n  }\n`;\n\nconst DELETE_APPOINTMENT_STATUS = gql`\n  mutation DeleteAppointmentStatus($id: ID!) {\n    deleteAppointmentStatus(id: $id)\n  }\n`;\n\ninterface UpdateAppointmentStatusProps {\n  values: AppointmentStatus | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst UpdateAppointmentStatusForm: React.FC<UpdateAppointmentStatusProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit, setValue } =\n    useForm<AppointmentStatusInput>();\n  const [save, { error }] = useMutation<\n    any,\n    MutationUpdateAppointmentStatusArgs\n  >(UPDATE_APPOINTMENT_STATUS, {\n    onCompleted(data) {\n      onUpdateSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [deleteAppointmentStatus] = useMutation<\n    any,\n    MutationDeleteAppointmentStatusArgs\n  >(DELETE_APPOINTMENT_STATUS, {\n    onCompleted(data) {\n      onDeleteSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    setValue(\"title\", values?.title ?? \"\");\n  }, [values]);\n\n  const onUpdateSubmit = (data: AppointmentStatusInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    save({ variables: { id: id, input: data } });\n  };\n\n  const onDeleteSubmit = (data: AppointmentStatusInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    deleteAppointmentStatus({ variables: { id: id } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update Appointment Status\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChiefComplaintTypes.tsx",["1052","1053"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { TablePagination } from \"./table_pagination\";\nimport {\n  ChiefComplaintType,\n  MutationDeleteFavoriteChiefComplaintArgs,\n  MutationSaveFavoriteChiefComplaintArgs,\n  PaginationInput,\n  Query,\n  QueryChiefComplaintTypesArgs,\n} from \"../models/models\";\nimport {\n  BookmarkIcon as BookmarkSolidIcon,\n  StarIcon as StarSolidIcon,\n  ChevronRightIcon,\n} from \"@heroicons/react/solid\";\nimport {\n  BookmarkIcon as BookmarkOutlineIcon,\n  StarIcon as StarOutlineIcon,\n} from \"@heroicons/react/outline\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\nconst GET_DATA = gql`\n  query GetData(\n    $page: PaginationInput!\n    $searchTerm: String!\n    $favorites: Boolean\n  ) {\n    chiefComplaintTypes(\n      page: $page\n      searchTerm: $searchTerm\n      favorites: $favorites\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n    favoriteChiefComplaints {\n      id\n      chiefComplaintTypeId\n    }\n  }\n`;\n\nconst SAVE_FAVORITE_CHIEF_COMPLAINT_TYPE = gql`\n  mutation SaveFavoriteChiefComplaintType($chiefComplaintTypeId: ID!) {\n    saveFavoriteChiefComplaint(chiefComplaintTypeId: $chiefComplaintTypeId) {\n      id\n    }\n  }\n`;\n\nconst DELETE_FAVORITE_CHIEF_COMPLAINT_TYPE = gql`\n  mutation DeleteFavoriteChiefComplaintType($id: ID!) {\n    deleteFavoriteChiefComplaint(id: $id)\n  }\n`;\n\nexport const ChiefComplaintTypes: React.FC<{\n  onItemClick: (title: string) => void;\n}> = ({ onItemClick }) => {\n  const notifDispatch = useNotificationDispatch();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const [showFavorites, setShowFavorites] = useState<boolean>(true);\n\n  const { data, refetch } = useQuery<Query, QueryChiefComplaintTypesArgs>(\n    GET_DATA,\n    {\n      variables: {\n        page: paginationInput,\n        searchTerm: searchTerm,\n        favorites: showFavorites,\n      },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [showFavorites]);\n\n  const [favoriteIds, setFavoriteIds] = useState<Array<any>>([]);\n\n  useEffect(() => {\n    if (data) {\n      const ids =\n        data.favoriteChiefComplaints.map((e) => e?.chiefComplaintTypeId) ?? [];\n\n      setFavoriteIds(ids);\n    }\n  }, [data]);\n\n  const [saveFavoriteChiefComplaint] = useMutation<\n    any,\n    MutationSaveFavoriteChiefComplaintArgs\n  >(SAVE_FAVORITE_CHIEF_COMPLAINT_TYPE, {\n    onCompleted(data) {\n      refetch();\n    },\n    update: (cache, mutationResult) => {\n      const chiefComplaintType = mutationResult.data.saveFavoriteChiefComplaint;\n\n      const data = cache.readQuery<Query>({\n        query: GET_DATA,\n      });\n\n      if (data !== null) {\n        cache.writeQuery({\n          query: GET_DATA,\n          data: {\n            favoriteChiefComplaints: [\n              ...data.favoriteChiefComplaints,\n              chiefComplaintType,\n            ],\n          },\n        });\n      }\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [deleteFavoriteChiefComplaint] = useMutation<\n    any,\n    MutationDeleteFavoriteChiefComplaintArgs\n  >(DELETE_FAVORITE_CHIEF_COMPLAINT_TYPE, {\n    onCompleted(data) {\n      refetch();\n    },\n    update: (cache, mutationResult) => {\n      const favoriteChiefComplaintTypeId =\n        mutationResult.data.deleteFavoriteChiefComplaint;\n\n      const data = cache.readQuery<Query>({\n        query: GET_DATA,\n      });\n\n      if (data !== null) {\n        const favoriteChiefComplaints = data.favoriteChiefComplaints.filter(\n          (e) => e?.id !== favoriteChiefComplaintTypeId\n        );\n\n        cache.writeQuery({\n          query: GET_DATA,\n          data: {\n            favoriteChiefComplaints: favoriteChiefComplaints,\n          },\n        });\n      }\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput, searchTerm]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.chiefComplaintTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleItemClick = (title: string | undefined) => {\n    if (title !== undefined) {\n      onItemClick(title);\n    }\n  };\n\n  const handleFavoriteClick = (item: ChiefComplaintType | undefined) => {\n    if (item) {\n      if (favoriteIds.includes(item.id)) {\n        const favoriteChiefComplaintId = data?.favoriteChiefComplaints.find(\n          (e) => e?.chiefComplaintTypeId === item.id\n        )?.id;\n\n        if (favoriteChiefComplaintId)\n          deleteFavoriteChiefComplaint({\n            variables: { id: favoriteChiefComplaintId },\n          });\n      } else {\n        saveFavoriteChiefComplaint({\n          variables: { chiefComplaintTypeId: item.id },\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"overflow-hidden rounded-lg shadow-xl\">\n      <table className=\"w-full\">\n        <thead>\n          <tr>\n            <th\n              scope=\"col\"\n              colSpan={3}\n              className=\"px-4 py-2 bg-teal-700 text-left text-xs text-gray-50 uppercase tracking-wider\"\n            >\n              <div className=\"flex justify-between items-center\">\n                <p>Chief complaint list</p>\n                <div>\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowFavorites(!showFavorites)}\n                  >\n                    {showFavorites ? (\n                      <BookmarkSolidIcon className=\"h-5 w-5 text-white\" />\n                    ) : (\n                      <BookmarkOutlineIcon className=\"h-5 w-5 text-white\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n            </th>\n          </tr>\n          <tr>\n            <th colSpan={3}>\n              <input\n                type=\"search\"\n                name=\"search\"\n                placeholder=\"Search\"\n                className=\"w-full sm:text-md border-none\"\n                onChange={(evt) => setSearchTerm(evt.target.value.trim())}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200 p-1\">\n          {data?.chiefComplaintTypes.edges.map((e) => (\n            <tr key={e?.node.id} className=\"hover:bg-gray-100 border-t\">\n              <td className=\"pl-4 pt-1\">\n                <button\n                  type=\"button\"\n                  disabled={patientChartLocked[0]}\n                  onClick={() => handleFavoriteClick(e?.node)}\n                >\n                  {favoriteIds.includes(e?.node.id) ? (\n                    <StarSolidIcon className=\"h-5 w-5 text-teal-500\" />\n                  ) : (\n                    <StarOutlineIcon className=\"h-5 w-5 text-gray-500\" />\n                  )}\n                </button>\n              </td>\n              <td className=\"px-6 py-5 whitespace-nowrap text-sm text-gray-900\">\n                {e?.node.title}\n              </td>\n              <td\n                className=\"p-2 cursor-pointer\"\n                onClick={() =>\n                  !patientChartLocked[0] && handleItemClick(e?.node.title)\n                }\n              >\n                <ChevronRightIcon className=\"h-6 w-6 text-gray-500\" />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <TablePagination\n        totalCount={data?.chiefComplaintTypes.totalCount ?? 0}\n        onNext={handleNextClick}\n        onPrevious={handlePreviousClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/index.tsx",["1054"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {\n  ApolloClient,\n  NormalizedCacheObject,\n  ApolloProvider,\n  gql,\n  ApolloLink,\n} from \"@apollo/client\";\nimport { cache } from \"./cache\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport { NotificationProvider } from \"./notification\";\nimport { BottomSheetProvider } from \"./bottomsheet\";\nimport { HashRouter, Router } from \"react-router-dom\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nimport history from \"./history\";\n\nimport \"material-icons-font/material-icons-font.css\";\n\nexport const AUTO_SAVE_INTERVAL = 1000;\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = sessionStorage.getItem(\"accessToken\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\n/*const httpLink = createHttpLink({\n  uri: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/query`,\n});*/\n\nconst terminatingLink = createUploadLink({\n  uri: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/query`,\n});\n\nexport const typeDefs = gql`\n  extend type Query {\n    isLoggedIn: Boolean!\n  }\n`;\n\nexport const client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link: authLink.concat(terminatingLink as unknown as ApolloLink),\n  typeDefs,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <NotificationProvider>\n        <BottomSheetProvider>\n          <Router history={history}>\n            <App />\n          </Router>\n        </BottomSheetProvider>\n      </NotificationProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/bottomsheet.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/serviceWorkerRegistration.ts",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/HomePage.tsx",["1055"],"import React, { useState, useEffect } from \"react\";\nimport { Page } from \"../models/page\";\nimport { MainLayout } from \"../layouts/main_layout\";\nimport { HomeTabs } from \"../components/home_tabs\";\n\nimport { useBottomSheetDispatch, useBottonSheetState } from \"../bottomsheet\";\n\nimport Sheet from \"react-modal-sheet\";\n\nimport {\n  matchPath,\n  Route,\n  Switch,\n  useHistory,\n  useLocation,\n} from \"react-router-dom\";\n\nimport { HomePages } from \"../pages\";\nimport { NewPatient } from \"./NewPatientPage\";\nimport { DiagnosticOrdersPage } from \"./DiagnosticOrdersPage\";\nimport { PatientPage } from \"./Patient\";\nimport { ClinicianHome } from \"./ClinicianHome\";\nimport { parseJwt } from \"../util\";\nimport { AppointmentPage } from \"./Appointment\";\nimport { SurgicalOrdersPage } from \"./SurgicalOrdersPage\";\nimport { TreatmentOrdersPage } from \"./TreatmentOrdersPage\";\nimport { LabOrdersPage } from \"./LabOrdersPage\";\nimport { ChatsPage } from \"./ChatsPage\";\nimport { ReceptionHome } from \"./ReceptionHome\";\nimport { AdminHome } from \"./Admin\";\nimport { UpdatePatientPage } from \"./UpdatePatientPage\";\nimport { Component404 } from \"../components/404/404\";\nimport { ReferralOrdersPage } from \"./ReferralOrders\";\nimport ProfilePage from \"./ProfilePage\";\nimport { FollowupOrdersPage } from \"./FolloupOrdersPage\";\nimport { PharmacyHome } from \"./PharmacyHome\";\nimport { EyeShopHome } from \"./EyeShopeHome\";\n\nexport const HomePage: React.FC = () => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const [pages, setPages] = useState<Array<Page>>([HomePages[0]]);\n  const [activeTab, setActiveTab] = useState<string>(\"/\");\n  const [userType, setUserType] = useState<\n    \"Receptionist\" | \"Clinician\" | \"Pharmacist\" | \"Optical Assistant\"\n  >();\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const { showBottomSheet, snapPoint, BottomSheetChildren } =\n    useBottonSheetState();\n\n  const handlePageSelect = (route: string) => {\n    const existingPage = pages.find((e) => e.route === route);\n    let page = HomePages.find(\n      (e) =>\n        matchPath(route.charAt(0) === \"/\" ? route : `/${route}`, {\n          path: e.route,\n        })?.isExact ?? false\n    );\n\n    if (existingPage === undefined && page !== undefined) {\n      const newPages = pages.concat(page);\n      setPages(newPages);\n    } else {\n      if (page !== undefined) setActiveTab(page.route);\n    }\n  };\n\n  const handlePageAdd = (page: Page) => {\n    const existingPage = pages.find((e) => e.route === page.route);\n\n    if (existingPage === undefined) {\n      const newPages = pages.concat(page);\n      setPages(newPages);\n    } else {\n      setActiveTab(page.route);\n    }\n  };\n\n  const handleTabOpen = (route: string) => {\n    setActiveTab(route);\n    history.replace(route);\n  };\n\n  const handleTabClose = (route: string) => {\n    const newPages = pages.filter((e) => e.route !== route);\n\n    const lastIdx = newPages.length - 1;\n    const lastRoute = newPages[lastIdx].route;\n\n    setActiveTab(lastRoute);\n    history.replace(lastRoute);\n\n    setPages(newPages);\n  };\n\n  useEffect(() => {\n    const routePage = HomePages.find((e) => {\n      return (\n        matchPath(\n          location.pathname.charAt(0) === \"/\"\n            ? location.pathname\n            : `/${location.pathname}`,\n          {\n            path: e.match,\n            exact: true,\n          }\n        ) ?? false\n      );\n    });\n\n    if (routePage !== undefined) {\n      handlePageSelect(routePage.route);\n      setActiveTab(routePage.route);\n    }\n  }, []);\n\n  useEffect(() => {\n    const token = sessionStorage.getItem(\"accessToken\");\n\n    if (token !== null) {\n      const claim = parseJwt(token);\n      if (claim.UserType.includes(\"Receptionist\")) {\n        setUserType(\"Receptionist\");\n      } else if (\n        claim.UserType.includes(\"Physician\") ||\n        claim.UserType.includes(\"Nurse\")\n      ) {\n        setUserType(\"Clinician\");\n      } else if (claim.UserType.includes(\"Pharmacist\")) {\n        setUserType(\"Pharmacist\");\n      } else if (claim.UserType.includes(\"Optical Assistant\")) {\n        setUserType(\"Optical Assistant\");\n      }\n    }\n  }, []);\n\n  // Go to last page after change\n  useEffect(() => {\n    const lastIdx = pages.length - 1;\n    const lastRoute = pages[lastIdx].route;\n\n    setActiveTab(lastRoute);\n  }, [pages]);\n\n  const handleTabUpdate = (page: any) => {\n    const exists = pages.find((e) => e.title === page.title);\n    if (exists) return;\n\n    const idx = pages.findIndex((e) => {\n      return (\n        matchPath(page.route, {\n          path: e.match,\n          exact: true,\n        }) ?? false\n      );\n    });\n\n    if (idx) {\n      setPages([\n        ...pages.slice(0, idx),\n        {\n          ...pages[idx],\n          title: page.title,\n          icon: page.icon,\n          route: page.route,\n        },\n        ...pages.slice(idx + 1),\n      ]);\n    }\n  };\n\n  return (\n    <div>\n      <MainLayout\n        onPageSelect={(route: string) => handlePageSelect(route)}\n        onAddPage={(page: Page) => handlePageAdd(page)}\n      >\n        <div>\n          <HomeTabs\n            pages={pages}\n            activeTab={activeTab}\n            onTabOpen={(route: string) => handleTabOpen(route)}\n            onClose={(route: string) => handleTabClose(route)}\n          />\n\n          <div className=\"relative flex flex-col min-w-0 break-words w-full mb-6\">\n            <div className=\"px-2 py-5 flex-auto\">\n              <div className=\"tab-content tab-space\">\n                <Switch>\n                  <Route exact path=\"/\">\n                    {userType === \"Receptionist\" && (\n                      <ReceptionHome\n                        onAddPage={(page: Page) => handlePageAdd(page)}\n                      />\n                    )}\n\n                    {userType === \"Clinician\" && (\n                      <ClinicianHome\n                        onAddPage={(page: Page) => handlePageAdd(page)}\n                      />\n                    )}\n\n                    {userType === \"Pharmacist\" && <PharmacyHome />}\n                    {userType === \"Optical Assistant\" && <EyeShopHome />}\n                  </Route>\n                  <Route exact path=\"/profile/:profileId\">\n                    <ProfilePage />\n                  </Route>\n                  <Route exact path=\"/new-patient\">\n                    <NewPatient\n                      onAddPage={(page: Page) => handlePageAdd(page)}\n                    />\n                  </Route>\n                  <Route exact path=\"/update-patient\">\n                    <UpdatePatientPage\n                      onAddPage={(page: Page) => handlePageAdd(page)}\n                    />\n                  </Route>\n                  <Route path=\"/patients\">\n                    <PatientPage\n                      onAddPage={handlePageAdd}\n                      onUpdateTab={handleTabUpdate}\n                    />\n                  </Route>\n                  <Route path=\"/appointments\">\n                    <AppointmentPage\n                      onUpdateTab={handleTabUpdate}\n                      onAddPage={(page: Page) => handlePageAdd(page)}\n                    />\n                  </Route>\n                  <Route path=\"/chats\">\n                    <ChatsPage />\n                  </Route>\n                  <Route exact path=\"/lab-orders\">\n                    <LabOrdersPage />\n                  </Route>\n                  <Route exact path=\"/diagnostic-orders\">\n                    <DiagnosticOrdersPage />\n                  </Route>\n                  <Route exact path=\"/treatment-orders\">\n                    <TreatmentOrdersPage />\n                  </Route>\n                  <Route exact path=\"/surgical-orders\">\n                    <SurgicalOrdersPage />\n                  </Route>\n                  <Route exact path=\"/followup-orders\">\n                    <FollowupOrdersPage />\n                  </Route>\n                  <Route exact path=\"/referrals\">\n                    <ReferralOrdersPage />\n                  </Route>\n                  <Route path=\"/admin\">\n                    <AdminHome />\n                  </Route>\n                  <Route>\n                    <Component404 />\n                  </Route>\n                </Switch>\n              </div>\n            </div>\n          </div>\n        </div>\n      </MainLayout>\n\n      {showBottomSheet && (\n        <Sheet\n          isOpen={showBottomSheet}\n          onClose={() => bottomSheetDispatch({ type: \"hide\" })}\n          snapPoints={[snapPoint]}\n        >\n          <Sheet.Container\n            onUnmount={() => {\n              bottomSheetDispatch({ type: \"hide\" });\n            }}\n          >\n            <Sheet.Header />\n            <Sheet.Content>{BottomSheetChildren}</Sheet.Content>\n          </Sheet.Container>\n\n          <Sheet.Backdrop />\n        </Sheet>\n      )}\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/NewPatientPage.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/home_tabs/index.tsx",["1056","1057","1058"],"import React from \"react\";\nimport { Page } from \"../../models/page\";\nimport \"./index.css\";\n\ninterface Props {\n  pages: Array<Page>;\n  activeTab: string;\n  onTabOpen: (route: string) => void;\n  onClose: (route: string) => void;\n}\n\nexport const HomeTabs: React.FC<Props> = ({\n  pages,\n  activeTab,\n  onTabOpen,\n  onClose,\n}) => {\n  const color = \"teal\";\n\n  return (\n    <React.Fragment>\n      <div className=\"flex flex-wrap\">\n        <div className=\"w-full\">\n          <ul\n            className=\"flex mb-0 list-none flex-wrap pb-4 flex-row\"\n            role=\"tablist\"\n          >\n            {pages.map((e) => (\n              <li\n                className=\"-mb-px ml-2 flex-initial text-center skewed-container shadow-2xl\"\n                key={e.route}\n              >\n                <div\n                  className={\n                    \"text-xs font-bold px-5 py-3 shadow-2xl rounded block leading-normal \" +\n                    (activeTab === e.route\n                      ? \"text-white bg-\" + color + \"-700\"\n                      : \"text-\" + \"gray\" + \"-600 bg-white\")\n                  }\n                  data-toggle=\"tab\"\n                  role=\"tablist\"\n                >\n                  <div className=\"flex justify-between items-center cursor-pointer\">\n                    <div\n                      className=\"pl-12 uppercase tracking-wide flex items-center\"\n                      onClick={() => {\n                        onTabOpen(e.route);\n                      }}\n                    >\n                      <div>{e.icon}</div>\n\n                      <div className=\"pl-1 ml-1\">{e.title}</div>\n                    </div>\n                    <div className=\"pl-12\">\n                      {e.cancellable && activeTab === e.route && (\n                        <a\n                          onClick={(evt) => {\n                            evt.preventDefault();\n                            onClose(e.route);\n                          }}\n                          className=\"items-center\"\n                        >\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 20 20\"\n                            className=\"h-4 w-4 fill-current\"\n                            stroke=\"currentColor\"\n                          >\n                            <path\n                              fillRule=\"evenodd\"\n                              d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n                              clipRule=\"evenodd\"\n                            />\n                          </svg>\n                        </a>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ProviderOrdersTable.tsx",["1059","1060","1061","1062"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport classnames from \"classnames\";\nimport { TablePagination } from \"./table_pagination\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport {\n  Maybe,\n  Order,\n  OrderEdge,\n  PaginationInput,\n  Query,\n  QueryProviderOrdersArgs,\n} from \"../models/models\";\nimport debounce from \"lodash-es/debounce\";\n\nconst GET_PROVIDER_ORDERS = gql`\n  query ProviderOrders($page: PaginationInput!, $searchTerm: String) {\n    providerOrders(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      edges {\n        node {\n          id\n          firstName\n          lastName\n          phoneNo\n          patientId\n          appointmentId\n          status\n          orderType\n          status\n          payments {\n            id\n            invoiceNo\n            status\n            billing {\n              id\n              item\n              code\n              price\n              credit\n            }\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\ninterface Props {\n  onOrderClick: (e: Order) => void;\n}\n\nexport const ProviderOrdersTable: React.FC<Props> = ({ onOrderClick }) => {\n  const [showSearch, setShowSearch] = useState<boolean>(false);\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 5,\n  });\n\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(\"\");\n\n  const orderQuery = useLazyQuery<Query, QueryProviderOrdersArgs>(\n    GET_PROVIDER_ORDERS,\n    {\n      variables: {\n        page: paginationInput,\n      },\n    }\n  );\n\n  useEffect(() => {\n    orderQuery[0]({\n      variables: {\n        page: paginationInput,\n      },\n    });\n  }, []);\n\n  useEffect(() => {\n    orderQuery[0]({\n      variables: {\n        page: paginationInput,\n        searchTerm:\n          debouncedSearchTerm.length > 0 ? debouncedSearchTerm : undefined,\n      },\n    });\n  }, [debouncedSearchTerm, paginationInput]);\n\n  const debouncer = useCallback(\n    debounce((_searchVal: string) => {\n      setDebouncedSearchTerm(_searchVal);\n    }, 1000),\n    []\n  );\n\n  const handleNextClick = () => {\n    const totalPages =\n      orderQuery[1].data?.providerOrders.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleOrderClick = (e: Maybe<OrderEdge>) => {\n    const isPendingPayments = e?.node.payments.some(\n      (p) => p.status === \"NOTPAID\"\n    );\n\n    if (!isPendingPayments && e) {\n      onOrderClick(e.node);\n    }\n  };\n\n  return (\n    <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg \">\n      <table className=\"min-w-full divide-y divide-gray-200\">\n        <thead>\n          <tr className=\"border-purple-700 border-l-4\">\n            <th\n              scope=\"col\"\n              colSpan={1}\n              className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              Your Orders\n            </th>\n            <th\n              scope=\"col\"\n              colSpan={2}\n              className=\"px-6 py-3 bg-gray-50 text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              <div className=\"flex justify-end\">\n                {showSearch && (\n                  <input\n                    autoFocus\n                    type=\"search\"\n                    placeholder=\"Search\"\n                    value={searchTerm}\n                    onChange={(evt) => {\n                      setSearchTerm(evt.target.value.trim());\n                      debouncer(evt.target.value.trim());\n                    }}\n                    onBlur={() => setShowSearch(false)}\n                    className=\"px-2 py-1 border border-gray-200 rounded-md shadow-inner\"\n                  />\n                )}\n\n                {!showSearch && (\n                  <button type=\"button\" onClick={() => setShowSearch(true)}>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                      className=\"h-5 w-5\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                      />\n                    </svg>\n                  </button>\n                )}\n              </div>\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200\">\n          {orderQuery[1].data?.providerOrders.edges.map((e) => {\n            const isPendingPayments = e?.node.payments.some(\n              (p) => p.status === \"NOTPAID\"\n            );\n\n            return (\n              <tr\n                key={e?.node.id}\n                className={classnames(\"hover:bg-gray-100 cursor-pointer\", {})}\n                onClick={() => handleOrderClick(e)}\n              >\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0 h-10 w-10\">\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                        className={classnames(\"h-10 w-10 text-gray-600\", {\n                          \"text-red-500\":\n                            e?.node.status === \"ORDERED\" && isPendingPayments,\n                          \"text-yellow-500\":\n                            e?.node.status === \"ORDERED\" && !isPendingPayments,\n                          \"text-green-500\": e?.node.status === \"COMPLETED\",\n                        })}\n                      >\n                        <path d=\"M8.707 7.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l2-2a1 1 0 00-1.414-1.414L11 7.586V3a1 1 0 10-2 0v4.586l-.293-.293z\" />\n                        <path d=\"M3 5a2 2 0 012-2h1a1 1 0 010 2H5v7h2l1 2h4l1-2h2V5h-1a1 1 0 110-2h1a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2V5z\" />\n                      </svg>\n                    </div>\n                    <div className=\"ml-4\">\n                      <div className=\"text-sm font-medium text-gray-900\">\n                        {`${e?.node.firstName} ${e?.node.lastName}`} (\n                        {e?.node.id})\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {e?.node.status === \"ORDERED\" && isPendingPayments && (\n                          <p>Pending Payments</p>\n                        )}\n                        {e?.node.status === \"ORDERED\" && !isPendingPayments && (\n                          <p>Pending Results</p>\n                        )}\n                        {e?.node.status === \"COMPLETED\" && <p>Completed</p>}\n                      </div>\n                    </div>\n                  </div>\n                </td>\n                <td\n                  colSpan={2}\n                  className=\"px-6 py-4 text-sm text-gray-700 font-semibold\"\n                >\n                  {e?.node.payments.map((e) => e.billing.item).join(\", \")}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <TablePagination\n        totalCount={orderQuery[1].data?.providerOrders.totalCount ?? 0}\n        onNext={handleNextClick}\n        onPrevious={handlePreviousClick}\n      />\n    </div>\n  );\n};\n\nconst statusText = (status: string | undefined) => {\n  if (status === \"PAID\") return \"Payment confirmed\";\n  if (status === \"NOTPAID\") return \"Not paid\";\n  if (status === \"COMPLETED\") return \"Order completed\";\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/EyeShopOrdersList.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/EyewearShopAdminPage.tsx",["1063"],"import React, { useEffect, useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport {\n  EyewearShopEdge,\n  Maybe,\n  Query,\n  QueryEyewearShopsArgs,\n} from \"../../models/models\";\nimport { AddEyewearShopForm } from \"../../components/AddEyewearShopForm\";\nimport { UpdateEyewearShopForm } from \"../../components/UpdateEyewearShopForm\";\n\nconst EYE_WEAR_SHOPS = gql`\n  query EyewearShops($page: PaginationInput!) {\n    eyewearShops(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          address\n          region\n          country\n          phone\n          inHouse\n          active\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nexport const EyewearShopAdminPage: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState({\n    page: 1,\n    size: 10,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryEyewearShopsArgs>(\n    EYE_WEAR_SHOPS,\n    {\n      variables: {\n        page: paginationInput,\n      },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.eyewearShops.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"overflow-x-auto\">\n        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  colSpan={4}\n                  className=\"px-6 py-3 bg-gray-700 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                >\n                  Eye Wear Shops\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                >\n                  <button \n                    onClick={() => {\n                      bottomSheetDispatch({\n                        type: \"show\",\n                        snapPoint: 0,\n                        children: (\n                          <AddEyewearShopForm\n                            onSuccess={() => {\n                              bottomSheetDispatch({ type: \"hide\" });\n                              notifDispatch({\n                                type: \"show\",\n                                notifTitle: \"Success\",\n                                notifSubTitle:\n                                  \"Eye Wear Shop has been added successfully\",\n                                variant: \"success\",\n                              });\n                              refetch();\n                            }}\n                            onCancel={() =>\n                              bottomSheetDispatch({ type: \"hide\" })\n                            }\n                          />\n                        ),\n                      });\n                    }}\n                    className=\"uppercase bg-gray-800 hover:bg-gray-600 py-1 px-2 rounded-md text-sm\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"h-6 w-6\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </div>\n                      <div className=\"font-semibold\">Add</div>\n                    </div>\n                  </button>\n                </th>\n              </tr>\n              <tr>\n                <th colSpan={5}>\n                  <input\n                    type=\"text\"\n                    name=\"search\"\n                    id=\"billings-search\"\n                    placeholder=\"Search\"\n                    className=\"p-3 pl-4 block w-full sm:text-md border-gray-300\"\n                  />\n                </th>\n              </tr>\n              <tr className=\"bg-gray-50\">\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Title\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Address\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Phone\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Type\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Active\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {data?.eyewearShops.edges.map((value: Maybe<EyewearShopEdge>) => (\n                <tr\n                  key={value?.node.id}\n                  className=\"border-b hover:bg-gray-100 cursor-pointer\"\n                  onClick={() => {\n                    bottomSheetDispatch({\n                      type: \"show\",\n                      snapPoint: 0,\n                      children: (\n                        <UpdateEyewearShopForm\n                          onUpdateSuccess={() => {\n                            bottomSheetDispatch({ type: \"hide\" });\n\n                            notifDispatch({\n                              type: \"show\",\n                              notifTitle: \"Success\",\n                              notifSubTitle:\n                                \"Eye wear shop has been updated successfully\",\n                              variant: \"success\",\n                            });\n\n                            refetch();\n                          }}\n                          onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                          values={value?.node}\n                        />\n                      ),\n                    });\n                  }}\n                >\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {value?.node.title}\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {value?.node.address}\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {value?.node.phone}\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\n                      {value?.node.inHouse ? \"In-House\" : \"External\"}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\n                      {value?.node.active ? \"Active\" : \"Inactive\"}\n                    </span>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <TablePagination\n            totalCount={data?.eyewearShops.totalCount ?? 0}\n            onNext={handleNextClick}\n            onPrevious={handlePreviousClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/TreatmentTypeAdminPage.tsx",["1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077"],"import React, { useEffect, useState } from \"react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport classnames from \"classnames\";\nimport { BILLINGS } from \"./BillingsAdminPage\";\nimport { SUPPLIES } from \"./SupplyAdminPage\";\nimport {\n  Maybe,\n  MutationDeleteTreatmentTypeArgs,\n  MutationSaveTreatmentTypeArgs,\n  MutationUpdateTreatmentTypeArgs,\n  PaginationInput,\n  Query,\n  QueryBillingsArgs,\n  QuerySuppliesArgs,\n  QueryTreatmentsArgs,\n  TreatmentStatus,\n  TreatmentType,\n  TreatmentTypeEdge,\n  TreatmentTypeInput,\n  TreatmentTypeUpdateInput,\n} from \"../../models/models\";\nimport { UpdateTreatmentTypeForm } from \"../../components/UpdateTreatmentTypeForm\";\nimport { AddTreatmentTypeForm } from \"../../components/AddTreatmentTypeForm\";\n\nconst TREATMENT_TYPES = gql`\n  query TreatmentTypes($page: PaginationInput!, $searchTerm: String) {\n    treatmentTypes(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          active\n          billings {\n            id\n            item\n            code\n          }\n          supplies {\n            id\n            title\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 20;\n\nexport const TreatmentTypePage: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryTreatmentsArgs>(\n    TREATMENT_TYPES,\n    {\n      variables: { page: paginationInput },\n    }\n  );\n\n  const handleNextClick = () => {\n    const totalPages = data?.treatmentTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"overflow-x-auto\">\n        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  colSpan={4}\n                  className=\"px-6 py-3 bg-gray-700 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                >\n                  Treatment Types\n                </th>\n\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                >\n                  <button\n                    onClick={() =>\n                      bottomSheetDispatch({\n                        type: \"show\",\n                        snapPoint: 0,\n                        children: (\n                          <AddTreatmentTypeForm\n                            onSuccess={() => {\n                              bottomSheetDispatch({ type: \"hide\" });\n\n                              notifDispatch({\n                                type: \"show\",\n                                notifTitle: \"Success\",\n                                notifSubTitle:\n                                  \"Treatment has been saved successfully\",\n                                variant: \"success\",\n                              });\n\n                              refetch();\n                            }}\n                            onCancel={() =>\n                              bottomSheetDispatch({ type: \"hide\" })\n                            }\n                          />\n                        ),\n                      })\n                    }\n                    className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"h-6 w-6\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </div>\n                      <div className=\"font-semibold\">Add</div>\n                    </div>\n                  </button>\n                </th>\n              </tr>\n              <tr className=\"bg-gray-100\">\n                <th colSpan={5}>\n                  <input\n                    type=\"text\"\n                    name=\"search\"\n                    placeholder=\"Search\"\n                    className=\"p-3 pl-4 block w-full sm:text-md border-gray-300\"\n                  />\n                </th>\n              </tr>\n              <tr className=\"bg-gray-100\">\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Title\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Billings\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Supplies\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Status\n                </th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {data?.treatmentTypes.edges.map(\n                (value: Maybe<TreatmentTypeEdge>) => (\n                  <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {value?.node.title}\n                    </td>\n\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {value?.node.billings.map((e, i) => (\n                        <span\n                          key={e?.id}\n                          className={classnames(\n                            \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800\",\n                            {\n                              \"ml-2\": i !== 0,\n                            }\n                          )}\n                        >\n                          {e?.item}\n                        </span>\n                      ))}\n                    </td>\n\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {value?.node.supplies.map((e, i) => (\n                        <span\n                          key={e?.id}\n                          className={classnames(\n                            \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800\",\n                            {\n                              \"ml-2\": i !== 0,\n                            }\n                          )}\n                        >\n                          {e?.title}\n                        </span>\n                      ))}\n                    </td>\n\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      <span\n                        className={classnames(\n                          \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\",\n                          {\n                            \"bg-yellow-100 text-yellow-800\":\n                              !value?.node.active,\n                          },\n                          {\n                            \"bg-green-100 text-green-800\": value?.node.active,\n                          }\n                        )}\n                      >\n                        {value?.node.active ? \"Active\" : \"Inactive\"}\n                      </span>\n                    </td>\n\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <button\n                        onClick={() => {\n                          bottomSheetDispatch({\n                            type: \"show\",\n                            snapPoint: 0,\n                            children: (\n                              <UpdateTreatmentTypeForm\n                                onUpdateSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Treatment has been updated successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onDeleteSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Treatment has been deleted successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onCancel={() =>\n                                  bottomSheetDispatch({ type: \"hide\" })\n                                }\n                                values={value?.node}\n                              />\n                            ),\n                          });\n                        }}\n                        className=\"text-indigo-600 hover:text-indigo-900\"\n                      >\n                        Edit\n                      </button>\n                    </td>\n                  </tr>\n                )\n              )}\n            </tbody>\n          </table>\n          <TablePagination\n            totalCount={data?.treatmentTypes.totalCount ?? 0}\n            onNext={handleNextClick}\n            onPrevious={handlePreviousClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/DiagnosticProcedureTypeAdminPage.tsx",["1078"],"import React, { useEffect, useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport classnames from \"classnames\";\nimport {\n  DiagnosticProcedureTypeEdge,\n  Maybe,\n  PaginationInput,\n  Query,\n  QueryDiagnosticProcedureTypesArgs,\n} from \"../../models/models\";\nimport { UpdateDiagnosticProcedureTypeForm } from \"../../components/UpdateDiagnosticProcedureTypeForm\";\nimport { AddDiagnosticProcedureTypeForm } from \"../../components/AddDiagnosticProcedureTypeForm\";\n\nconst DIAGNOSTIC_PROCEDURE_TYPES = gql`\n  query DiagnosticProcedureTypes($page: PaginationInput!, $searchTerm: String) {\n    diagnosticProcedureTypes(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          active\n          billings {\n            id\n            item\n            code\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 20;\n\nexport const DiagnosticProcedureTypePage: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryDiagnosticProcedureTypesArgs>(\n    DIAGNOSTIC_PROCEDURE_TYPES,\n    {\n      variables: { page: paginationInput },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.diagnosticProcedureTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"overflow-x-auto\">\n        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  colSpan={3}\n                  className=\"px-6 py-3 bg-gray-700 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                >\n                  Diagnostic Procedures\n                </th>\n\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                >\n                  <button\n                    onClick={() =>\n                      bottomSheetDispatch({\n                        type: \"show\",\n                        snapPoint: 0,\n                        children: (\n                          <AddDiagnosticProcedureTypeForm\n                            onSuccess={() => {\n                              bottomSheetDispatch({ type: \"hide\" });\n\n                              notifDispatch({\n                                type: \"show\",\n                                notifTitle: \"Success\",\n                                notifSubTitle:\n                                  \"Diagnostic Procedure has been saved successfully\",\n                                variant: \"success\",\n                              });\n\n                              refetch();\n                            }}\n                            onCancel={() =>\n                              bottomSheetDispatch({ type: \"hide\" })\n                            }\n                          />\n                        ),\n                      })\n                    }\n                    className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"h-6 w-6\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </div>\n                      <div className=\"font-semibold\">Add</div>\n                    </div>\n                  </button>\n                </th>\n              </tr>\n              <tr className=\"bg-gray-100\">\n                <th colSpan={4}>\n                  <input\n                    type=\"text\"\n                    name=\"search\"\n                    placeholder=\"Search\"\n                    className=\"p-3 pl-4 block w-full sm:text-md border-gray-300\"\n                  />\n                </th>\n              </tr>\n              <tr className=\"bg-gray-100\">\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Title\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Billings\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Status\n                </th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {data?.diagnosticProcedureTypes.edges.map(\n                (value: Maybe<DiagnosticProcedureTypeEdge>) => (\n                  <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {value?.node.title}\n                    </td>\n\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {value?.node.billings.map((e, i) => (\n                        <span\n                          key={e?.id}\n                          className={classnames(\n                            \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800\",\n                            {\n                              \"ml-2\": i !== 0,\n                            }\n                          )}\n                        >\n                          {e?.item}\n                        </span>\n                      ))}\n                    </td>\n\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {value?.node.active ? \"Active\" : \"Inactive\"}\n                    </td>\n\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <button\n                        onClick={() => {\n                          bottomSheetDispatch({\n                            type: \"show\",\n                            snapPoint: 500,\n                            children: (\n                              <UpdateDiagnosticProcedureTypeForm\n                                onUpdateSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Diagnostic procedure has been updated successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onDeleteSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Diagnostic procedure has been deleted successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onCancel={() =>\n                                  bottomSheetDispatch({ type: \"hide\" })\n                                }\n                                values={value?.node}\n                              />\n                            ),\n                          });\n                        }}\n                        className=\"text-indigo-600 hover:text-indigo-900\"\n                      >\n                        Edit\n                      </button>\n                    </td>\n                  </tr>\n                )\n              )}\n            </tbody>\n          </table>\n          <TablePagination\n            totalCount={data?.diagnosticProcedureTypes.totalCount ?? 0}\n            onNext={handleNextClick}\n            onPrevious={handlePreviousClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/table_pagination/index.tsx",["1079","1080","1081","1082"],"import React from \"react\";\n\ninterface Props {\n  totalCount: number;\n  onNext: () => void;\n  onPrevious: () => void;\n}\n\nexport const TablePagination: React.FC<Props> = ({\n  totalCount,\n  onNext,\n  onPrevious,\n}) => {\n  return (\n    <div className=\"bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6\">\n      <div className=\"flex-1 flex justify-between sm:hidden\">\n        <a\n          href=\"#\"\n          className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:text-gray-500\"\n        >\n          Previous\n        </a>\n        <a\n          href=\"#\"\n          className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:text-gray-500\"\n        >\n          Next\n        </a>\n      </div>\n      <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n        <div>{`${totalCount} results`}</div>\n        <div>\n          <nav\n            className=\"relative z-0 inline-flex shadow-sm -space-x-px\"\n            aria-label=\"Pagination\"\n          >\n            <a\n              className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50\"\n              onClick={(evt) => {\n                evt.preventDefault();\n                onPrevious();\n              }}\n            >\n              <span className=\"sr-only\">Previous</span>\n\n              <svg\n                className=\"h-5 w-5\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                aria-hidden=\"true\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </a>\n\n            <a\n              className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50\"\n              onClick={(evt) => {\n                evt.preventDefault();\n                onNext();\n              }}\n            >\n              <span className=\"sr-only\">Next</span>\n              <svg\n                className=\"h-5 w-5\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                aria-hidden=\"true\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </a>\n          </nav>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/QueueDestinationAdminTable.tsx",["1083","1084"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { Query, PaginationInput, QueryQueueDestinationsArgs, Maybe, QueueDestinationEdge, QueueDestinationInput, MutationSaveQueueDestinationArgs, QueueDestination, MutationUpdateQueueDestinationArgs, MutationDeleteQueueDestinationArgs, QueueDestinationUpdateInput } from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { TablePagination } from \"./table_pagination\";\n\nconst QUEUE_DESTINATIONS = gql`\n  query QueueDestination($page: PaginationInput!) {\n    queueDestinations(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 5;\n\nexport const QueueDestinationsTable: React.FC = () => {\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const { data, refetch } = useQuery<Query, QueryQueueDestinationsArgs>(\n    QUEUE_DESTINATIONS,\n    {\n      variables: { page: paginationInput },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.queueDestinations.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"flex flex-col\">\n        <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n            <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead>\n                  <tr>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 bg-gray-700 text-left text-sm font-medium text-gray-50 uppercase tracking-wider\"\n                    >\n                      Queue destinations\n                    </th>\n\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                    >\n                      <button\n                        onClick={() =>\n                          bottomSheetDispatch({\n                            type: \"show\",\n                            snapPoint: 500,\n                            children: (\n                              <SaveQueueDestinationForm\n                                onSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Queue destination has been saved successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onCancel={() =>\n                                  bottomSheetDispatch({ type: \"hide\" })\n                                }\n                              />\n                            ),\n                          })\n                        }\n                        className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                      >\n                        <div className=\"flex items-center\">\n                          <div>\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 20 20\"\n                              fill=\"currentColor\"\n                              className=\"h-6 w-6\"\n                            >\n                              <path\n                                fillRule=\"evenodd\"\n                                d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                                clipRule=\"evenodd\"\n                              />\n                            </svg>\n                          </div>\n                          <div className=\"font-semibold\">Add</div>\n                        </div>\n                      </button>\n                    </th>\n                  </tr>\n                  <tr>\n                    <th colSpan={2}>\n                      <input\n                        type=\"text\"\n                        name=\"search\"\n                        id=\"rooms-search\"\n                        placeholder=\"Search\"\n                        className=\"p-1 pl-4 block w-full sm:text-md border-gray-300\"\n                      />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {data?.queueDestinations.edges.map(\n                    (value: Maybe<QueueDestinationEdge>) => (\n                      <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {value?.node.title}\n                        </td>\n\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <button\n                            className=\"text-indigo-600 hover:text-indigo-900\"\n                            onClick={() => {\n                              bottomSheetDispatch({\n                                type: \"show\",\n                                snapPoint: 500,\n                                children: (\n                                  <UpdateQueueDestinationForm\n                                    onUpdateSuccess={() => {\n                                      bottomSheetDispatch({ type: \"hide\" });\n\n                                      notifDispatch({\n                                        type: \"show\",\n                                        notifTitle: \"Success\",\n                                        notifSubTitle:\n                                          \"Room has been updated successfully\",\n                                        variant: \"success\",\n                                      });\n\n                                      refetch();\n                                    }}\n                                    onDeleteSuccess={() => {\n                                      bottomSheetDispatch({ type: \"hide\" });\n\n                                      notifDispatch({\n                                        type: \"show\",\n                                        notifTitle: \"Success\",\n                                        notifSubTitle:\n                                          \"Room has been deleted successfully\",\n                                        variant: \"success\",\n                                      });\n\n                                      refetch();\n                                    }}\n                                    onCancel={() =>\n                                      bottomSheetDispatch({ type: \"hide\" })\n                                    }\n                                    values={value?.node}\n                                  />\n                                ),\n                              });\n                            }}\n                          >\n                            Edit\n                          </button>\n                        </td>\n                      </tr>\n                    )\n                  )}\n                </tbody>\n              </table>\n              <TablePagination\n                totalCount={data?.queueDestinations.totalCount ?? 0}\n                onNext={handleNextClick}\n                onPrevious={handlePreviousClick}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SAVE_QUEUE_DESTINATIONS = gql`\n  mutation SaveQueueDestinations($input: QueueDestinationInput!) {\n    saveQueueDestination(input: $input) {\n      id\n    }\n  }\n`;\n\ninterface SaveQueueDestinationProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst SaveQueueDestinationForm: React.FC<SaveQueueDestinationProps> = ({\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<QueueDestinationInput>();\n  const [save, { error }] = useMutation<any, MutationSaveQueueDestinationArgs>(\n    SAVE_QUEUE_DESTINATIONS,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSubmit = (data: QueueDestinationInput) => {\n    save({ variables: { input: data } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Add Queue Destination\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst UPDATE_QUEUE_DESTINATION = gql`\n  mutation UpdateQueueDestination($input: QueueDestinationUpdateInput!) {\n    updateQueueDestination(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_QUEUE_DESTINATION = gql`\n  mutation DeleteQueueDestination($id: ID!) {\n    deleteQueueDestination(id: $id)\n  }\n`;\n\ninterface UpdateQueueDestinationProps {\n  values: QueueDestination | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst UpdateQueueDestinationForm: React.FC<UpdateQueueDestinationProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit, setValue } = useForm<QueueDestinationInput>();\n  const [save, { error }] = useMutation<\n    any,\n    MutationUpdateQueueDestinationArgs\n  >(UPDATE_QUEUE_DESTINATION, {\n    onCompleted(data) {\n      onUpdateSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [deleteOrderStatus] = useMutation<\n    any,\n    MutationDeleteQueueDestinationArgs\n  >(DELETE_QUEUE_DESTINATION, {\n    onCompleted(data) {\n      onDeleteSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    setValue(\"title\", values?.title ?? \"\");\n  }, [values]);\n\n  const onUpdateSubmit = (data: QueueDestinationUpdateInput) => {\n    if (values?.id !== undefined) {\n      data.id = values?.id;\n    }\n\n    save({ variables: { input: data } });\n  };\n\n  const onDeleteSubmit = (data: QueueDestinationInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    deleteOrderStatus({ variables: { id: id } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update Queue Destination\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SearchBar.tsx",["1085","1086","1087","1088"],"import { gql, useLazyQuery } from \"@apollo/client\";\nimport { parseISO } from \"date-fns\";\nimport { debounce } from \"lodash-es\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { QuerySearchArgs, Maybe, Patient, Query, User } from \"../models/models\";\nimport { Page } from \"../models/page\";\nimport SearchBarAppointments from \"./SearchBarAppointments\";\nimport SearchBarMedications from \"./SearchBarMedications\";\nimport ReactLoading from \"react-loading\";\n\nconst SEARCH = gql`\n  query SearchPatient($searchTerm: String!) {\n    search(searchTerm: $searchTerm) {\n      patients {\n        id\n        firstName\n        lastName\n        phoneNo\n      }\n\n      providers {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`;\n\ninterface Props {\n  searchFocused: boolean;\n  onChangePage: (route: string) => void;\n  onAddPage: (page: Page) => void;\n  setSearchFocused: (focused: boolean) => void;\n}\n\nexport const SearchBar: React.FC<Props> = ({\n  searchFocused,\n  setSearchFocused,\n  onAddPage,\n}) => {\n  const history = useHistory();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(\"\");\n\n  const searchQuery = useLazyQuery<Query, QuerySearchArgs>(SEARCH);\n\n  useEffect(() => {\n    if (debouncedSearchTerm.trim().length > 0) {\n      searchQuery[0]({\n        variables: {\n          searchTerm: debouncedSearchTerm,\n        },\n      });\n    } else {\n      searchQuery[0]({\n        variables: {\n          searchTerm: \"\",\n        },\n      });\n    }\n  }, [debouncedSearchTerm]);\n\n  const debouncer = useCallback(\n    debounce((_searchVal: string) => {\n      setDebouncedSearchTerm(_searchVal);\n    }, 1000),\n    []\n  );\n\n  const handlePatientClick = (patient: Maybe<Patient>) => {\n    if (patient !== undefined) {\n      setSearchFocused(false);\n      setSearchTerm(\"\");\n\n      const page: Page = {\n        title: `Patient - ${patient?.firstName} ${patient?.lastName}`,\n        cancellable: true,\n        route: `/patients/${patient?.id}`,\n        icon: (\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n            className=\"h-4 w-4\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n            />\n          </svg>\n        ),\n      };\n\n      onAddPage(page);\n      history.replace(`/patients/${patient?.id}`);\n    }\n  };\n\n  const handleProviderClick = (user: User) => {\n    setSearchFocused(false);\n    setSearchTerm(\"\");\n\n    const page: Page = {\n      title: `Appointments`,\n      cancellable: true,\n      route: `/appointments?userId=${user.id}`,\n      icon: (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n          className=\"h-4 w-4\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"\n          />\n        </svg>\n      ),\n    };\n\n    onAddPage(page);\n    history.replace(`/appointments?userId=${user.id}`);\n  };\n\n  const hasPatients = (searchQuery[1].data?.search.patients.length ?? 0) > 0;\n  const hasProviders = (searchQuery[1].data?.search.providers.length ?? 0) > 0;\n\n  return (\n    <div>\n      <div className=\"relative z-20\">\n        <input\n          type=\"search\"\n          className=\"bg-gray-600 focus:bg-white focus:placeholder-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 placeholder-gray-300 h-10 w-full px-4 rounded-md sm:text-sm block border-none\"\n          placeholder=\"Search\"\n          aria-haspopup=\"listbox\"\n          aria-expanded=\"false\"\n          autoComplete=\"off\"\n          value={searchTerm}\n          onFocus={() => setSearchFocused(true)}\n          onBlur={() => {\n            setSearchFocused(false);\n            setSearchTerm(\"\");\n          }}\n          onChange={(evt) => {\n            setSearchTerm(evt.target.value);\n            debouncer(evt.target.value);\n          }}\n        />\n      </div>\n\n      {searchQuery[1].loading && (\n        <div className=\"origin-top-left mt-4 absolute z-20 w-full rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 text-center py-10\">\n          <p className=\"text-gray-700 animate-pulse tracking-wider\">\n            Searching...\n          </p>\n        </div>\n      )}\n\n      {(hasPatients || hasProviders) && searchFocused && (\n        <div className=\"origin-top-left mt-4 absolute z-20 w-full rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 p-4\">\n          {hasPatients && (\n            <div>\n              <PatientResults\n                patients={searchQuery[1].data?.search.patients}\n                onClick={(e) => handlePatientClick(e)}\n              />\n            </div>\n          )}\n\n          {hasProviders && (\n            <div className=\"mt-2\">\n              <ProviderResults\n                providers={searchQuery[1].data?.search.providers}\n                onClick={(e) => handleProviderClick(e)}\n              />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst SEARCH_ITEM_DETAILS = gql`\n  query SearchItemDetails(\n    $appointmentFilter: AppointmentFilter\n    $medicalPrescriptionFilter: MedicalPrescriptionFilter\n    $page: PaginationInput!\n  ) {\n    appointments(filter: $appointmentFilter, page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          checkInTime\n          visitType {\n            id\n            title\n          }\n          appointmentStatus {\n            id\n            title\n          }\n          providerName\n        }\n      }\n    }\n\n    searchMedicalPrescriptions(\n      filter: $medicalPrescriptionFilter\n      page: $page\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          medication\n          sig\n          refill\n          generic\n          substitutionAllowed\n          directionToPatient\n          history\n          status\n          prescribedDate\n        }\n      }\n    }\n\n    currentDateTime\n  }\n`;\n\nfunction PatientResults({\n  patients,\n  onClick,\n}: {\n  patients: Patient[] | undefined;\n  onClick: (e: Patient) => void;\n}) {\n  const searchItemDetailsQuery = useLazyQuery<Query, any>(SEARCH_ITEM_DETAILS);\n\n  const [isHovered, setIsHovered] = useState({ hovered: false, id: null });\n\n  const debouncedHandleMouseEnter = debounce(\n    (hoverId) => setIsHovered({ hovered: true, id: hoverId }),\n    500\n  );\n\n  const handlOnMouseLeave = () => {\n    setIsHovered({ hovered: false, id: null });\n    debouncedHandleMouseEnter.cancel();\n  };\n\n  useEffect(() => {\n    if (isHovered.hovered) {\n      searchItemDetailsQuery[0]({\n        variables: {\n          appointmentFilter: {\n            patientId: isHovered.id,\n          },\n          medicalPrescriptionFilter: {\n            patientId: isHovered.id,\n            status: \"Active\",\n          },\n          page: { page: 1, size: 5 },\n        },\n      });\n    }\n  }, [isHovered]);\n\n  const appointmentsLength =\n    searchItemDetailsQuery[1].data?.appointments.edges.length ?? 0;\n\n  const medicalPrescriptionsLength =\n    searchItemDetailsQuery[1].data?.searchMedicalPrescriptions.edges.length ??\n    0;\n\n  return (\n    <div>\n      <p className=\"text-gray-600 text-lg font-semibold\">Patients</p>\n\n      {patients?.map((e) => (\n        <div\n          key={e?.id}\n          onMouseDown={(evt) => {\n            //evt.stopPropagation();\n            onClick(e);\n          }}\n          onMouseEnter={() => {\n            debouncedHandleMouseEnter(e?.id);\n          }}\n          onMouseLeave={() => {\n            handlOnMouseLeave();\n          }}\n        >\n          <div\n            role=\"menu\"\n            area-orientation=\"vertical\"\n            area-labelledby=\"header-search\"\n          >\n            <div className=\"mt-3 bg-gray-50 rounded-lg cursor-pointer group hover:bg-gray-600 hover:text-white\">\n              <div className=\"flex px-3 py-3 items-center \">\n                <div className=\"flex flex-grow\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                    className=\"h-8 w-8\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                    />\n                  </svg>\n                  <div className=\"flex-col ml-4\">\n                    <p className=\"text-lg text-gray-900 group-hover:text-white font-bold\">\n                      {`${e?.firstName} ${e?.lastName}`}\n                    </p>\n                    <p className=\"text-sm text-gray-500 group-hover:text-gray-100\">\n                      {e?.phoneNo}\n                    </p>\n                  </div>\n                </div>\n                <div>\n                  <p className=\"font-semibold group-hover:text-white\">\n                    {e?.id}\n                  </p>\n                </div>\n              </div>\n              {isHovered.id === e?.id && searchItemDetailsQuery[1].loading && (\n                <div className=\"pl-14 pr-4 pb-5\">\n                  <ReactLoading\n                    type={\"cylon\"}\n                    color={\"white\"}\n                    height={30}\n                    width={30}\n                    className=\"inline-block\"\n                  />\n                </div>\n              )}\n\n              {isHovered.id === e?.id &&\n                (appointmentsLength > 0 || medicalPrescriptionsLength > 0) && (\n                  <div className=\"pl-14 pr-4 pb-5\">\n                    <hr />\n                    {appointmentsLength > 0 && (\n                      <div className=\"mt-2\">\n                        <p className=\"font-light\">Appointments</p>\n                        <div className=\"mt-2\" />\n                        <div className=\"pl-10 \">\n                          <SearchBarAppointments\n                            appointments={searchItemDetailsQuery[1].data?.appointments.edges.map(\n                              (e) => e?.node\n                            )}\n                            currentDateTime={parseISO(\n                              searchItemDetailsQuery[1].data?.currentDateTime\n                            )}\n                          />\n                        </div>\n                      </div>\n                    )}\n\n                    {medicalPrescriptionsLength > 0 && (\n                      <div className=\"mt-2\">\n                        <p className=\"font-light mt-2\">Medications</p>\n                        <div className=\"mt-2\" />\n                        <div className=\"pl-10 \">\n                          <SearchBarMedications\n                            medicalPrescriptions={searchItemDetailsQuery[1].data?.searchMedicalPrescriptions.edges.map(\n                              (e) => e?.node\n                            )}\n                          />\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction ProviderResults({\n  providers,\n  onClick,\n}: {\n  providers: User[] | undefined;\n  onClick: (e: User) => void;\n}) {\n  return (\n    <div>\n      <p className=\"text-gray-600 text-lg font-semibold\">Doctors</p>\n\n      {providers?.map((e) => (\n        <div\n          key={e?.id}\n          onMouseDown={(evt) => {\n            onClick(e);\n          }}\n        >\n          <div\n            role=\"menu\"\n            area-orientation=\"vertical\"\n            area-labelledby=\"header-search\"\n          >\n            <div className=\"mt-3\">\n              <div className=\"flex px-3 py-3 bg-gray-100 rounded-lg cursor-pointer items-center group hover:bg-teal-400 hover:text-white\">\n                <div className=\"flex flex-grow\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                    className=\"h-8 w-8\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                    />\n                  </svg>\n                  <div className=\"flex-col ml-4\">\n                    <p className=\"text-lg text-gray-900 group-hover:text-white font-bold\">\n                      {`Dr. ${e?.firstName} ${e?.lastName}`}\n                    </p>\n                  </div>\n                </div>\n                <div></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/AppointmentDetails.tsx",["1089","1090","1091","1092","1093"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { ChiefComplaints } from \"./ChiefComplaints\";\nimport { HistoryPage } from \"./HistoryPage\";\nimport { PatientDetails } from \"./PatientDetails\";\nimport { VitalSigns } from \"./VitalSigns\";\nimport { SideNav } from \"./SideNav\";\nimport { Examination } from \"./Examination\";\nimport { Diagnosis } from \"./Diagnosis\";\nimport { DifferentialDiagnosis } from \"./DifferentialDiagnosis\";\nimport { DiagnosticProcedurePage } from \"./DiagnosticProcedurePage\";\nimport { LabPage } from \"./LabPage\";\nimport { PrescriptionPage } from \"./PrescriptionPage\";\nimport {\n  Route,\n  Switch,\n  useHistory,\n  useLocation,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport { SurgeryPage } from \"./SurgeryPage\";\nimport ReactLoading from \"react-loading\";\nimport { PreOpPage } from \"./PreOpPage\";\nimport { IntraOpPage } from \"./IntraOpPage\";\nimport { TreatmentPlanPage } from \"./TreatmentPlanPage\";\nimport { TreatmentObjectivePage } from \"./TreatmentObjectivePage\";\nimport { SummaryPage } from \"./SummaryPage\";\nimport { MedicationAllergiesPage } from \"./MedicationAllergiesPage\";\nimport MyAccordion from \"../../components/Accordion\";\nimport { ProgressNoteComponent } from \"../../components/ProgressNoteComponent\";\nimport { Stickie } from \"../../components/StickieComponent\";\nimport { VisionSideInfo } from \"../../components/VisionSideInfo\";\nimport { IopSideInfo } from \"../../components/IopSideInfo\";\nimport { MedicationSideInfo } from \"../../components/MedicationSideInfo\";\nimport classnames from \"classnames\";\nimport { formatDistance } from \"date-fns\";\nimport { ReferralPage } from \"./ReferralPage\";\nimport {\n  Appointment,\n  MutationLockPatientChartArgs,\n  Query,\n  QueryAppointmentArgs,\n} from \"../../models/models\";\nimport { parseJwt } from \"../../util\";\nimport { FollowUpPage } from \"./FollowUpPage\";\nimport { PreanestheticPage } from \"./PreanestheticPage\";\nimport Modal from \"../../components/Modal\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport { AppointmentContext } from \"../../_context/AppointmentContext\";\nimport { Page } from \"../../models/page\";\n\nexport const GET_APPOINTMENT = gql`\n  query GetAppointment($id: ID!) {\n    appointment(id: $id) {\n      id\n      patient {\n        id\n        firstName\n        lastName\n        gender\n        dateOfBirth\n        city\n        patientHistory {\n          id\n        }\n      }\n      patientChart {\n        id\n        diagnosisNote\n        differentialDiagnosisNote\n        chiefComplaintsNote\n        stickieNote\n        summaryNote\n        rightSummarySketch\n        leftSummarySketch\n        medicalRecommendation\n        sickLeave\n        bloodPressure\n        visualAcuity {\n          id\n          rightDistanceUncorrected\n          leftDistanceUncorrected\n          rightDistancePinhole\n          leftDistancePinhole\n          rightDistanceCorrected\n          leftDistanceCorrected\n          rightNearUncorrected\n          leftNearUncorrected\n          rightNearPinhole\n          leftNearPinhole\n          rightNearCorrected\n          leftNearCorrected\n        }\n        iop {\n          id\n          rightApplanation\n          leftApplanation\n          rightTonopen\n          leftTonopen\n          rightDigital\n          leftDigital\n          rightNoncontact\n          leftNoncontact\n        }\n        surgicalProcedure {\n          id\n          preanestheticDocuments {\n            id\n            size\n            hash\n            fileName\n            extension\n            contentType\n            createdAt\n          }\n          respiratory\n          cardiovascular\n          abdomen\n          gus\n          ismss\n          cns\n          preanestheticAllergies\n          preanestheticAllergiesNote\n          physicalBloodPressure\n          physicalPr\n          physicalRr\n          physicalSaO2\n          physicalTemperature\n          physicalWeight\n          physicalHeent\n          physicalArtificalDenture\n          physicalArtificalDentureNote\n          physicalLgs\n          physicalChest\n          physicalCvs\n          physicalAbdomen\n          physicalGus\n          physicalIs\n          physicalMss\n          physicalCns\n          cbcActive\n          cbcResults\n          cbcDate\n          wbcActive\n          wbcResults\n          wbcDate\n          hgbhctActive\n          hgbhctResults\n          hgbhctDate\n          pltActive\n          pltResults\n          pltDate\n          coagulationPtActive\n          coagulationPtResults\n          coagulationPtDate\n          coagulationPttActive\n          coagulationPttResults\n          coagulationPttDate\n          coagulationInrActive\n          coagulationInrResults\n          coagulationInrDate\n          serumAlbuminActive\n          serumAlbuminResults\n          serumAlbuminDate\n          totalProteinActive\n          totalProteinResults\n          totalProteinDate\n          bilirubinTotalActive\n          bilirubinTotalResults\n          bilirubinTotalDate\n          bilirubinDirectActive\n          bilirubinDirectResults\n          bilirubinDirectDate\n          astsgotActive\n          astsgotResults\n          astsgotDate\n          altsgptActive\n          altsgptResults\n          altsgptDate\n          alpActive\n          alpResults\n          alpDate\n          renalCrActive\n          renalCrResults\n          renalCrDate\n          renalBunActive\n          renalBunResults\n          renalBunDate\n          thyroidFreeT3Active\n          thyroidFreeT3Results\n          thyroidFreeT3Date\n          thyroidTotalT4Active\n          thyroidTotalT4Results\n          thyroidTotalT4Date\n          thyroidTshActive\n          thyroidTshResults\n          thyroidTshDate\n          electrolytesNaPlusActive\n          electrolytesNaPlusResults\n          electrolytesNaPlusDate\n          electrolytesKPlusActive\n          electrolytesKPlusResults\n          electrolytesKPlusDate\n          electrolytesClMinusActive\n          electrolytesClMinusResults\n          electrolytesClMinusDate\n          electrolytesCa2PlusActive\n          electrolytesCa2PlusResults\n          electrolytesCa2PlusDate\n          electrolytesMg2PlusActive\n          electrolytesMg2PlusResults\n          electrolytesMg2PlusDate\n          electrolytesPMinusActive\n          electrolytesPMinusResults\n          electrolytesPMinusDate\n          asa1\n          asa2\n          asa3\n          asa4\n          asa5\n          opv1\n          opv2\n          opv3\n          opv4\n          bleedingTendancy\n          bleedingTendancyNote\n          dm\n          dmNote\n          hypertension\n          hypertensionNote\n          cardiac\n          cardiacNote\n          preanestheticAsthma\n          preanestheticAsthmaNote\n          rvi\n          rviNote\n          renal\n          renalNote\n          preanestheticPerformedBy\n          fitForSurgery\n          fitForSurgeryNote\n          rightCorrected\n          leftCorrected\n          rightIop\n          leftIop\n          rightAnteriorSegment\n          leftAnteriorSegment\n          rightPosteriorSegment\n          leftPosteriorSegment\n          rightBiometry\n          leftBiometry\n          diabetes\n          hpn\n          asthma\n          cardiacDisease\n          allergies\n          bloodPressure\n          bloodSugar\n          uriAnalysis\n          la\n          ga\n          retrobulbar\n          peribulbar\n          topical\n          conjFlapLimbal\n          conjFlapFornix\n          sectionLimbal\n          sectionCorneral\n          sectionScleralTunnel\n          capsulotomyLinear\n          capsulotomyCanOpener\n          capsulotomyCcc\n          iolPlacementBag\n          iolSulcus\n          iolBagSulcus\n          irodectpmyNone\n          irodectpmyPl\n          irodectpmySl\n          sphincterectomy\n          lensExtractionIcce\n          lensExtractionEcce\n          lensExtractionPhaco\n          sutureNone\n          sutureContinuous\n          sutureInterrupted\n          drapes\n          ringer\n          bss\n          air\n          hpmc\n          healon\n          pilo\n          adrenalin\n          antibiotic\n          steroid\n          suture80\n          suture90\n          suture100\n          irrigatingSolution\n          visco\n          interacameral\n          subconj\n          suture\n          silk\n          nylon\n          pcTear\n          vitreousLoss\n          descematesStrip\n          endothelialDamage\n          nucluesDrop\n          iridoDialysis\n          irisDamage\n          retainedCortex\n          hyphema\n          complicationsOthers\n          complicationsNote\n          vitrectomy\n          typeOfIolAc\n          typeOfIolPc\n          typeOfIol\n          iolModel\n          company\n          aclol\n          aclolPlanned\n          aclolUnplanned\n          unplanned\n          additionalNotes\n          specialInstructions\n          treatment\n          assistantName\n          performOnEye\n          surgicalProcedureType {\n            id\n            title\n          }\n        }\n        treatment {\n          id\n          note\n          result\n          treatmentType {\n            id\n            title\n          }\n        }\n        locked\n        lockedDate\n        lockedById\n        amendments {\n          id\n          note\n          createdAt\n        }\n      }\n      providerName\n      visitType {\n        id\n        title\n      }\n      room {\n        title\n      }\n      appointmentStatus {\n        title\n      }\n      providerName\n    }\n  }\n`;\n\nconst LOCK_PATIENT_CHART = gql`\n  mutation LockPatientChart($id: ID!) {\n    lockPatientChart(id: $id) {\n      id\n    }\n  }\n`;\n\nexport const AppointmentDetails: React.FC<{\n  appointmentId: string;\n  onUpdateTab?: (page: any) => void;\n  onAddPage: (page: Page) => void;\n}> = ({ appointmentId, onUpdateTab, onAddPage }) => {\n  const match = useRouteMatch();\n  const location = useLocation();\n  const history = useHistory();\n  const notifDispatch = useNotificationDispatch();\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  const [showExampleAlert, setShowExampleAlert] = useState(false);\n  useEffect(() => {\n    if (location.pathname.length > 0) {\n      const split = location.pathname.split(\"/\");\n      const path = split[split.length - 1];\n      if (path === \"intra-op\") {\n        setShowExampleAlert(true);\n      } else {\n        setShowExampleAlert(false);\n      }\n    }\n  }, [location.pathname]);\n\n  const { data, refetch } = useQuery<Query, QueryAppointmentArgs>(\n    GET_APPOINTMENT,\n    {\n      variables: { id: appointmentId },\n    }\n  );\n\n  const [soapType, setSoapType] = useState<\n    \"regular\" | \"surgical\" | \"treatment\"\n  >(\"regular\");\n\n  useEffect(() => {\n    if (data?.appointment.visitType.title === \"Surgery\") {\n      setSoapType(\"surgical\");\n    } else if (data?.appointment.visitType.title === \"Treatment\") {\n      setSoapType(\"treatment\");\n    } else {\n      setSoapType(\"regular\");\n    }\n  }, [data]);\n\n  const [userType, setUserType] = useState<string>(\"\");\n\n  useEffect(() => {\n    const token = sessionStorage.getItem(\"accessToken\");\n\n    if (token !== null) {\n      const claim = parseJwt(token);\n      setUserType(claim.UserType);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (data?.appointment && onUpdateTab) {\n      const page: any = {\n        title: `Appointment - ${data.appointment.patient.firstName} ${data.appointment.patient.lastName}`,\n        route: `/appointments/${data.appointment.id}/patient-details`,\n        icon: (\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n            className=\"h-4 w-4\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n            />\n          </svg>\n        ),\n      };\n\n      onUpdateTab(page);\n    }\n  }, [data]);\n\n  const [isSaving, setIsSaving] = useState<boolean>(false);\n  const [lastSaved, setLastSaved] = useState<Date>(new Date());\n\n  const handleSaveChange = (saving: boolean) => {\n    if (saving) {\n      setIsSaving(true);\n    } else {\n      setIsSaving(false);\n      setLastSaved(new Date());\n    }\n  };\n\n  const [lockPatientChartMutation] = useMutation<\n    any,\n    MutationLockPatientChartArgs\n  >(LOCK_PATIENT_CHART, {\n    onCompleted(data) {\n      refetch();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [lockPatientChart, setLockPatientChart] = useState({\n    openConfirmationDialog: false,\n    confirmation: false,\n  });\n\n  useEffect(() => {\n    const patientChartId = data?.appointment.patientChart.id;\n\n    if (patientChartId && lockPatientChart.confirmation) {\n      lockPatientChartMutation({ variables: { id: patientChartId } });\n    }\n  }, [data?.appointment.patientChart, lockPatientChart]);\n\n  useEffect(() => {\n    if (data?.appointment.patientChart) {\n      const locked = data?.appointment.patientChart.locked ?? false;\n      patientChartLocked[1](locked);\n    }\n  }, [data?.appointment.patientChart]);\n\n  const handleAppointmentClick = (appointment: Appointment) => {\n    const page: Page = {\n      title: `Appointment - ${appointment.patient.firstName} ${appointment.patient.lastName}`,\n      cancellable: true,\n      route: `/appointments/${appointment.id}/patient-details`,\n      icon: (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n          className=\"h-4 w-4\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n          />\n        </svg>\n      ),\n    };\n\n    onAddPage(page);\n    history.push(`/appointments/${appointment.id}/patient-details`);\n  };\n\n  return (\n    <div>\n      <div className=\"bg-white w-full h-16 shadow-md rounded-md flex justify-between items-center px-5\">\n        <div className=\"text-teal-800 text-lg tracking-wider\">\n          {`${data?.appointment.patient.firstName} ${data?.appointment.patient.lastName}`}\n        </div>\n        <div className=\"flex space-x-4 items-center\">\n          <div className=\"flex-initial\">\n            <div\n              className={classnames(\n                \"text-sm tracking-wide subpixel-antialiased p-2 rounded-lg flex items-center space-x-2\",\n                {\n                  \"text-yellow-800 bg-yellow-50\": isSaving,\n                  \"text-teal-800 bg-teal-50\": !isSaving,\n                }\n              )}\n            >\n              {isSaving ? (\n                <div className=\"mr-3\">\n                  <ReactLoading\n                    type={\"bars\"}\n                    color={\n                      isSaving\n                        ? \"rgba(146, 64, 14, var(--tw-text-opacity))\"\n                        : \"teal\"\n                    }\n                    height={30}\n                    width={30}\n                  />\n                </div>\n              ) : (\n                <p className=\"material-icons\">schedule</p>\n              )}\n\n              {isSaving ? (\n                \"Saving\"\n              ) : (\n                <p>{`Saved ${formatDistance(lastSaved, new Date(), {\n                  addSuffix: true,\n                  includeSeconds: true,\n                })}`}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex-initial\">\n            <button\n              className={classnames(\n                \"text-sm  tracking-wide subpixel-antialiased px-2 py-1 rounded-lg flex items-center space-x-2 border \",\n                {\n                  \"text-teal-800 hover:bg-teal-700 hover:text-white\":\n                    data?.appointment.patientChart.locked === false,\n                  \"text-white bg-yellow-700\":\n                    data?.appointment.patientChart.locked === true,\n                }\n              )}\n              disabled={data?.appointment.patientChart.locked ?? false}\n              onClick={() =>\n                setLockPatientChart({\n                  openConfirmationDialog: true,\n                  confirmation: false,\n                })\n              }\n            >\n              <span className=\"material-icons\">\n                {data?.appointment.patientChart.locked === true\n                  ? \"lock\"\n                  : \"lock_open\"}\n              </span>\n              <div>\n                {data?.appointment.patientChart.locked === true\n                  ? \"Locked\"\n                  : \"Sign & Lock\"}\n              </div>\n            </button>\n          </div>\n\n          <div className=\"flex-initial\">\n            <select\n              id=\"soapType\"\n              name=\"soapType\"\n              value={soapType}\n              onChange={(evt) => {\n                if (evt.target.value === \"regular\") {\n                  setSoapType(\"regular\");\n                } else if (evt.target.value === \"surgical\") {\n                  setSoapType(\"surgical\");\n                } else if (evt.target.value === \"treatment\") {\n                  setSoapType(\"treatment\");\n                }\n              }}\n              className=\"block w-full border border-gray-100 text-teal-800 bg-white rounded-md shadow-sm focus:outline-none focus:border-gray-400 text-sm\"\n            >\n              <option value={\"regular\"}>Regular SOAP</option>\n              <option value={\"surgical\"}>Surgical SOAP</option>\n              <option value={\"treatment\"}>Treatment SOAP</option>\n            </select>\n          </div>\n        </div>\n      </div>\n      <div className=\"flex space-x-5 mt-5\">\n        <div className=\"flex-initial\">\n          <SideNav\n            soapType={soapType}\n            userType={userType}\n            locked={data?.appointment.patientChart.locked ?? false}\n          />\n        </div>\n        <div className=\"flex-1\">\n          <div>\n            {data?.appointment && (\n              <MyAccordion\n                title={\"Progress Note\"}\n                content={\n                  <ProgressNoteComponent\n                    appointment={data?.appointment}\n                    onAppointmentClick={(appointment: Appointment) =>\n                      handleAppointmentClick(appointment)\n                    }\n                  />\n                }\n                preExpand={false}\n              />\n            )}\n          </div>\n\n          {showExampleAlert && (\n            <div className=\"mt-2 bg-yellow-50 border-4 border-yellow-400\">\n              <div className=\"bg-yellow-400 p-1\">\n                <div className=\"flex text-sm items-center space-x-2\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"h-6 w-6\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                    />\n                  </svg>\n                  <span>\n                    Surgical Fitness: This patient is not fit for surgery\n                  </span>\n                </div>\n              </div>\n              <div className=\"p-4\">\n                <p>\n                  This patients was designated unfit for surgery during\n                  Preanesthetic evaluation\n                </p>\n                <div className=\"mt-2 flex space-x-2\">\n                  <button\n                    type=\"button\"\n                    className=\"px-4 py-2 bg-green-600 rounded-sm text-white\"\n                  >\n                    Accept Recommendation\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"px-4 py-2 bg-gray-200 rounded-sm\"\n                  >\n                    Decline\n                  </button>\n                </div>\n                <div className=\"mt-4 flex items-center space-x-5\">\n                  <div>Acknowledge Reason</div>\n                  <div className=\"flex-1\">\n                    <hr />\n                  </div>\n                </div>\n                <div className=\"mt-2 flex space-x-2 text-sm\">\n                  <button\n                    type=\"button\"\n                    className=\"px-2 py-1 bg-gray-200 rounded-sm text-gray-700 shadow-sm\"\n                  >\n                    Consider at next visit\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    className=\"px-2 py-1 bg-gray-200 rounded-sm text-gray-700 shadow-sm\"\n                  >\n                    Consider in 3 months\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    className=\"px-2 py-1 bg-gray-200 rounded-sm text-gray-700 shadow-sm\"\n                  >\n                    Not recommended\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"px-2 py-1 bg-gray-200 rounded-sm text-gray-700 shadow-sm\"\n                  >\n                    Other\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"mt-4\" />\n          <Switch>\n            <Route path={`${match.path}/history`}>\n              <HistoryPage\n                appointment={data?.appointment}\n                onSaveChange={handleSaveChange}\n              />\n            </Route>\n\n            <Route path={`${match.path}/past-medications-allergies`}>\n              <MedicationAllergiesPage\n                patientChartId={data?.appointment.patientChart.id}\n                patientHistoryId={data?.appointment.patient.patientHistory.id}\n                patientId={data?.appointment.patient.id}\n              />\n            </Route>\n\n            <Route path={`${match.path}/chief-complaints`}>\n              <ChiefComplaints\n                patientChart={data?.appointment.patientChart}\n                onSaveChange={handleSaveChange}\n              />\n            </Route>\n\n            <Route path={`${match.path}/vital-signs`}>\n              {data?.appointment.patientChart.id && (\n                <VitalSigns\n                  patientChartId={data?.appointment.patientChart.id}\n                  onSaveChange={handleSaveChange}\n                />\n              )}\n            </Route>\n\n            <Route path={`${match.path}/examination`}>\n              <Examination\n                patientChartId={data?.appointment.patientChart.id}\n                onSaveChange={handleSaveChange}\n              />\n            </Route>\n\n            <Route path={`${match.path}/diagnostics`}>\n              {data?.appointment.patientChart && (\n                <DiagnosticProcedurePage\n                  patientId={data?.appointment.patient.id}\n                  patientChart={data?.appointment.patientChart}\n                  appointmentId={data?.appointment.id}\n                />\n              )}\n            </Route>\n\n            <Route path={`${match.path}/labratory`}>\n              {data?.appointment.patientChart && (\n                <LabPage\n                  patientId={data?.appointment.patient.id}\n                  patientChart={data?.appointment.patientChart}\n                  appointmentId={data?.appointment.id}\n                />\n              )}\n            </Route>\n\n            <Route path={`${match.path}/pre-op`}>\n              <PreOpPage patientChart={data?.appointment.patientChart} />\n            </Route>\n\n            <Route path={`${match.path}/pre-anesthetic`}>\n              {data?.appointment.patientChart && (\n                <PreanestheticPage\n                  patientChart={data.appointment.patientChart}\n                />\n              )}\n            </Route>\n\n            <Route path={`${match.path}/intra-op`}>\n              {data?.appointment.patientChart && (\n                <IntraOpPage patientChart={data?.appointment.patientChart} />\n              )}\n            </Route>\n\n            <Route path={`${match.path}/tx-objective`}>\n              {data?.appointment.patientChart && (\n                <TreatmentObjectivePage\n                  patientChart={data?.appointment.patientChart}\n                />\n              )}\n            </Route>\n\n            <Route path={`${match.path}/diagnosis`}>\n              <Diagnosis\n                patientChart={data?.appointment.patientChart}\n                onSaveChange={handleSaveChange}\n              />\n            </Route>\n\n            <Route path={`${match.path}/differential-diagnosis`}>\n              <DifferentialDiagnosis\n                patientChart={data?.appointment.patientChart}\n                onSaveChange={handleSaveChange}\n              />\n            </Route>\n\n            <Route path={`${match.path}/surgery`}>\n              {data?.appointment.patient.id && (\n                <SurgeryPage\n                  patientId={data?.appointment.patient.id}\n                  patientChart={data?.appointment.patientChart}\n                  appointmentId={data?.appointment.id}\n                />\n              )}\n            </Route>\n\n            <Route path={`${match.path}/tx-plan`}>\n              {data?.appointment.patient.id && (\n                <TreatmentPlanPage\n                  patientId={data?.appointment.patient.id}\n                  patientChart={data?.appointment.patientChart}\n                  appointmentId={data?.appointment.id}\n                />\n              )}\n            </Route>\n\n            <Route path={`${match.path}/rx`}>\n              {data?.appointment.patientChart.id && (\n                <PrescriptionPage\n                  appointmentId={data?.appointment.id}\n                  patientChartId={data?.appointment.patientChart.id}\n                  patientId={data?.appointment.patient.id}\n                />\n              )}\n            </Route>\n\n            <Route path={`${match.path}/follow-up`}>\n              <FollowUpPage appointmentId={data?.appointment.id} />\n            </Route>\n\n            <Route path={`${match.path}/referral`}>\n              <ReferralPage\n                patientId={data?.appointment.patient.id}\n                appointmentId={data?.appointment.id}\n              />\n            </Route>\n\n            <Route path={`${match.path}/summary`}>\n              <SummaryPage\n                appointment={data?.appointment}\n                onSaveChange={handleSaveChange}\n              />\n            </Route>\n\n            <Route path={`${match.path}/patient-details`}>\n              <PatientDetails appointment={data?.appointment} />\n            </Route>\n          </Switch>\n        </div>\n        <div className=\"w-52\">\n          <div>\n            <Stickie\n              stickieNote={data?.appointment.patientChart.stickieNote}\n              patientChartId={data?.appointment.patientChart.id}\n            />\n          </div>\n\n          <div className=\"mt-5\">\n            <VisionSideInfo\n              patientChartId={data?.appointment.patientChart.id}\n            />\n          </div>\n\n          <div className=\"mt-5\">\n            <IopSideInfo patientChartId={data?.appointment.patientChart.id} />\n          </div>\n          <div className=\"mt-5\">\n            <MedicationSideInfo patientId={data?.appointment.patient.id} />\n          </div>\n        </div>\n      </div>\n      <Modal\n        open={lockPatientChart.openConfirmationDialog}\n        title={\"Lock patient chart\"}\n        description={\n          \"You are about to lock this patient chart. Do you want to continue?\"\n        }\n        positive={\"Continue\"}\n        negative={\"Cancel\"}\n        onNegativeClick={() => {\n          setLockPatientChart({\n            openConfirmationDialog: false,\n            confirmation: false,\n          });\n        }}\n        onPositiveClick={() => {\n          setLockPatientChart({\n            openConfirmationDialog: false,\n            confirmation: true,\n          });\n        }}\n        onClose={() => {\n          setLockPatientChart({\n            openConfirmationDialog: false,\n            confirmation: false,\n          });\n        }}\n      />\n    </div>\n  );\n};\n\nconst ClinicalDecisionSupport: React.FC = () => {\n  return (\n    <div className=\"shadow overflow-hidden rounded-lg text-sm\">\n      <p className=\"px-4 py-2 bg-teal-700 text-left text-gray-50 uppercase tracking-wider\">\n        CDS\n      </p>\n      <div className=\"p-2 bg-white\">\n        <ul>\n          <li className=\"flex items-center space-x-2\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n              className=\"w-10 text-yellow-400\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n            <p className=\"text\">\n              This is a test clinicial decision support system\n            </p>\n          </li>\n          <li className=\"flex items-center space-x-2 border-t mt-2\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n              className=\"w-10 text-yellow-400\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n            <p className=\"text\">\n              This is a test clinicial decision support system\n            </p>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nconst DiagnosisComponent: React.FC = () => {\n  return (\n    <div className=\"shadow overflow-hidden rounded-lg text-xs\">\n      <table className=\"w-full\">\n        <thead>\n          <tr>\n            <th\n              scope=\"col\"\n              colSpan={1}\n              className=\"px-3 py-2 bg-teal-700 text-left text-gray-50 uppercase tracking-wider\"\n            >\n              Diagnosis\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200 p-2\">\n          <tr className=\"text-gray-800\">\n            <td className=\"p-2\">ARIC OU</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/NewChatDialog.tsx",["1094"],"import { gql, useQuery, useLazyQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Query,\n  QueryGetCommonChatArgs,\n  QueryUsersArgs,\n} from \"../models/models\";\nimport { ChatUserListItem } from \"./ChatUserListItem\";\n\nconst GET_COMMON_CHAT = gql`\n  query GetCommonChat($recipientID: ID!) {\n    getCommonChat(recipientID: $recipientID) {\n      id\n    }\n  }\n`;\n\nconst GET_USERS = gql`\n  query GetUsers($page: PaginationInput!) {\n    users(page: $page) {\n      edges {\n        node {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n`;\n\ninterface NewChatDialogProps {\n  onNewChat: (recipientId: string) => void;\n  onExistingChat: (chatId: string) => void;\n  onCancel: () => void;\n}\n\nexport const NewChatDialog: React.FC<NewChatDialogProps> = ({\n  onExistingChat,\n  onNewChat,\n  onCancel,\n}) => {\n  const { data } = useQuery<Query, QueryUsersArgs>(GET_USERS, {\n    variables: {\n      page: { page: 0, size: 100 },\n    },\n  });\n\n  const [selectedUserId, setSelectedUserId] = useState<string>();\n  useEffect(() => {\n    if (selectedUserId) {\n      commonChatQuery[0]({\n        variables: {\n          recipientID: selectedUserId,\n        },\n      });\n    }\n  }, [selectedUserId]);\n\n  const commonChatQuery = useLazyQuery<Query, QueryGetCommonChatArgs>(\n    GET_COMMON_CHAT,\n    {\n      onCompleted(data) {\n        if (data.getCommonChat.id) {\n          onExistingChat(data.getCommonChat.id);\n        }\n      },\n      onError(error) {\n        if (selectedUserId) {\n          onNewChat(selectedUserId);\n        }\n      },\n    }\n  );\n\n\n  const handleSelect = (userId: string) => setSelectedUserId(userId);\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"flex justify-between\">\n          <p className=\"text-2xl font-extrabold tracking-wider text-teal-800\">\n            Send message\n          </p>\n\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        <div className=\"mt-4 relative\">\n          <input\n            type=\"search\"\n            className=\"w-full py-3 px-4 shadow-lg rounded-md focus:outline-none\"\n            placeholder=\"Search\"\n          />\n          <button type=\"button\" className=\"absolute right-0 top-0 mt-3 mr-4\">\n            <p className=\"material-icons\">search</p>\n          </button>\n        </div>\n\n        <div className=\"mt-4\">\n          <ul className=\"shadow-lg\">\n            {data?.users.edges.map((e, i) => (\n              <ChatUserListItem\n                key={e?.node.id}\n                user={e?.node}\n                first={i === 0}\n                onSelect={handleSelect}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/DiagnosticOrdersTable.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/ReferralPage.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/PreOpPage.tsx",["1095"],"import React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { PatientChart, SurgicalProcedureInput } from \"../../models/models\";\nimport { AppointmentContext } from \"../../_context/AppointmentContext\";\nimport IndexedDb from \"../../_db\";\n\ninterface Props {\n  patientChart: PatientChart | undefined;\n}\n\nexport const PreOpPage: React.FC<Props> = ({ patientChart }) => {\n  const { register, reset, watch } = useForm<SurgicalProcedureInput>({\n    defaultValues: {\n      patientChartId: patientChart?.id,\n    },\n  });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    const surgicalProcedure = patientChart?.surgicalProcedure;\n    if (surgicalProcedure !== undefined) {\n      reset({\n        rightCorrected: surgicalProcedure.rightCorrected,\n        leftCorrected: surgicalProcedure.leftCorrected,\n        rightIop: surgicalProcedure.rightIop,\n        leftIop: surgicalProcedure.leftIop,\n        rightAnteriorSegment: surgicalProcedure.rightAnteriorSegment,\n        leftAnteriorSegment: surgicalProcedure.leftAnteriorSegment,\n        rightPosteriorSegment: surgicalProcedure.rightPosteriorSegment,\n        leftPosteriorSegment: surgicalProcedure.leftPosteriorSegment,\n        rightBiometry: surgicalProcedure.rightBiometry,\n        leftBiometry: surgicalProcedure.leftBiometry,\n        bloodPressure: surgicalProcedure.bloodPressure,\n        bloodSugar: surgicalProcedure.bloodSugar,\n        uriAnalysis: surgicalProcedure.uriAnalysis,\n        diabetes: surgicalProcedure.diabetes,\n        asthma: surgicalProcedure.asthma,\n        hpn: surgicalProcedure.hpn,\n        cardiacDisease: surgicalProcedure.cardiacDisease,\n        allergies: surgicalProcedure.allergies,\n      });\n    }\n  }, [patientChart?.surgicalProcedure]);\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChart?.id) {\n      const runIndexDb = async () => {\n        const surgicalProcedure: any = {\n          ...data,\n          patientChartId: patientChart?.id.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(\n            surgicalProcedure,\n            \"surgical_procedure\",\n            patientChart.id\n          )\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChart?.id]);\n\n  return (\n    <div className=\"container mx-auto bg-gray-50 rounded shadow-lg p-5\">\n      <div className=\"text-2xl text-gray-600 font-semibold\">{`${patientChart?.surgicalProcedure.surgicalProcedureType.title} Pre-op`}</div>\n\n      <hr className=\"mt-5\" />\n\n      <div className=\"grid grid-cols-3 gap-x-16 gap-y-7 mt-5\">\n        <div className=\"col-span-1\"></div>\n        <div className=\"col-span-1 text-center\">OD</div>\n        <div className=\"col-span-1 text-center\">OS</div>\n\n        <div className=\"col-span-1\">\n          <p className=\"text-gray-600 tracking-wide\">Corrected</p>\n        </div>\n\n        <div className=\"col-span-1\">\n          <input\n            type=\"text\"\n            name=\"rightCorrected\"\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n          />\n        </div>\n\n        <div className=\"col-span-1\">\n          <input\n            type=\"text\"\n            name=\"leftCorrected\"\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n          />\n        </div>\n\n        <div className=\"col-span-1\">\n          <p className=\"text-gray-600 tracking-wide\">IOP</p>\n        </div>\n\n        <div className=\"col-span-1\">\n          <input\n            type=\"text\"\n            name=\"rightIop\"\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n          />\n        </div>\n\n        <div className=\"col-span-1\">\n          <input\n            type=\"text\"\n            name=\"leftIop\"\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n          />\n        </div>\n\n        <div className=\"col-span-1\">\n          <p className=\"text-gray-600 tracking-wide\">Anterior Segment</p>\n        </div>\n\n        <div className=\"col-span-1\">\n          <input\n            type=\"text\"\n            name=\"rightAnteriorSegment\"\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n          />\n        </div>\n\n        <div className=\"col-span-1\">\n          <input\n            type=\"text\"\n            name=\"leftAnteriorSegment\"\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n          />\n        </div>\n\n        <div className=\"col-span-1\">\n          <p className=\"text-gray-600 tracking-wide\">Posterior Segment</p>\n        </div>\n\n        <div className=\"col-span-1\">\n          <input\n            type=\"text\"\n            name=\"rightPosteriorSegment\"\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n          />\n        </div>\n\n        <div className=\"col-span-1\">\n          <input\n            type=\"text\"\n            name=\"leftPosteriorSegment\"\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n          />\n        </div>\n\n        <div className=\"col-span-1\">\n          <p className=\"text-gray-600 tracking-wide\">Biometry</p>\n        </div>\n\n        <div className=\"col-span-1\">\n          <input\n            type=\"text\"\n            name=\"rightBiometry\"\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n          />\n        </div>\n\n        <div className=\"col-span-1\">\n          <input\n            type=\"text\"\n            name=\"leftBiometry\"\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n          />\n        </div>\n      </div>\n\n      <div className=\"text-2xl text-gray-600 font-semibold mt-8\">\n        System check\n      </div>\n\n      <div className=\"mt-4\">\n        <input\n          type=\"text\"\n          name=\"bloodPressure\"\n          placeholder=\"Blood pressure\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n        />\n      </div>\n\n      <div className=\"mt-4\">\n        <input\n          type=\"text\"\n          name=\"bloodSugar\"\n          placeholder=\"Blood sugar\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n        />\n      </div>\n\n      <div className=\"mt-4\">\n        <input\n          type=\"text\"\n          name=\"uriAnalysis\"\n          placeholder=\"Uri analysis\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n        />\n      </div>\n\n      <div className=\"text-2xl text-gray-600 font-semibold mt-8\">\n        Systemic Illnesses\n      </div>\n\n      <div className=\"mt-4\">\n        <input\n          type=\"text\"\n          name=\"diabetes\"\n          placeholder=\"Diabetes\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n        />\n      </div>\n\n      <div className=\"mt-4\">\n        <input\n          type=\"text\"\n          name=\"asthma\"\n          placeholder=\"Asthma\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n        />\n      </div>\n\n      <div className=\"mt-4\">\n        <input\n          type=\"text\"\n          name=\"hpn\"\n          placeholder=\"HPN\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n        />\n      </div>\n\n      <div className=\"mt-4\">\n        <input\n          type=\"text\"\n          name=\"cardiacDisease\"\n          placeholder=\"Cardiac disease\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n        />\n      </div>\n\n      <div className=\"mt-4\">\n        <input\n          type=\"text\"\n          name=\"allergies\"\n          placeholder=\"Allergies\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n        />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/SideNav.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/HistoryPage.tsx",["1096","1097","1098"],"import { useLazyQuery, useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useEffect, useState } from \"react\";\nimport classnames from \"classnames\";\nimport { HistoryComponent } from \"../../components/HistoryComponent\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport { UpdatePastIllnessForm } from \"../../components/UpdatePastIllnessForm\";\nimport { SavePastIllnessForm } from \"../../components/SavePastIllnessForm\";\nimport { SavePastHospitalizationForm } from \"../../components/SavePastHospitalizationForm\";\nimport { UpdatePastHospitalizationForm } from \"../../components/UpdatePastHospitalizationForm\";\nimport { format, parseISO } from \"date-fns\";\nimport { SavePastInjuryForm } from \"../../components/SavePastInjuryForm\";\nimport { UpdatePastInjuryForm } from \"../../components/UpdatePastInjuryForm\";\nimport { SavePastSurgeryForm } from \"../../components/SavePastSurgeryForm\";\nimport { UpdatePastSurgeryForm } from \"../../components/UpdatePastSurgeryForm\";\nimport { SaveFamilyIllnessForm } from \"../../components/SaveFamilyIllnessForm\";\nimport { UpdateFamilyIllnessForm } from \"../../components/UpdateFamilyIllnessForm\";\nimport { SaveLifestyleForm } from \"../../components/SaveLifestyleForm\";\nimport { UpdateLifestyleForm } from \"../../components/UpdateLifestyleForm\";\nimport {\n  Appointment,\n  MutationDeleteFamilyIllnessArgs,\n  MutationDeleteLifestyleArgs,\n  MutationDeletePastHospitalizationArgs,\n  MutationDeletePastIllnessArgs,\n  MutationDeletePastInjuryArgs,\n  MutationDeletePastSurgeryArgs,\n  Query,\n  QueryPastIllnessesArgs,\n} from \"../../models/models\";\nimport { AppointmentContext } from \"../../_context/AppointmentContext\";\nimport {\n  FileUploader,\n  FileUploaderComponent,\n} from \"../../components/FileUploaderComponent\";\n\nconst GET_HISTORY = gql`\n  query GetHistory($patientHistoryId: ID!, $patientId: ID!) {\n    pastIllnesses(patientHistoryId: $patientHistoryId) {\n      id\n      title\n      description\n    }\n    pastInjuries(patientHistoryId: $patientHistoryId) {\n      id\n      description\n      injuryDate\n    }\n    pastHospitalizations(patientHistoryId: $patientHistoryId) {\n      id\n      reason\n      provider\n      from\n      to\n    }\n    pastSurgeries(patientHistoryId: $patientHistoryId) {\n      id\n      description\n      surgeryDate\n    }\n    lifestyles(patientHistoryId: $patientHistoryId) {\n      id\n      title\n      description\n      note\n    }\n    familyIllnesses(patientHistoryId: $patientHistoryId) {\n      id\n      title\n      description\n    }\n    patient(id: $patientId) {\n      id\n      paperRecordDocumentId\n      paperRecordDocument {\n        id\n        size\n        hash\n        fileName\n        extension\n        contentType\n        createdAt\n      }\n    }\n  }\n`;\n\nconst DELETE_PAST_ILLNESS = gql`\n  mutation DeletePastIllness($id: ID!) {\n    deletePastIllness(id: $id)\n  }\n`;\n\nconst DELETE_PAST_HOSPITALIZATION = gql`\n  mutation DeleteHospitalization($id: ID!) {\n    deletePastHospitalization(id: $id)\n  }\n`;\n\nconst DELETE_PAST_INJURY = gql`\n  mutation DeletePastInjury($id: ID!) {\n    deletePastInjury(id: $id)\n  }\n`;\n\nconst DELETE_PAST_SURGERY = gql`\n  mutation DeletePastSurgery($id: ID!) {\n    deletePastSurgery(id: $id)\n  }\n`;\n\nconst DELETE_FAMILY_ILLNESS = gql`\n  mutation DeleteFamillyIllness($id: ID!) {\n    deleteFamilyIllness(id: $id)\n  }\n`;\n\nconst DELETE_LIFESTYLE = gql`\n  mutation DeleteLifestyle($id: ID!) {\n    deleteLifestyle(id: $id)\n  }\n`;\n\nexport const HistoryPage: React.FC<{\n  isEdit?: boolean;\n  appointment: Appointment | undefined;\n  onSaveChange: (saving: boolean) => void;\n}> = ({ isEdit = true, appointment, onSaveChange }) => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n  const [paperRecordDocuments, setPaperRecordDocuments] = useState<\n    Array<FileUploader>\n  >([]);\n\n  const historyLazyQuery = useLazyQuery<Query, any>(GET_HISTORY);\n\n  useEffect(() => {\n    if (appointment !== undefined) {\n      historyLazyQuery[0]({\n        variables: {\n          patientHistoryId: appointment.patient.patientHistory.id,\n          patientId: appointment.patient.id,\n        },\n      });\n    }\n  }, [appointment]);\n\n  useEffect(() => {\n    const paperRecordDocument =\n      historyLazyQuery[1].data?.patient.paperRecordDocument;\n\n    if (paperRecordDocument) {\n      const record = {\n        id: paperRecordDocument.id,\n        fileUrl: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/files/${paperRecordDocument.fileName}_${paperRecordDocument.hash}.${paperRecordDocument.extension}`,\n        name: paperRecordDocument.fileName ?? \"\",\n        size: paperRecordDocument.size,\n        createdAt: paperRecordDocument.createdAt,\n        contentType: paperRecordDocument.contentType ?? \"\",\n      };\n\n      setPaperRecordDocuments([record]);\n    }\n  }, [historyLazyQuery]);\n\n  const history = historyLazyQuery[1].data;\n\n  const handleRefresh = () => {\n    if (historyLazyQuery[1].refetch !== undefined) {\n      historyLazyQuery[1].refetch();\n    }\n  };\n\n  const hasPastIllnesses =\n    history?.pastIllnesses && history?.pastIllnesses.length > 0;\n  const hasPastInjuries =\n    history?.pastInjuries && history?.pastInjuries.length > 0;\n  const hasPastHospitalizations =\n    history?.pastHospitalizations && history?.pastHospitalizations.length > 0;\n  const hasPastSurgeries =\n    history?.pastSurgeries && history?.pastSurgeries.length > 0;\n  const hasLifestyles = history?.lifestyles && history?.lifestyles.length > 0;\n  const hasFamilyIllnesses =\n    history?.familyIllnesses && history?.familyIllnesses.length > 0;\n\n  const hasHistory =\n    hasPastIllnesses ||\n    hasPastInjuries ||\n    hasPastHospitalizations ||\n    hasPastSurgeries ||\n    hasLifestyles ||\n    hasFamilyIllnesses;\n\n  const [deletePastIllness] = useMutation<any, MutationDeletePastIllnessArgs>(\n    DELETE_PAST_ILLNESS,\n    {\n      onCompleted(data) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Past Illness deleted successfully\",\n          variant: \"success\",\n        });\n\n        onSaveChange(false);\n        handleRefresh();\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deletePastHospitalization] = useMutation<\n    any,\n    MutationDeletePastHospitalizationArgs\n  >(DELETE_PAST_HOSPITALIZATION, {\n    onCompleted(data) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Success\",\n        notifSubTitle: \"Past Hospitalization deleted successfully\",\n        variant: \"success\",\n      });\n\n      onSaveChange(false);\n      handleRefresh();\n    },\n    onError(error) {\n      onSaveChange(false);\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [deletePastInjury] = useMutation<any, MutationDeletePastInjuryArgs>(\n    DELETE_PAST_INJURY,\n    {\n      onCompleted(data) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Past Injury deleted successfully\",\n          variant: \"success\",\n        });\n\n        onSaveChange(false);\n        handleRefresh();\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deletePastSurgery] = useMutation<any, MutationDeletePastSurgeryArgs>(\n    DELETE_PAST_SURGERY,\n    {\n      onCompleted(data) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Past Injury deleted successfully\",\n          variant: \"success\",\n        });\n\n        onSaveChange(false);\n        handleRefresh();\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteFamilyIllness] = useMutation<\n    any,\n    MutationDeleteFamilyIllnessArgs\n  >(DELETE_FAMILY_ILLNESS, {\n    onCompleted(data) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Success\",\n        notifSubTitle: \"Family Illness deleted successfully\",\n        variant: \"success\",\n      });\n\n      onSaveChange(false);\n      handleRefresh();\n    },\n    onError(error) {\n      onSaveChange(false);\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [deleteLifestyle] = useMutation<any, MutationDeleteLifestyleArgs>(\n    DELETE_LIFESTYLE,\n    {\n      onCompleted(data) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Lifestyle deleted successfully\",\n          variant: \"success\",\n        });\n\n        onSaveChange(false);\n        handleRefresh();\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  return (\n    <div\n      className={classnames(\"bg-gray-50\", {\n        \"rounded shadow-lg p-5\": isEdit,\n      })}\n    >\n      <div className=\"text-xl text-gray-600 font-semibold\">History</div>\n\n      <hr className=\"mt-3\" />\n\n      <div\n        hidden={isEdit || hasHistory}\n        className=\"text-center text-gray-500 mt-5\"\n      >\n        Nothing here yet\n      </div>\n\n      {paperRecordDocuments?.length > 0 && (\n        <div className=\"mt-5\">\n          <label className=\"block text-sm font-medium text-gray-700\">\n            Paper record\n          </label>\n          <div className=\"mt-2\">\n            <FileUploaderComponent\n              multiSelect={false}\n              accept={\"image\"}\n              values={paperRecordDocuments}\n              onChange={() => {}}\n              onDelete={() => {}}\n              disabled={true}\n            />\n          </div>\n        </div>\n      )}\n\n      <div hidden={!isEdit && !hasPastIllnesses} className=\"mt-5\">\n        <HistoryComponent\n          title=\"Illnesses\"\n          items={history?.pastIllnesses.map((e) => ({\n            ...e,\n            subTitle: e?.description,\n          }))}\n          isEdit={isEdit}\n          onAdd={() => {\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 500,\n              children: (\n                <SavePastIllnessForm\n                  patientHistoryId={appointment?.patient.patientHistory.id}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Past Illness saved successfully\",\n                      variant: \"success\",\n                    });\n\n                    handleRefresh();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                  onSaveChange={onSaveChange}\n                />\n              ),\n            });\n          }}\n          onUpdate={(item) => {\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 500,\n              children: (\n                <UpdatePastIllnessForm\n                  values={item}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Past Illness saved successfully\",\n                      variant: \"success\",\n                    });\n\n                    handleRefresh();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                  onSaveChange={onSaveChange}\n                />\n              ),\n            });\n          }}\n          onDelete={(id: string) => {\n            onSaveChange(true);\n            deletePastIllness({ variables: { id } });\n          }}\n        />\n      </div>\n\n      <div hidden={!isEdit && !hasPastHospitalizations} className=\"mt-5\">\n        <HistoryComponent\n          title=\"Hospitalizations\"\n          items={history?.pastHospitalizations.map((e) => ({\n            ...e,\n            title: e?.reason,\n            subTitle: e?.provider,\n            subTitle2: e?.from && e?.to && (\n              <p className=\"text-gray-500 text-sm\">{`From ${format(\n                parseISO(e?.from),\n                \"dd/MM/yyyy\"\n              )} to ${format(parseISO(e?.to), \"dd/MM/yyyy\")}`}</p>\n            ),\n          }))}\n          isEdit={isEdit}\n          onAdd={() => {\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 500,\n              children: (\n                <SavePastHospitalizationForm\n                  patientHistoryId={appointment?.patient.patientHistory.id}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Past Hospitalization saved successfully\",\n                      variant: \"success\",\n                    });\n\n                    handleRefresh();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                  onSaveChange={onSaveChange}\n                />\n              ),\n            });\n          }}\n          onUpdate={(item) => {\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 500,\n              children: (\n                <UpdatePastHospitalizationForm\n                  values={item}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Past Hospitalization saved successfully\",\n                      variant: \"success\",\n                    });\n\n                    handleRefresh();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                  onSaveChange={onSaveChange}\n                />\n              ),\n            });\n          }}\n          onDelete={(id: string) => {\n            onSaveChange(true);\n            deletePastHospitalization({ variables: { id } });\n          }}\n        />\n      </div>\n\n      <div hidden={!isEdit && !hasPastInjuries} className=\"mt-5\">\n        <HistoryComponent\n          title=\"Injuries\"\n          items={history?.pastInjuries.map((e) => ({\n            ...e,\n            title: e?.description,\n          }))}\n          isEdit={isEdit}\n          onAdd={() => {\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 500,\n              children: (\n                <SavePastInjuryForm\n                  patientHistoryId={appointment?.patient.patientHistory.id}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Past Injury saved successfully\",\n                      variant: \"success\",\n                    });\n\n                    handleRefresh();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                  onSaveChange={onSaveChange}\n                />\n              ),\n            });\n          }}\n          onUpdate={(item) => {\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 500,\n              children: (\n                <UpdatePastInjuryForm\n                  values={item}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Past Injuries saved successfully\",\n                      variant: \"success\",\n                    });\n\n                    handleRefresh();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                  onSaveChange={onSaveChange}\n                />\n              ),\n            });\n          }}\n          onDelete={(id: string) => {\n            onSaveChange(true);\n            deletePastInjury({ variables: { id } });\n          }}\n        />\n      </div>\n\n      <div hidden={!isEdit && !hasPastSurgeries} className=\"mt-5\">\n        <HistoryComponent\n          title=\"Surgeries\"\n          items={history?.pastSurgeries.map((e) => ({\n            ...e,\n            title: e?.description,\n            subTitle:\n              e?.surgeryDate && format(parseISO(e?.surgeryDate), \"dd/MM/yyyy\"),\n          }))}\n          isEdit={isEdit}\n          onAdd={() => {\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 500,\n              children: (\n                <SavePastSurgeryForm\n                  patientHistoryId={appointment?.patient.patientHistory.id}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Past surgery saved successfully\",\n                      variant: \"success\",\n                    });\n\n                    handleRefresh();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                  onSaveChange={onSaveChange}\n                />\n              ),\n            });\n          }}\n          onUpdate={(item) => {\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 500,\n              children: (\n                <UpdatePastSurgeryForm\n                  values={item}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Past surgery saved successfully\",\n                      variant: \"success\",\n                    });\n\n                    handleRefresh();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                  onSaveChange={onSaveChange}\n                />\n              ),\n            });\n          }}\n          onDelete={(id: string) => {\n            onSaveChange(true);\n            deletePastSurgery({ variables: { id } });\n          }}\n        />\n      </div>\n\n      <div hidden={!isEdit && !hasFamilyIllnesses} className=\"mt-5\">\n        <HistoryComponent\n          title=\"Family Illness\"\n          items={history?.familyIllnesses.map((e) => ({\n            ...e,\n            title: e?.title,\n            subTitle: e?.description,\n          }))}\n          isEdit={isEdit}\n          onAdd={() => {\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 500,\n              children: (\n                <SaveFamilyIllnessForm\n                  patientHistoryId={appointment?.patient.patientHistory.id}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Family Illness saved successfully\",\n                      variant: \"success\",\n                    });\n\n                    handleRefresh();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                  onSaveChange={onSaveChange}\n                />\n              ),\n            });\n          }}\n          onUpdate={(item) => {\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 500,\n              children: (\n                <UpdateFamilyIllnessForm\n                  values={item}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Family illness saved successfully\",\n                      variant: \"success\",\n                    });\n\n                    handleRefresh();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                  onSaveChange={onSaveChange}\n                />\n              ),\n            });\n          }}\n          onDelete={(id: string) => {\n            onSaveChange(true);\n            deleteFamilyIllness({ variables: { id } });\n          }}\n        />\n      </div>\n\n      <div hidden={!isEdit && !hasLifestyles} className=\"mt-5\">\n        <HistoryComponent\n          title=\"Lifestyle\"\n          items={history?.lifestyles.map((e) => ({\n            ...e,\n            title: e?.title,\n            subTitle: e?.description,\n            subTitle2: e?.note,\n          }))}\n          isEdit={isEdit}\n          onAdd={() => {\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 500,\n              children: (\n                <SaveLifestyleForm\n                  patientHistoryId={appointment?.patient.patientHistory.id}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Lifestyle saved successfully\",\n                      variant: \"success\",\n                    });\n\n                    handleRefresh();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                  onSaveChange={onSaveChange}\n                />\n              ),\n            });\n          }}\n          onUpdate={(item) => {\n            bottomSheetDispatch({\n              type: \"show\",\n              snapPoint: 500,\n              children: (\n                <UpdateLifestyleForm\n                  values={item}\n                  onSuccess={() => {\n                    bottomSheetDispatch({ type: \"hide\" });\n\n                    notifDispatch({\n                      type: \"show\",\n                      notifTitle: \"Success\",\n                      notifSubTitle: \"Lifestyle saved successfully\",\n                      variant: \"success\",\n                    });\n\n                    handleRefresh();\n                  }}\n                  onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                  onSaveChange={onSaveChange}\n                />\n              ),\n            });\n          }}\n          onDelete={(id: string) => {\n            onSaveChange(true);\n            deleteLifestyle({ variables: { id } });\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/Accordion/index.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateAllergyForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/EyeGlassTable.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/CoverTestComponent.tsx",["1099","1100","1101"],"import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { AUTO_SAVE_INTERVAL } from \"..\";\nimport IndexedDb from \"../_db\";\nimport { CoverTest, CoverTestInput } from \"../models/models\";\nimport AutocompleteInput from \"./AutocompleteInput\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\ninterface Props {\n  patientChartId: string | undefined;\n  values: CoverTest | undefined;\n}\n\nexport const CoverTestComponent: React.FC<Props> = ({\n  values,\n  patientChartId,\n}) => {\n  const { register, reset, watch, control, setValue } = useForm<CoverTestInput>(\n    {\n      defaultValues: {\n        patientChartId: patientChartId,\n      },\n    }\n  );\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    if (values !== undefined) {\n      reset({\n        rightCoverTest: values.rightCoverTest ?? \"\",\n        leftCoverTest: values.leftCoverTest ?? \"\",\n        note: values.note ?? \"\",\n      });\n    }\n  }, [values]);\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChartId) {\n      const runIndexDb = async () => {\n        const coverTest: any = {\n          ...data,\n          patientChartId: patientChartId.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(coverTest, \"cover_test\", patientChartId)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChartId]);\n\n  return (\n    <div className=\"grid grid-cols-5 gap-y-6 gap-x-6 justify-items-stretch\">\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Cover Test</p>\n      </div>\n\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightCoverTest\"\n          uri=\"right_cover_test\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftCoverTest\"\n          uri=\"left_cover_test\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Note</p>\n      </div>\n      <div className=\"col-span-4\">\n        <textarea\n          name=\"note\"\n          ref={register}\n          rows={3}\n          disabled={patientChartLocked[0]}\n          className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n        />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/IopForm.tsx",["1102","1103","1104"],"import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { AUTO_SAVE_INTERVAL } from \"..\";\nimport IndexedDb from \"../_db\";\nimport { Iop, IopInput } from \"../models/models\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\ninterface IopProps {\n  patientChartId: string | undefined;\n  values: Iop | undefined;\n}\n\nexport const IopForm: React.FC<IopProps> = ({ values, patientChartId }) => {\n  const { register, reset, watch } = useForm<IopInput>({\n    defaultValues: {\n      patientChartId: patientChartId,\n    },\n  });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    if (values !== undefined) {\n      reset({\n        rightNoncontact: values.rightNoncontact,\n        leftNoncontact: values.leftNoncontact,\n        rightApplanation: values.rightApplanation,\n        leftApplanation: values.leftApplanation,\n        rightTonopen: values.rightTonopen,\n        leftTonopen: values.leftTonopen,\n        rightDigital: values.rightDigital,\n        leftDigital: values.leftDigital,\n      });\n    }\n  }, [values]);\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChartId) {\n      const runIndexDb = async () => {\n        const iop: any = {\n          ...data,\n          patientChartId: patientChartId.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(iop, \"iop\", patientChartId)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChartId]);\n\n  return (\n    <div className=\"grid grid-cols-5 gap-y-6 gap-x-6 justify-items-stretch\">\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Non-Contact</p>\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"rightNoncontact\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"leftNoncontact\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Applanation</p>\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"rightApplanation\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"leftApplanation\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Tonopen</p>\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"rightTonopen\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"leftTonopen\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Digital</p>\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"rightDigital\"\n          ref={register}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <input\n          type=\"text\"\n          name=\"leftDigital\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n        />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AutocompleteInput.tsx",["1105"],"import React, { useEffect, useState } from \"react\";\nimport \"./AutcompleteInput.css\";\nimport classnames from \"classnames\";\nimport { useWatch } from \"react-hook-form\";\n\ninterface Props {\n  name: string;\n  type: string;\n  register: any;\n  uri: string;\n  setFormValue: any;\n  control: any;\n  disabled?: boolean;\n  onInputChange?: () => void;\n}\n\nexport default function AutocompleteInput(props: Props) {\n  const {\n    name,\n    type,\n    register,\n    uri,\n    control,\n    disabled,\n    setFormValue,\n    onInputChange,\n  } = props;\n\n  const [suggestions, setSuggestions] = useState<Array<string>>([]);\n  const [activeSuggestion, setActiveSuggestion] = useState(0);\n  const [filteredSuggestions, setFilteredSuggestions] = useState<Array<string>>(\n    []\n  );\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  const userInput = useWatch({\n    control,\n    name: name,\n    defaultValue: \"\",\n  });\n\n  useEffect(() => {\n    onInputChange && onInputChange();\n\n    if (userInput && userInput.length > 0) {\n      const payload = {\n        suggest: {\n          autocomplete: {\n            prefix: userInput,\n            completion: {\n              field: \"suggest\",\n              skip_duplicates: true,\n            },\n          },\n        },\n      };\n\n      fetch(\n        `${window.__RUNTIME_CONFIG__.REACT_APP_ELASTICSEARCH_URL}/${uri}/_search?size=5`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(payload),\n        }\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          const autocomplete = data.suggest.autocomplete.find(\n            (e: any) => e.text === userInput\n          );\n\n          if (autocomplete) {\n            const suggestions = autocomplete.options.map((e: any) => e.text);\n            setSuggestions(suggestions);\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }, [userInput]);\n\n  const onChange = (e: any) => {\n    const filteredSuggestions = suggestions.filter(\n      (suggestion) =>\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n\n    setActiveSuggestion(0);\n    setFilteredSuggestions(filteredSuggestions);\n    setShowSuggestions(true);\n\n    onInputChange && onInputChange();\n  };\n\n  const onClick = (e: any) => {\n    setActiveSuggestion(0);\n    setFilteredSuggestions([]);\n    setShowSuggestions(false);\n    setFormValue(name, e.currentTarget.innerText);\n  };\n\n  const onKeyDown = (e: any) => {\n    if (e.keyCode === 13) {\n      setActiveSuggestion(0);\n      setShowSuggestions(false);\n      setFormValue(name, filteredSuggestions[activeSuggestion]);\n    } else if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n      setActiveSuggestion(activeSuggestion - 1);\n    } else if (e.keyCode === 40) {\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\n        return;\n      }\n\n      setActiveSuggestion(activeSuggestion + 1);\n    }\n  };\n\n  let suggestionsListComponent;\n\n  if (showSuggestions && userInput) {\n    if (filteredSuggestions.length) {\n      suggestionsListComponent = (\n        <ul className=\"mt-1 max-h-36 overflow-y-auto pl-0 border rounded-md rounded-t-none shadow-lg absolute w-full z-20\">\n          {filteredSuggestions.map((suggestion, index) => {\n            return (\n              <li\n                className={classnames(\"py-2 pl-3 cursor-pointer \", {\n                  \"bg-gray-100 text-gray-600 \": index === activeSuggestion,\n                  \"hover:bg-gray-200 bg-white\": index !== activeSuggestion,\n                })}\n                key={suggestion}\n                onClick={onClick}\n              >\n                {suggestion}\n              </li>\n            );\n          })}\n        </ul>\n      );\n    } else {\n      suggestionsListComponent = <div></div>;\n    }\n  }\n\n  return (\n    <div className=\"relative\">\n      <input\n        type={type}\n        name={name}\n        onKeyDown={onKeyDown}\n        ref={register}\n        onChange={onChange}\n        autoComplete=\"off\"\n        disabled={disabled}\n        className=\"border-gray-300 rounded-lg shadow-sm w-full\"\n      />\n      {suggestionsListComponent}\n    </div>\n  );\n}\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/reportWebVitals.ts",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/cache.ts",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/notification.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/protected_route.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/RegisterPage.tsx",["1106"],"import Reac from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { UserRegistrationForm } from \"../components/UserRegistrationForm\";\n\nexport const RegisterPage: React.FC = () => {\n  const history = useHistory();\n\n  const handleRegistrationSuccess = () => {\n    history.replace(\"/\");\n  };\n\n  return (\n    <div className=\"h-screen w-screen bg-gray-600 p-16\">\n      <div className=\"h-full w-full bg-white rounded-lg shadow-xl p-5 overflow-scroll\">\n        <UserRegistrationForm onSuccess={handleRegistrationSuccess} />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/_repository/index.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/_db/index.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/DiagnosticOrdersPage.tsx",["1107"],"import { gql, useQuery } from \"@apollo/client\";\nimport React, { useState, useEffect } from \"react\";\nimport { OrdersToolbar } from \"../components/OrdersToolbar\";\nimport { DiagnosticOrdersTable } from \"../components/DiagnosticOrdersTable\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { useNotificationDispatch } from \"../notification\";\nimport {\n  DiagnosticProcedureOrder,\n  OrderFilterInput,\n  PaginationInput,\n  Query,\n  QuerySearchDiagnosticProcedureOrdersArgs,\n} from \"../models/models\";\nimport { CompleteDiagnosticOrderForm } from \"../components/CompleteDiagnosticOrderForm\";\nimport { useLocation } from \"react-router-dom\";\n\nconst SEARCH_DIAGNOSTIC_ORDERS = gql`\n  query SearchDiagnosticOrders(\n    $page: PaginationInput!\n    $filter: DiagnosticProcedureOrderFilter\n    $date: Time\n    $searchTerm: String\n  ) {\n    searchDiagnosticProcedureOrders(\n      page: $page\n      filter: $filter\n      date: $date\n      searchTerm: $searchTerm\n    ) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          firstName\n          lastName\n          phoneNo\n          userName\n          patientId\n          orderedBy {\n            id\n            firstName\n            lastName\n          }\n          diagnosticProcedures {\n            id\n            diagnosticProcedureType {\n              title\n            }\n            payments {\n              id\n              status\n              invoiceNo\n              billing {\n                id\n                item\n                code\n                price\n                credit\n              }\n            }\n          }\n          status\n          createdAt\n        }\n      }\n    }\n  }\n`;\n\nexport const PAYMENT_WAIVER_REQUEST = gql`\n  mutation PaymentWaiverRequest($input: PaymentWaiverInput!) {\n    savePaymentWaiver(input: $input) {\n      id\n    }\n  }\n`;\n\nfunction useRouterQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport const DiagnosticOrdersPage: React.FC = () => {\n  const query = useRouterQuery();\n  const queryUserId = query.get(\"userId\");\n  const queryStatus = query.get(\"status\");\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const [filter, setFilter] = useState<OrderFilterInput>({\n    date: new Date(),\n    userId: queryUserId === null ? \"all\" : queryUserId,\n    status: queryStatus === null ? \"all\" : queryStatus,\n    searchTerm: \"\",\n  });\n\n  const { data, refetch } = useQuery<\n    Query,\n    QuerySearchDiagnosticProcedureOrdersArgs\n  >(SEARCH_DIAGNOSTIC_ORDERS, {\n    variables: {\n      page: paginationInput,\n      filter: {\n        orderedById: filter.userId === \"all\" ? undefined : filter.userId,\n        status: filter.status === \"all\" ? undefined : filter.status,\n      },\n      searchTerm:\n        filter.searchTerm?.length === 0 ? undefined : filter.searchTerm,\n      date: filter.date,\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [filter, paginationInput]);\n\n  const handleClear = () => {\n    setFilter({\n      date: new Date(),\n      userId: \"all\",\n      status: \"all\",\n    });\n  };\n\n  const handleNextClick = () => {\n    const totalPages =\n      data?.searchDiagnosticProcedureOrders.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleOrderClick = (order: DiagnosticProcedureOrder) => {\n    bottomSheetDispatch({\n      type: \"show\",\n      snapPoint: 0,\n      children: (\n        <CompleteDiagnosticOrderForm\n          selectedOrder={order}\n          onSuccess={() => {\n            refetch();\n            notifDispatch({\n              type: \"show\",\n              notifTitle: \"Success\",\n              notifSubTitle: \"Receipt printed successfully\",\n              variant: \"success\",\n            });\n            bottomSheetDispatch({ type: \"hide\" });\n          }}\n          onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n          onRefresh={() => {\n            refetch();\n          }}\n        />\n      ),\n    });\n  };\n\n  return (\n    <div className=\"h-screen\">\n      <OrdersToolbar\n        filter={filter}\n        onClear={handleClear}\n        onChange={setFilter}\n      />\n\n      <DiagnosticOrdersTable\n        totalCount={data?.searchDiagnosticProcedureOrders.totalCount ?? 0}\n        orders={\n          data?.searchDiagnosticProcedureOrders.edges.map((e) => e.node) ?? []\n        }\n        onNext={handleNextClick}\n        onPrev={handlePrevClick}\n        onItemClick={handleOrderClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/ClinicianHome.tsx",["1108"],"import React, { useEffect, useState } from \"react\";\nimport { StatCard } from \"../components/stat_card\";\nimport { WorkflowTable } from \"../components/WorkflowTable\";\nimport { useHistory } from \"react-router-dom\";\nimport { Page } from \"../models/page\";\nimport { Appointment, Order, Query } from \"../models/models\";\nimport { ProviderOrdersTable } from \"../components/ProviderOrdersTable\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { parseJwt } from \"../util\";\n\nconst HOME_STATS = gql`\n  query HomeStats {\n    nurseHomeStats {\n      scheduled\n      checkedIn\n      checkedOut\n    }\n    physicianHomeStats {\n      scheduled\n      checkedIn\n      checkedOut\n    }\n  }\n`;\n\nexport const ClinicianHome: React.FC<{ onAddPage: (page: Page) => void }> = ({\n  onAddPage,\n}) => {\n  const history = useHistory();\n  const homeStats = useQuery<Query>(HOME_STATS);\n  const [stats, setStats] = useState({\n    scheduled: 0,\n    checkedIn: 0,\n    checkedOut: 0,\n  });\n\n  useEffect(() => {\n    const token = sessionStorage.getItem(\"accessToken\");\n\n    if (token !== null) {\n      const claim = parseJwt(token);\n\n      if (claim.UserType.includes(\"Physician\")) {\n        setStats({\n          scheduled: homeStats.data?.physicianHomeStats.scheduled ?? 0,\n          checkedIn: homeStats.data?.physicianHomeStats.checkedIn ?? 0,\n          checkedOut: homeStats.data?.physicianHomeStats.checkedOut ?? 0,\n        });\n      } else {\n        setStats({\n          scheduled: homeStats.data?.nurseHomeStats.scheduled ?? 0,\n          checkedIn: homeStats.data?.nurseHomeStats.checkedIn ?? 0,\n          checkedOut: homeStats.data?.nurseHomeStats.checkedOut ?? 0,\n        });\n      }\n    }\n  }, []);\n\n  const handleAppointmentClick = (appointment: Appointment) => {\n    const page: Page = {\n      title: `Appointment - ${appointment.patient.firstName} ${appointment.patient.lastName}`,\n      cancellable: true,\n      route: `/appointments/${appointment.id}/patient-details`,\n      icon: (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n          className=\"h-4 w-4\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n          />\n        </svg>\n      ),\n    };\n\n    onAddPage(page);\n    history.replace(`/appointments/${appointment.id}/patient-details`);\n  };\n\n  const handleOrderClick = (e: Order) => {\n    const page: Page = {\n      title: `Appointment - ${e.firstName} ${e.lastName}`,\n      cancellable: true,\n      route: `/appointments/${e.appointmentId}/diagnostics`,\n      icon: (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n          className=\"h-4 w-4\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n          />\n        </svg>\n      ),\n    };\n\n    onAddPage(page);\n    history.replace(`/appointments/${e.appointmentId}/diagnostics`);\n  };\n\n  return (\n    <div className=\"h-full mb-20\">\n      <div className=\"md:flex md:space-x-4\">\n        <StatCard title={\"Scheduled\"} figure={stats.scheduled} />\n        <StatCard title={\"Checked in\"} figure={stats.checkedIn} />\n        <StatCard title={\"Checked out\"} figure={stats.checkedOut} />\n      </div>\n\n      <div className=\"mt-6\">\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"col-span-2\">\n            <WorkflowTable onAppointmentClick={handleAppointmentClick} />\n          </div>\n          <div>\n            <ProviderOrdersTable onOrderClick={handleOrderClick} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/LabOrdersPage.tsx",["1109","1110","1111"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState, useEffect } from \"react\";\nimport { OrdersToolbar } from \"../components/OrdersToolbar\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { PAYMENT_WAIVER_REQUEST } from \"./DiagnosticOrdersPage\";\nimport {\n  LabOrder,\n  MutationSavePaymentWaiverArgs,\n  OrderFilterInput,\n  PaginationInput,\n  Query,\n  QuerySearchLabOrdersArgs,\n} from \"../models/models\";\nimport { CompleteLabOrderForm } from \"../components/CompleteLabOrderForm\";\nimport { LabOrdersTable } from \"../components/LabOrdersTable\";\nimport { useLocation } from \"react-router-dom\";\n\nconst SEARCH_LAB_ORDERS = gql`\n  query SearchLabOrders(\n    $page: PaginationInput!\n    $filter: LabOrderFilter\n    $date: Time\n    $searchTerm: String\n  ) {\n    searchLabOrders(\n      page: $page\n      filter: $filter\n      date: $date\n      searchTerm: $searchTerm\n    ) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          firstName\n          lastName\n          phoneNo\n          userName\n          patientId\n          orderedBy {\n            id\n            firstName\n            lastName\n          }\n          labs {\n            id\n            labType {\n              id\n              title\n            }\n            payments {\n              id\n              status\n              invoiceNo\n              billing {\n                id\n                item\n                code\n                price\n                credit\n              }\n            }\n          }\n          status\n          createdAt\n        }\n      }\n    }\n  }\n`;\n\nfunction useRouterQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport const LabOrdersPage: React.FC = () => {\n  const query = useRouterQuery();\n  const queryUserId = query.get(\"userId\");\n  const queryStatus = query.get(\"status\");\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const [filter, setFilter] = useState<OrderFilterInput>({\n    date: new Date(),\n    userId: queryUserId === null ? \"all\" : queryUserId,\n    status: queryStatus === null ? \"all\" : queryStatus,\n    searchTerm: \"\",\n  });\n\n  const { data, error, refetch } = useQuery<Query, QuerySearchLabOrdersArgs>(\n    SEARCH_LAB_ORDERS,\n    {\n      variables: {\n        page: paginationInput,\n        filter: {\n          orderedById: filter.userId === \"all\" ? undefined : filter.userId,\n          status: filter.status === \"all\" ? undefined : filter.status,\n        },\n        searchTerm:\n          filter.searchTerm?.length === 0 ? undefined : filter.searchTerm,\n        date: filter.date,\n      },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [filter, paginationInput]);\n\n  const handleClear = () => {\n    setFilter({\n      date: new Date(),\n      userId: \"all\",\n      status: \"all\",\n    });\n  };\n\n  const [requestPaymentWaiver] = useMutation<\n    any,\n    MutationSavePaymentWaiverArgs\n  >(PAYMENT_WAIVER_REQUEST, {\n    onCompleted(data) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Success\",\n        notifSubTitle: \"Payment waiver requested\",\n        variant: \"success\",\n      });\n      bottomSheetDispatch({ type: \"hide\" });\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const handleNextClick = () => {\n    const totalPages = data?.orders.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleOrderClick = (order: LabOrder) => {\n    bottomSheetDispatch({\n      type: \"show\",\n      snapPoint: 0,\n      children: (\n        <CompleteLabOrderForm\n          selectedOrder={order}\n          onSuccess={() => {\n            refetch();\n            notifDispatch({\n              type: \"show\",\n              notifTitle: \"Success\",\n              notifSubTitle: \"Receipt printed successfully\",\n              variant: \"success\",\n            });\n            bottomSheetDispatch({ type: \"hide\" });\n          }}\n          onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n          onRefresh={() => {\n            refetch();\n          }}\n        />\n      ),\n    });\n  };\n\n  return (\n    <div className=\"h-screen\">\n      <OrdersToolbar\n        filter={filter}\n        onClear={handleClear}\n        onChange={setFilter}\n      />\n\n      <LabOrdersTable\n        totalCount={data?.searchLabOrders.totalCount ?? 0}\n        orders={data?.searchLabOrders.edges.map((e) => e.node) ?? []}\n        onNext={handleNextClick}\n        onPrev={handlePrevClick}\n        onItemClick={handleOrderClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/ChatsPage.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/UpdatePatientPage.tsx",["1112","1113"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { format, subMonths, subYears } from \"date-fns\";\nimport { parseISO } from \"date-fns/esm\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { Component404 } from \"../components/404/404\";\nimport { FileUploader } from \"../components/FileUploaderComponent\";\nimport { PatientRegistrationContactInfoForm } from \"../components/PatientRegistrationContactInfoForm\";\nimport { PatientRegistrationDemographicForm } from \"../components/PatientRegistrationDemographicForm\";\nimport { PatientRegistrationDocumentsForm } from \"../components/PatientRegistrationDocumentsForm\";\nimport { PatientRegistrationEmergencyInfoForm } from \"../components/PatientRegistrationEmergencyInfoForm\";\nimport { PatientRegistrationLayout } from \"../components/PatientRegistrationLayout\";\nimport {\n  FileUpload,\n  MutationUpdatePatientArgs,\n  PatientUpdateInput,\n  Query,\n} from \"../models/models\";\nimport { Page } from \"../models/page\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { formatDate } from \"../util\";\nimport { PATIENT_DETAILS } from \"./Patient/PatientDetailsPage\";\n\nconst UPDATE_PATIENT = gql`\n  mutation UpdatePatient($input: PatientUpdateInput!) {\n    updatePatient(input: $input) {\n      id\n    }\n  }\n`;\n\ninterface Props {\n  onAddPage: (page: Page) => void;\n}\n\nfunction useRouterQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport const UpdatePatientPage: React.FC<Props> = ({ onAddPage }) => {\n  const query = useRouterQuery();\n  const queryPatientId = query.get(\"patientId\");\n\n  const notifDispatch = useNotificationDispatch();\n\n  const { register, handleSubmit, reset } = useForm<PatientUpdateInput>({\n    defaultValues: {\n      paperRecord: false,\n    },\n  });\n\n  const { data, refetch } = useQuery<Query, any>(PATIENT_DETAILS, {\n    variables: {\n      id: queryPatientId,\n    },\n  });\n\n  useEffect(() => {\n    if (data?.patient) {\n      const patient = data.patient;\n\n      reset({\n        firstName: patient.firstName,\n        lastName: patient.lastName,\n        dateOfBirth: format(parseISO(patient.dateOfBirth), \"yyyy-MM-dd\"),\n        gender: patient.gender,\n        idNo: patient.idNo,\n        martialStatus: patient.martialStatus,\n        occupation: patient.occupation,\n        memo: patient.memo,\n        phoneNo: patient.phoneNo,\n        phoneNo2: patient.phoneNo2,\n        homePhone: patient.homePhone,\n        region: patient.region,\n        woreda: patient.woreda,\n        zone: patient.zone,\n        kebele: patient.kebele,\n        city: patient.city,\n        houseNo: patient.houseNo,\n        email: patient.email,\n        emergencyContactName: patient.emergencyContactName,\n        emergencyContactRel: patient.emergencyContactRel,\n        emergencyContactPhone: patient.emergencyContactPhone,\n        emergencyContactPhone2: patient.emergencyContactPhone2,\n        emergencyContactMemo: patient.emergencyContactMemo,\n        paperRecord: patient.paperRecord,\n        cardNo: patient.cardNo,\n      });\n\n      if (patient.paperRecordDocument) {\n        const document: FileUploader = {\n          id: patient?.paperRecordDocument?.id,\n          fileUrl: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/files/${patient?.paperRecordDocument?.fileName}_${patient?.paperRecordDocument?.hash}.${patient?.paperRecordDocument?.extension}`,\n          name: patient?.paperRecordDocument?.fileName ?? \"\",\n          size: patient?.paperRecordDocument?.size,\n          createdAt: patient?.paperRecordDocument?.createdAt,\n          contentType: patient?.paperRecordDocument?.contentType ?? \"\",\n        };\n\n        setPaperRecordDocument([document]);\n      }\n\n      const otherDocuments: Array<FileUploader> =\n        patient?.documents?.map((e: any) => ({\n          id: e?.id,\n          fileUrl: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/files/${e?.fileName}_${e?.hash}.${e?.extension}`,\n          name: e?.fileName ?? \"\",\n          size: e?.size,\n          createdAt: e?.createdAt,\n          contentType: e?.contentType ?? \"\",\n        })) ?? [];\n\n      setPaperRecord(patient.paperRecord ? \"Yes\" : \"No\");\n\n      setDocuments(otherDocuments);\n    }\n  }, [data, reset]);\n\n  const [ageInput, setAgeInput] =\n    useState<\"default\" | \"manual\" | \"months\">(\"default\");\n\n  const [paperRecord, setPaperRecord] = useState<\"Yes\" | \"No\">(\"No\");\n\n  const [documents, setDocuments] = useState<Array<FileUploader>>([]);\n  const [paperRecordDocument, setPaperRecordDocument] = useState<\n    Array<FileUploader>\n  >([]);\n\n  const [update, { loading }] = useMutation<any, MutationUpdatePatientArgs>(\n    UPDATE_PATIENT,\n    {\n      onCompleted(data) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: `Patient updated has been saved successfully`,\n          variant: \"success\",\n        });\n\n        refetch();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const resetAll = () => {\n    reset();\n    setAgeInput(\"default\");\n    setPaperRecord(\"No\");\n    setDocuments([]);\n    setPaperRecordDocument([]);\n  };\n\n  const handleDocumentsChange = (files: Array<FileUploader>) => {\n    setDocuments(files);\n  };\n\n  const handlePaperDocumentChange = (files: Array<FileUploader>) => {\n    setPaperRecordDocument(files);\n  };\n\n  const handleDocumentDelete = (index: number) => {\n    setDocuments(documents.filter((_, i) => i !== index));\n  };\n\n  const handlePaperDocumentDelete = () => {\n    setPaperRecordDocument([]);\n  };\n\n  const onSubmit = (data: PatientUpdateInput) => {\n    let dateOfBirth;\n    if (ageInput === \"default\") {\n      dateOfBirth = formatDate(data.dateOfBirth);\n    } else if (ageInput === \"manual\") {\n      dateOfBirth = subYears(new Date(), data.dateOfBirth);\n    } else if (ageInput === \"months\") {\n      dateOfBirth = subMonths(new Date(), data.dateOfBirth);\n    }\n    data.dateOfBirth = dateOfBirth;\n\n    if (paperRecord === \"Yes\") {\n      data.paperRecord = true;\n    } else {\n      data.paperRecord = false;\n    }\n\n    if (\n      paperRecordDocument.length > 0 &&\n      paperRecordDocument[0].fileObject !== undefined\n    ) {\n      const file: FileUpload = {\n        file: paperRecordDocument[0].fileObject,\n        name: paperRecordDocument[0].name,\n      };\n\n      data.paperRecordDocument = file;\n    }\n\n    if (documents.length > 0) {\n      const files: Array<FileUpload> = documents\n        .filter((e) => e.fileObject !== undefined)\n        .map((e) => ({\n          file: e.fileObject,\n          name: e.name,\n        }));\n\n      data.documents = files;\n    }\n\n    if (queryPatientId) {\n      data.id = queryPatientId;\n      update({ variables: { input: data } });\n    }\n  };\n\n  if (queryPatientId === null || queryPatientId === undefined) {\n    return (\n      <div>\n        <Component404 />\n      </div>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <PatientRegistrationLayout\n        update={true}\n        loading={loading}\n        paperRecord={paperRecord === \"Yes\"}\n        demographic={\n          <PatientRegistrationDemographicForm\n            register={register}\n            ageInput={ageInput}\n            setAgeInput={setAgeInput}\n          />\n        }\n        contactInfo={<PatientRegistrationContactInfoForm register={register} />}\n        emergencyInfo={\n          <PatientRegistrationEmergencyInfoForm register={register} />\n        }\n        documents={\n          <PatientRegistrationDocumentsForm\n            register={register}\n            paperRecord={paperRecord}\n            setPaperRecord={setPaperRecord}\n            documents={documents}\n            setDocuments={handleDocumentsChange}\n            onDocumentDelete={handleDocumentDelete}\n            paperRecordDocument={paperRecordDocument}\n            setPaperRecordDocument={handlePaperDocumentChange}\n            onPaperRecordDocumentDelete={handlePaperDocumentDelete}\n          />\n        }\n      />\n    </form>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/ReferralOrders.tsx",["1114"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState, useEffect } from \"react\";\nimport { OrdersToolbar } from \"../components/OrdersToolbar\";\nimport { OrdersTable } from \"../components/OrdersTable\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { useNotificationDispatch } from \"../notification\";\nimport {\n  MutationConfirmReferralArgs,\n  Order,\n  OrderFilterInput,\n  PaginationInput,\n  Query,\n  QueryOrdersArgs,\n} from \"../models/models\";\nimport { formatDate } from \"../util\";\nimport { HandleReferralOrderForm } from \"../components/HandleReferralOrderForm\";\nimport { useLocation } from \"react-router-dom\";\n\nconst GET_ORDERS = gql`\n  query GerOrders($page: PaginationInput!, $filter: OrderFilterInput) {\n    orders(page: $page, filter: $filter) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          user {\n            id\n            firstName\n            lastName\n          }\n          firstName\n          lastName\n          phoneNo\n          patientId\n          emergency\n          note\n          status\n          orderType\n          payments {\n            id\n            invoiceNo\n            status\n            billing {\n              id\n              item\n              code\n              price\n              credit\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\n\nconst CONFIRM_REFERRAL = gql`\n  mutation ConfirmReferral($orderId: ID!, $checkInTime: Time!, $roomId: ID!) {\n    confirmReferral(\n      orderId: $orderId\n      checkInTime: $checkInTime\n      roomId: $roomId\n    ) {\n      id\n    }\n  }\n`;\n\nfunction useRouterQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport const ReferralOrdersPage: React.FC = () => {\n  const query = useRouterQuery();\n  const queryUserId = query.get(\"userId\");\n  const queryStatus = query.get(\"status\");\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const [filter, setFilter] = useState<OrderFilterInput>({\n    date: new Date(),\n    userId: queryUserId === null ? \"all\" : queryUserId,\n    status: queryStatus === null ? \"all\" : queryStatus,\n    orderType: \"PATIENT_IN_HOUSE_REFERRAL\",\n  });\n\n  const { data, refetch } = useQuery<Query, QueryOrdersArgs>(GET_ORDERS, {\n    variables: {\n      page: paginationInput,\n      filter: {\n        date: filter.date,\n        userId: filter.userId === \"all\" ? undefined : filter.userId,\n        status: filter.status === \"all\" ? undefined : filter.status,\n        orderType: filter.orderType,\n        searchTerm:\n          filter.searchTerm?.length === 0 ? undefined : filter.searchTerm,\n      },\n    },\n  });\n\n  const [confirmReferral] = useMutation<any, MutationConfirmReferralArgs>(\n    CONFIRM_REFERRAL,\n    {\n      onCompleted(data) {\n        refetch();\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Referral confirmed successfully\",\n          variant: \"success\",\n        });\n        bottomSheetDispatch({ type: \"hide\" });\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [filter, paginationInput]);\n\n  const handleClear = () => {\n    setFilter({\n      date: new Date(),\n      userId: \"all\",\n      status: \"all\",\n      orderType: \"PATIENT_IN_HOUSE_REFERRAL\",\n    });\n  };\n\n  const handleNextClick = () => {\n    const totalPages = data?.orders.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleOrderClick = (order: Order) => {\n    if (order.status === \"ORDERED\") {\n      bottomSheetDispatch({\n        type: \"show\",\n        snapPoint: 0,\n        children: (\n          <HandleReferralOrderForm\n            selectedOrder={order}\n            title={`Referral order for ${order.firstName} ${order.lastName}`}\n            onSubmit={(value: any) => {\n              confirmReferral({\n                variables: {\n                  orderId: value.orderId,\n                  roomId: value.roomId,\n                  checkInTime: formatDate(value.checkInTime),\n                },\n              });\n            }}\n            onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n          />\n        ),\n      });\n    }\n  };\n\n  return (\n    <div className=\"h-screen\">\n      <OrdersToolbar\n        filter={filter}\n        onClear={handleClear}\n        onChange={setFilter}\n      />\n\n      <OrdersTable\n        orders={data?.orders}\n        onNext={handleNextClick}\n        onPrev={handlePrevClick}\n        onItemClick={handleOrderClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/ReceptionHome.tsx",["1115"],"import React, { useEffect, useState } from \"react\";\nimport { StatCard } from \"../components/stat_card\";\nimport classNames from \"classnames\";\n\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { TablePagination } from \"../components/table_pagination\";\nimport { useForm } from \"react-hook-form\";\nimport { format, isToday, parseISO } from \"date-fns\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  AppointmentEdge,\n  Maybe,\n  MutationCheckInPatientArgs,\n  PaginationInput,\n  Query,\n} from \"../models/models\";\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport { Page } from \"../models/page\";\n\nconst HOME_STATS = gql`\n  query HomeStats {\n    receptionHomeStats {\n      scheduled\n      checkedIn\n      checkedOut\n    }\n  }\n`;\n\nexport const ReceptionHome = ({\n  onAddPage,\n}: {\n  onAddPage: (page: Page) => void;\n}) => {\n  const history = useHistory();\n  const { data } = useQuery<Query>(HOME_STATS);\n\n  const handleClick = (status: string) => {\n    const page: Page = {\n      title: `Appointments`,\n      cancellable: true,\n      route: `/appointments`,\n      icon: (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n          className=\"h-4 w-4\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n          />\n        </svg>\n      ),\n    };\n\n    onAddPage(page);\n    history.push(`/appointments?status=${status}`);\n  };\n\n  return (\n    <div className=\"h-screen mb-20\">\n      <div className=\"md:flex md:space-x-6\">\n        <StatCard\n          title={\"Scheduled\"}\n          figure={data?.receptionHomeStats.scheduled ?? 0}\n          onClick={() => {\n            handleClick(\"Scheduled\");\n          }}\n        />\n        <StatCard\n          title={\"Checked in\"}\n          figure={data?.receptionHomeStats.checkedIn ?? 0}\n          onClick={() => {\n            handleClick(\"Checked-In\");\n          }}\n        />\n        <StatCard\n          title={\"Checked out\"}\n          figure={data?.receptionHomeStats.scheduled ?? 0}\n          onClick={() => {\n            handleClick(\"Checked-Out\");\n          }}\n        />\n      </div>\n\n      <PatientsTable />\n    </div>\n  );\n};\n\nconst TODAYS_APPOINTMENTS = gql`\n  query Appointments($page: PaginationInput!) {\n    findTodaysAppointments(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          checkInTime\n          credit\n          userId\n          providerName\n          visitType {\n            id\n            title\n          }\n          room {\n            id\n            title\n          }\n          appointmentStatus {\n            id\n            title\n          }\n          patient {\n            id\n            firstName\n            lastName\n            phoneNo\n          }\n          payments {\n            id\n            invoiceNo\n            status\n            billing {\n              id\n              item\n              code\n              price\n            }\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst PatientsTable: React.FC = () => {\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 10,\n  });\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n\n  const { data, refetch } = useQuery<Query, any>(TODAYS_APPOINTMENTS, {\n    variables: { page: paginationInput },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.findTodaysAppointments.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col mt-4\">\n      <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n        <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n          <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead>\n                <tr>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Patient\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Phone Number\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Provider\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Visit Type\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Payment\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {data?.findTodaysAppointments.edges.map((e) => (\n                  <tr\n                    key={e?.node.id}\n                    className=\"hover:bg-gray-100 cursor-pointer\"\n                    onClick={() => {\n                      bottomSheetDispatch({\n                        type: \"show\",\n                        snapPoint: 0,\n                        children: (\n                          <CheckInForm\n                            appointment={e}\n                            onSuccess={() => {\n                              refetch();\n                            }}\n                          />\n                        ),\n                      });\n                    }}\n                  >\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"flex-shrink-0 h-10 w-10\">\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                            className=\"h-10 w-10 text-gray-600\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth={2}\n                              d=\"M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                            />\n                          </svg>\n                        </div>\n                        <div className=\"ml-4\">\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {`${e?.node.patient?.firstName} ${e?.node.patient?.lastName}`}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {e?.node.patient?.id}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {e?.node.patient?.phoneNo}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">\n                        {e?.node.providerName}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {e?.node.room.title}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {e?.node.visitType.title}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {`${e?.node.payments\n                        .map((p) => p?.billing.item)\n                        .join(\", \")} (${e?.node.payments\n                        .map((p) => p?.invoiceNo)\n                        .join(\", \")})`}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={classNames(\n                          \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\",\n                          {\n                            \"bg-yellow-100 text-yellow-800\":\n                              e?.node.appointmentStatus?.title ===\n                                \"Scheduled online\" || \"Scheduled\",\n                          },\n                          {\n                            \"bg-green-100 text-green-800\":\n                              e?.node.appointmentStatus?.title === \"Checked-In\",\n                          },\n                          {\n                            \"bg-red-100 text-red-800\":\n                              e?.node.appointmentStatus?.title ===\n                              \"Checked-Out\",\n                          }\n                        )}\n                      >\n                        {e?.node.appointmentStatus?.title}\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <TablePagination\n              totalCount={data?.findTodaysAppointments.totalCount ?? 0}\n              onNext={handleNextClick}\n              onPrevious={handlePreviousClick}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst QUEUE_DESTINATIONS = gql`\n  query QueueDestinations {\n    queueDestinations(page: { page: 0, size: 20 }) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst CHECK_IN_PATIENT = gql`\n  mutation CheckInPatient($appointmentId: ID!, $destinationId: ID!) {\n    checkInPatient(\n      appointmentId: $appointmentId\n      destinationId: $destinationId\n    ) {\n      id\n    }\n  }\n`;\n\nconst CheckInForm: React.FC<{\n  appointment: Maybe<AppointmentEdge>;\n  onSuccess: () => void;\n}> = ({ appointment, onSuccess }) => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm();\n\n  const { data } = useQuery<Query, any>(QUEUE_DESTINATIONS);\n\n  const [save] = useMutation<any, MutationCheckInPatientArgs>(\n    CHECK_IN_PATIENT,\n    {\n      onCompleted(data) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: `Patient is successfully checked in`,\n          variant: \"success\",\n        });\n        bottomSheetDispatch({ type: \"hide\" });\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const handleCheckIn = (input: any) => {\n    if (appointment?.node.id !== undefined) {\n      save({\n        variables: {\n          appointmentId: appointment?.node.id,\n          destinationId: input.destinationId,\n        },\n      });\n    }\n  };\n\n  const handleCancel = () => {\n    bottomSheetDispatch({ type: \"hide\" });\n  };\n\n  const checkInTime = parseISO(appointment?.node.checkInTime);\n\n  return (\n    <div className=\"mx-64\">\n      <div>\n        <p className=\"font-extrabold text-5xl text-gray-900\">{`${appointment?.node.patient?.firstName} ${appointment?.node.patient?.lastName}`}</p>\n        <div className=\"mt-1\">\n          {isToday(checkInTime) ? (\n            <div>\n              <span className=\"tracking-wide text-gray-600 mt-5\">\n                Scheduled for today at\n              </span>\n              <span className=\"font-bold\"> {format(checkInTime, \"p\")}</span>\n            </div>\n          ) : (\n            <div>\n              <span className=\"tracking-wide text-gray-600 mt-5\">\n                Scheduled for\n              </span>\n              <span> {format(checkInTime, \"Lo MMMM y\")}</span>\n            </div>\n          )}\n        </div>\n        <span className=\"tracking-wide text-gray-600\">{`${appointment?.node.visitType.title} with `}</span>\n        <span className=\"tracking-wide text-gray-700 font-semibold\">\n          {appointment?.node.providerName}\n        </span>\n      </div>\n\n      <form onSubmit={handleSubmit(handleCheckIn)}>\n        <div className=\"mt-5 w-80\">\n          <p className=\"text-gray-700\">Send patient to</p>\n\n          {data?.queueDestinations.edges.map((e) => (\n            <div\n              key={e?.node.id}\n              className=\"border border-gray-300 p-2 rounded-md mt-2\"\n            >\n              <input\n                type=\"radio\"\n                name={\"destinationId\"}\n                value={e?.node.id}\n                ref={register({ required: true })}\n              />\n              <label className=\"ml-2\" htmlFor=\"huey\">\n                {e?.node.title}\n              </label>\n            </div>\n          ))}\n\n          <div className=\"flex space-x-3\">\n            <button\n              type=\"submit\"\n              className=\"border border-gray-400 hover:bg-gray-100 p-3 rounded-md mt-4 w-40\"\n            >\n              Check In\n            </button>\n\n            <button\n              onClick={handleCancel}\n              type=\"button\"\n              className=\"border border-red-400 text-red-400 hover:bg-red-100 p-3 rounded-md mt-4 w-40\"\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/FolloupOrdersPage.tsx",["1116"],"import { gql, useQuery } from \"@apollo/client\";\nimport React, { useState, useEffect } from \"react\";\nimport { OrdersToolbar } from \"../components/OrdersToolbar\";\nimport { OrdersTable } from \"../components/OrdersTable\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport {\n  Order,\n  OrderFilterInput,\n  PaginationInput,\n  Query,\n  QueryOrdersArgs,\n} from \"../models/models\";\nimport { ConfirmFollowUpOrderForm } from \"../components/ConfirmFollowUpOrderForm\";\nimport { useLocation } from \"react-router-dom\";\n\nconst GET_ORDERS = gql`\n  query GerOrders($page: PaginationInput!, $filter: OrderFilterInput) {\n    orders(page: $page, filter: $filter) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          user {\n            id\n            firstName\n            lastName\n          }\n          firstName\n          lastName\n          phoneNo\n          patientId\n          emergency\n          note\n          status\n          orderType\n          payments {\n            id\n            invoiceNo\n            status\n            billing {\n              id\n              item\n              code\n              price\n              credit\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`;\n\nfunction useRouterQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport const FollowupOrdersPage: React.FC = () => {\n  const query = useRouterQuery();\n  const queryUserId = query.get(\"userId\");\n  const queryStatus = query.get(\"status\");\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const [filter, setFilter] = useState<OrderFilterInput>({\n    date: new Date(),\n    userId: queryUserId === null ? \"all\" : queryUserId,\n    status: queryStatus === null ? \"all\" : queryStatus,\n    orderType: \"FOLLOW_UP\",\n  });\n\n  const { data, refetch } = useQuery<Query, QueryOrdersArgs>(GET_ORDERS, {\n    variables: {\n      page: paginationInput,\n      filter: {\n        date: filter.date,\n        userId: filter.userId === \"all\" ? undefined : filter.userId,\n        status: filter.status === \"all\" ? undefined : filter.status,\n        orderType: filter.orderType,\n        searchTerm:\n          filter.searchTerm?.length === 0 ? undefined : filter.searchTerm,\n      },\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [filter, paginationInput]);\n\n  const handleClear = () => {\n    setFilter({\n      date: new Date(),\n      userId: \"all\",\n      status: \"all\",\n      orderType: \"FOLLOW_UP\",\n    });\n  };\n\n  const handleNextClick = () => {\n    const totalPages = data?.orders.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleOrderClick = (order: Order) => {\n    if (order.status === \"ORDERED\") {\n      bottomSheetDispatch({\n        type: \"show\",\n        snapPoint: 0,\n        children: (\n          <ConfirmFollowUpOrderForm\n            selectedOrder={order}\n            title={`Follow-Up order for ${order.firstName} ${order.lastName}`}\n            onSubmit={(value: any) => {}}\n            onSuccess={() => {\n              refetch();\n              bottomSheetDispatch({ type: \"hide\" });\n            }}\n            onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n          />\n        ),\n      });\n    }\n  };\n\n  return (\n    <div className=\"h-screen\">\n      <OrdersToolbar\n        filter={filter}\n        onClear={handleClear}\n        onChange={setFilter}\n      />\n\n      <OrdersTable\n        orders={data?.orders}\n        onNext={handleNextClick}\n        onPrev={handlePrevClick}\n        onItemClick={handleOrderClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/PharmacyHome.tsx",["1117"],"import { gql, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { CompleteMedicalPrescriptionOrder } from \"../components/CompleteMedicalPrescriptionOrder\";\nimport { PharmacyOrdersList } from \"../components/PharmacyOrdersList\";\nimport { PrescriptionOrdersToolbar } from \"../components/PrescriptionOrdersToolbar\";\nimport {\n  MedicalPrescriptionOrder,\n  PaginationInput,\n  Query,\n  QuerySearchMedicationPrescriptionOrdersArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\n\nconst SEARCH_MEDICAL_PRESCRIPTION_ORDERS = gql`\n  query SearchMedicationPrescriptionOrders(\n    $page: PaginationInput!\n    $filter: PrescriptionOrdersFilter\n    $prescribedDate: Time\n    $searchTerm: String\n  ) {\n    searchMedicationPrescriptionOrders(\n      page: $page\n      filter: $filter\n      prescribedDate: $prescribedDate\n      searchTerm: $searchTerm\n    ) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          pharmacyId\n          patientChartId\n          firstName\n          lastName\n          phoneNo\n          userName\n          orderedBy {\n            id\n            firstName\n            lastName\n          }\n          medicalPrescriptions {\n            id\n            medication\n            sig\n            refill\n            generic\n            substitutionAllowed\n            directionToPatient\n            prescribedDate\n            history\n            status\n          }\n          status\n          createdAt\n        }\n      }\n    }\n  }\n`;\n\nexport const PharmacyHome: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 10,\n  });\n\n  const [filter, setFilter] = useState({\n    date: new Date(),\n    status: \"Ordered\",\n    userId: \"all\",\n    searchTerm: \"\",\n  });\n\n  const { data, refetch } = useQuery<\n    Query,\n    QuerySearchMedicationPrescriptionOrdersArgs\n  >(SEARCH_MEDICAL_PRESCRIPTION_ORDERS, {\n    variables: {\n      page: paginationInput,\n      filter: {\n        status: filter.status === \"all\" ? undefined : filter.status,\n      },\n      prescribedDate: filter.date,\n      searchTerm: filter.searchTerm === \"\" ? undefined : filter.searchTerm,\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput, filter]);\n\n  const handleNextClick = () => {\n    const totalPages =\n      data?.searchMedicationPrescriptionOrders.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleItemClick = (value: MedicalPrescriptionOrder) => {\n    bottomSheetDispatch({\n      type: \"show\",\n      snapPoint: 0,\n      children: (\n        <CompleteMedicalPrescriptionOrder\n          item={value}\n          onSuccess={() => {\n            bottomSheetDispatch({ type: \"hide\" });\n\n            refetch();\n\n            notifDispatch({\n              type: \"show\",\n              notifTitle: \"Success\",\n              notifSubTitle: \"Prescription marked completed\",\n              variant: \"success\",\n            });\n          }}\n          onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n        />\n      ),\n    });\n  };\n\n  return (\n    <div className=\"h-screen mb-20\">\n      <PrescriptionOrdersToolbar\n        date={filter.date}\n        onDateChange={(value) => {\n          setFilter({\n            ...filter,\n            date: value,\n          });\n        }}\n        status={filter.status}\n        onStatusChange={(value) => {\n          setFilter({\n            ...filter,\n            status: value,\n          });\n        }}\n        searchTerm={filter.searchTerm}\n        onSearchTermChange={(value) => {\n          setFilter({\n            ...filter,\n            searchTerm: value,\n          });\n        }}\n        onClear={() => {\n          setFilter({\n            date: new Date(),\n            status: \"Ordered\",\n            userId: \"all\",\n            searchTerm: \"\",\n          });\n        }}\n      />\n      \n      <PharmacyOrdersList\n        items={data?.searchMedicationPrescriptionOrders.edges.map(\n          (e) => e?.node\n        )}\n        totalCount={data?.searchMedicationPrescriptionOrders.totalCount ?? 0}\n        onClick={handleItemClick}\n        onNextPage={handleNextClick}\n        onPrevPage={handlePreviousClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UserRegistrationForm.tsx",["1118","1119","1120"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport { useNotificationDispatch } from \"../notification\";\nimport {\n  FileUploader,\n  FileUploaderComponent,\n} from \"../components/FileUploaderComponent\";\nimport { MutationSignupArgs, UserInput, UserType } from \"../models/models\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst SIGN_UP = gql`\n  mutation SignUp($input: UserInput!) {\n    signup(input: $input) {\n      id\n    }\n  }\n`;\ninterface Props {\n  onSuccess: () => void;\n}\n\nexport const UserRegistrationForm: React.FC<Props> = ({ onSuccess }) => {\n  const notifDispatch = useNotificationDispatch();\n  const [userTypes, setUserTypes] = useState<Array<any>>([]);\n  const [signatures, setSignatures] = useState<Array<FileUploader>>();\n  const [profilePictures, setProfilePictures] = useState<Array<FileUploader>>();\n\n  const { register, handleSubmit, watch, errors } = useForm<UserInput>();\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  const [signup] = useMutation<any, MutationSignupArgs>(SIGN_UP, {\n    onCompleted(data) {\n      onSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    fetch(`${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/userTypes`, {\n      method: \"GET\",\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setUserTypes(data);\n      })\n      .catch((error) => {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      });\n  }, []);\n\n  const onSubmit = (user: UserInput) => {\n    if (signatures && signatures?.length > 0) {\n      const file = {\n        file: signatures[0].fileObject,\n        name: signatures[0].name,\n      };\n\n      user.signature = file;\n    }\n\n    if (profilePictures && profilePictures?.length > 0) {\n      const file = {\n        file: profilePictures[0].fileObject,\n        name: profilePictures[0].name,\n      };\n\n      user.profilePic = file;\n    }\n\n    signup({\n      variables: {\n        input: user,\n      },\n    });\n\n    /*fetch(`${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/signup`, {\n      method: \"POST\",\n      body: JSON.stringify(user),\n    })\n      .then((res) => {\n        if (!res.ok) {\n          throw res;\n        }\n\n        return res.json();\n      })\n      .then((data) => {\n        onSuccess();\n        history.replace(\"/\");\n      })\n      .catch((error) => {\n        error.json().then((data: any) => {\n          notifDispatch({\n            type: \"show\",\n            notifTitle: \"Error\",\n            notifSubTitle: data.message,\n            variant: \"failure\",\n          });\n        });\n      });*/\n  };\n\n  const handleSignatureChange = (change: Array<FileUploader>) => {\n    setSignatures(change);\n  };\n\n  const handleProfilePictureChange = (change: Array<FileUploader>) => {\n    setProfilePictures(change);\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <p className=\"mt-2 text-3xl text-gray-800 font-bold tracking-wide\">\n          Create Account\n        </p>\n\n        <div className=\"grid grid-cols-2 gap-16 mt-10\">\n          <div>\n            <p className=\"text-lg font-semibold tracking-wide text-gray-700 uppercase\">\n              Basic Information\n            </p>\n            <hr />\n            <div className=\"grid grid-cols-2 gap-6 mt-5\">\n              <div className=\"col-span-2 sm:col-span-2\">\n                <label\n                  htmlFor=\"userTypeIds\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Account Type\n                </label>\n                <select\n                  name=\"userTypeIds\"\n                  required\n                  multiple\n                  ref={register({ required: true })}\n                  className=\"mt-1 block w-full p-2 bg-gray-100 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                >\n                  {userTypes.map((e: any) => (\n                    <option key={e.ID} value={e.ID}>\n                      {e.title}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"col-span-1 sm:col-span-1\">\n                <label\n                  htmlFor=\"firstName\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  First name\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"firstName\"\n                  id=\"firstName\"\n                  required\n                  ref={register({ required: true })}\n                  className=\"mt-1 p-1 pl-4 block w-full sm:text-md bg-gray-100 border-gray-300 border rounded-md\"\n                />\n              </div>\n\n              <div className=\"col-span-1 sm:col-span-1\">\n                <label\n                  htmlFor=\"lastName\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Last name\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"lastName\"\n                  id=\"lastName\"\n                  required\n                  ref={register({ required: true })}\n                  className=\"mt-1 p-1 pl-4 block w-full sm:text-md bg-gray-100 border-gray-300 border rounded-md\"\n                />\n              </div>\n\n              <div className=\"col-span-2 sm:col-span-2\">\n                <label\n                  htmlFor=\"email\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Email\n                </label>\n                <input\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  required\n                  ref={register({\n                    required: true,\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                      message: \"Invalid email address\",\n                    },\n                  })}\n                  className=\"mt-1 p-1 pl-4 block w-full sm:text-md bg-gray-100 border-gray-300 border rounded-md\"\n                />\n              </div>\n\n              <div className=\"col-span-1 sm:col-span-1\">\n                <label\n                  htmlFor=\"password\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Password\n                </label>\n                <input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"password\"\n                  required\n                  ref={register({\n                    required: true,\n                    minLength: {\n                      value: 6,\n                      message: \"Password must have at least 6 characters\",\n                    },\n                  })}\n                  className=\"mt-1 p-1 pl-4 block w-full sm:text-md bg-gray-100 border-gray-300 border rounded-md\"\n                />\n              </div>\n\n              <div className=\"col-span-1 sm:col-span-1\">\n                <label\n                  htmlFor=\"confirmPassword\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Confirm Password\n                </label>\n                <input\n                  type=\"password\"\n                  name=\"confirmPassword\"\n                  id=\"confirmPassword\"\n                  required\n                  ref={register({\n                    validate: (value) =>\n                      value === password.current ||\n                      \"The passwords do not match\",\n                  })}\n                  className=\"mt-1 p-1 pl-4 block w-full sm:text-md bg-gray-100 border-gray-300 border rounded-md\"\n                />\n              </div>\n\n              {errors.password && <p>{errors.password.message}</p>}\n\n              <div className=\"col-span-2 sm:col-span-2 py-3 mt-2 bg-gray-50 text-right\">\n                <button\n                  type=\"submit\"\n                  className=\"inline-flex justify-center w-full py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-teal-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                >\n                  <span className=\"ml-2\">Register</span>\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"px-7\">\n            <div>\n              <p className=\"text-lg font-semibold tracking-wide text-gray-700 uppercase\">\n                Documents\n              </p>\n              <hr />\n              <label className=\"block text-sm font-medium text-gray-700 mt-5\">\n                Your signature\n              </label>\n              <FileUploaderComponent\n                multiSelect={false}\n                accept={\"image\"}\n                values={signatures}\n                onChange={handleSignatureChange}\n                onDelete={() => setSignatures([])}\n              />\n            </div>\n\n            <div className=\"col-span-2 sm:col-span-2 mt-10\">\n              <label className=\"block text-sm font-medium text-gray-700\">\n                Profile Picture\n              </label>\n              <FileUploaderComponent\n                multiSelect={false}\n                accept={\"image\"}\n                values={profilePictures}\n                onChange={handleProfilePictureChange}\n                onDelete={() => setProfilePictures([])}\n              />\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/404/404.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/index.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/index.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/CompleteDiagnosticOrderForm.tsx",["1121","1122","1123","1124"],"import { gql, useMutation } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useNotificationDispatch } from \"../notification\";\nimport MenuComponent from \"./MenuComponent\";\nimport classnames from \"classnames\";\nimport { PrinterIcon, SortAscendingIcon } from \"@heroicons/react/outline\";\n\nimport {\n  DiagnosicProcedureOrderStatus,\n  DiagnosticProcedureOrder,\n  MutationConfirmDiagnosticProcedureOrderArgs,\n  MutationRequestPaymentWaiverArgs,\n} from \"../models/models\";\nimport { Menu } from \"@headlessui/react\";\nimport { useForm } from \"react-hook-form\";\n\nconst CONFIRM_PAYMENT = gql`\n  mutation ConfirmPayment($id: ID!, $invoiceNo: String!) {\n    confirmPayment(id: $id, invoiceNo: $invoiceNo) {\n      id\n    }\n  }\n`;\n\nconst CONFIRM_PAYMENT_BATCH = gql`\n  mutation ConfirmPaymentBatch($ids: [ID!]!, $invoiceNo: String!) {\n    confirmPayments(ids: $ids, invoiceNo: $invoiceNo)\n  }\n`;\n\nconst CONFIRM_DIAGNOSTIC_ORDER = gql`\n  mutation ConfirmDiagnosticProcedureOrder($id: ID!, $invoiceNo: String!) {\n    confirmDiagnosticProcedureOrder(id: $id, invoiceNo: $invoiceNo) {\n      id\n    }\n  }\n`;\n\nconst REQUEST_WAIVER = gql`\n  mutation RequestPaymentWaiver($paymentId: ID!, $patientId: ID!) {\n    requestPaymentWaiver(paymentId: $paymentId, patientId: $patientId) {\n      id\n    }\n  }\n`;\n\nconst REQUEST_WAIVER_BATCH = gql`\n  mutation RequestPaymentWaivers($ids: [ID!]!, $patientId: ID!) {\n    requestPaymentWaivers(ids: $ids, patientId: $patientId)\n  }\n`;\n\ninterface Props {\n  selectedOrder: DiagnosticProcedureOrder;\n  onSuccess: () => void;\n  onCancel: () => void;\n  onRefresh: () => void;\n}\n\nexport const CompleteDiagnosticOrderForm: React.FC<Props> = ({\n  selectedOrder,\n  onSuccess,\n  onCancel,\n  onRefresh,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n\n  const { register, handleSubmit } = useForm();\n\n  const [order, setOrder] = useState<DiagnosticProcedureOrder>(selectedOrder);\n  const [requestedWaiver, setRequestedWaiver] = useState<{\n    diagnosticProcedureIdx: number | -1;\n    paymentId: string | null;\n    patientId: string | null;\n  }>({\n    diagnosticProcedureIdx: -1,\n    paymentId: null,\n    patientId: null,\n  });\n\n  const [errors, setErrors] = useState<Array<any>>([]);\n\n  useEffect(() => {\n    const { diagnosticProcedureIdx, paymentId, patientId } = requestedWaiver;\n    if (\n      diagnosticProcedureIdx !== -1 &&\n      paymentId !== null &&\n      patientId !== null\n    ) {\n      requestWaiver({\n        variables: {\n          paymentId: paymentId,\n          patientId: patientId,\n        },\n      });\n    }\n  }, [requestedWaiver]);\n\n  const [\n    confirmDiagnosticProcedureOrder,\n    confirmDiagnosticProcedureOrderResult,\n  ] = useMutation<any, MutationConfirmDiagnosticProcedureOrderArgs>(\n    CONFIRM_DIAGNOSTIC_ORDER,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [requestWaiver, requestWaiverResult] = useMutation<\n    any,\n    MutationRequestPaymentWaiverArgs\n  >(REQUEST_WAIVER, {\n    onCompleted(data) {\n      const paymentId = data.requestPaymentWaiver.id;\n\n      const diagnosticProcedure =\n        order.diagnosticProcedures[requestedWaiver.diagnosticProcedureIdx];\n\n      if (diagnosticProcedure) {\n        const paymentIdx = diagnosticProcedure.payments?.findIndex(\n          (e) => e?.id === paymentId\n        );\n\n        setOrder({\n          ...order,\n          diagnosticProcedures: [\n            ...order.diagnosticProcedures.slice(\n              0,\n              requestedWaiver.diagnosticProcedureIdx\n            ),\n            {\n              ...diagnosticProcedure,\n              payments: [\n                ...diagnosticProcedure.payments.slice(0, paymentIdx),\n                {\n                  ...diagnosticProcedure.payments[paymentIdx],\n                  status: \"PAYMENT_WAIVER_REQUESTED\",\n                },\n                ...diagnosticProcedure.payments?.slice(paymentIdx + 1),\n              ],\n            },\n            ...order.diagnosticProcedures.slice(\n              requestedWaiver.diagnosticProcedureIdx + 1\n            ),\n          ],\n        });\n      }\n    },\n    update: (cache, mutationResult) => {\n      const diagnosticProcedure =\n        order.diagnosticProcedures[requestedWaiver.diagnosticProcedureIdx];\n\n      let payment = diagnosticProcedure.payments?.find(\n        (e) => e?.id === mutationResult.data.requestPaymentWaiver.id\n      );\n\n      if (payment) {\n        cache.modify({\n          id: cache.identify(payment),\n          fields: {\n            status(cachedStatus) {\n              return \"PAYMENT_WAIVER_REQUESTED\";\n            },\n          },\n        });\n      }\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    let newErrors = [];\n    if (requestWaiverResult.error) newErrors.push(requestWaiverResult.error);\n    if (confirmDiagnosticProcedureOrderResult.error)\n      newErrors.push(confirmDiagnosticProcedureOrderResult.error);\n    setErrors(newErrors);\n  }, [requestWaiverResult.error, confirmDiagnosticProcedureOrderResult.error]);\n\n  const handleFormSubmit = (values: any) => {\n    confirmDiagnosticProcedureOrder({\n      variables: { id: order.id, invoiceNo: values.invoiceNo },\n    });\n  };\n\n  const hasPendingPayments = order.diagnosticProcedures\n    .map((e) => e.payments)\n    .flat()\n    .some((e) => e.status === \"PAYMENT_WAIVER_REQUESTED\");\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit(handleFormSubmit)}>\n          <p className=\"text-2xl text-teal-700 font-extrabold tracking-wider\">{`Order for ${order.firstName} ${order.lastName}`}</p>\n\n          {order.diagnosticProcedures.map((procedure, index) => (\n            <div key={procedure.id} className=\"mt-5\">\n              {order.diagnosticProcedures.length - 1 === index && (\n                <hr className=\"mb-5\" />\n              )}\n              <p className=\"text-center font-semibold text-xl\">\n                {procedure.diagnosticProcedureType.title}\n              </p>\n              <table className=\"table-fixed w-full mt-5\">\n                <thead>\n                  <tr className=\"bg-gray-50\">\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                    >\n                      Billing\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                    >\n                      Code\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                    >\n                      Price\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                    ></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {procedure.payments.map((payment) => (\n                    <tr key={payment.id} className=\"border-t\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {payment.billing.item}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {payment.billing.code}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        <span className=\"text-gray-600 tracking-wide\">\n                          ETB{\" \"}\n                        </span>\n                        <span>{payment.billing.price.toLocaleString()}</span>\n                      </td>\n                      <td className=\"px-6 py-4 text-sm\">\n                        {payment.status === \"PAID\" && (\n                          <p className=\"text-green-700 uppercase font-semibold\">\n                            Payment Confirmed\n                          </p>\n                        )}\n                        {payment.status === \"PAYMENT_WAIVER_REQUESTED\" && (\n                          <p className=\"text-yellow-700 uppercase font-semibold animate-pulse\">\n                            Payment waiver requested\n                          </p>\n                        )}\n                        {payment.status === \"NOTPAID\" && (\n                          <MenuComponent\n                            title={\"Options\"}\n                            menus={\n                              <div className=\"px-1 py-1\">\n                                <Menu.Item>\n                                  {({ active }) => (\n                                    <button\n                                      disabled\n                                      className={`${\n                                        active\n                                          ? \"bg-teal-500 text-white\"\n                                          : \"text-gray-900\"\n                                      } group flex rounded-md items-center w-full px-2 py-2 text-sm opacity-20`}\n                                      type=\"button\"\n                                      onClick={() => {}}\n                                    >\n                                      <PrinterIcon\n                                        className=\"w-5 h-5 mr-2 text-teal-700\"\n                                        aria-hidden=\"true\"\n                                      />\n                                      Confirm Payment\n                                    </button>\n                                  )}\n                                </Menu.Item>\n                                <Menu.Item>\n                                  {({ active }) => (\n                                    <button\n                                      className={`${\n                                        active\n                                          ? \"bg-teal-500 text-white\"\n                                          : \"text-gray-900\"\n                                      } group flex rounded-md items-center w-full px-2 py-2 text-sm`}\n                                      type=\"button\"\n                                      onClick={() => {\n                                        setRequestedWaiver({\n                                          diagnosticProcedureIdx: index,\n                                          paymentId: payment.id,\n                                          patientId: order.patientId,\n                                        });\n                                      }}\n                                    >\n                                      <SortAscendingIcon\n                                        className=\"w-5 h-5 mr-2 text-teal-700\"\n                                        aria-hidden=\"true\"\n                                      />\n                                      Request Payment Waiver\n                                    </button>\n                                  )}\n                                </Menu.Item>\n                              </div>\n                            }\n                          />\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ))}\n\n          <div className=\"mt-4\">\n            {errors.length > 0 &&\n              errors.map((e) => (\n                <p className=\"text-red-600\">Error: {e?.message}</p>\n              ))}\n          </div>\n\n          {order.status === DiagnosicProcedureOrderStatus.Ordered && (\n            <div className=\"mt-5\">\n              <div>\n                <label\n                  htmlFor=\"invoiceNo\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Invoice\n                </label>\n                <input\n                  id=\"invoiceNo\"\n                  name=\"invoiceNo\"\n                  required\n                  ref={register({ required: true })}\n                  className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                />\n              </div>\n\n              <div className=\"py-3 mt-2 bg-gray-50 text-right\">\n                <button\n                  type=\"submit\"\n                  disabled={hasPendingPayments}\n                  className={classnames(\n                    \"inline-flex justify-center w-full py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md focus:outline-none\",\n                    {\n                      \"bg-teal-600 hover:bg-teal-700 text-white\":\n                        !hasPendingPayments,\n                      \"bg-yellow-500 text-yellow-800 animate-pulse\":\n                        hasPendingPayments,\n                    }\n                  )}\n                >\n                  <span className=\"ml-2\">\n                    {hasPendingPayments\n                      ? \"Pending waiver approval\"\n                      : \"Confirm All Payments\"}\n                  </span>\n                </button>\n              </div>\n            </div>\n          )}\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/HandleOrderScheduleForm.tsx",["1125","1126","1127","1128"],"import { useQuery, useMutation, gql, useLazyQuery } from \"@apollo/client\";\nimport FullCalendar, { DatesSetArg, EventClickArg } from \"@fullcalendar/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport MenuComponent from \"./MenuComponent\";\nimport { PencilIcon, SortAscendingIcon } from \"@heroicons/react/outline\";\nimport {\n  AppointmentInput,\n  MutationConfirmOrderArgs,\n  MutationConfirmPaymentArgs,\n  MutationRequestPaymentWaiverArgs,\n  Order,\n  PaginationInput,\n  Query,\n  QueryPatientEncounterLimitByUserArgs,\n  QuerySearchAppointmentsArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { Menu } from \"@headlessui/react\";\nimport classnames from \"classnames\";\nimport { parseISO } from \"date-fns\";\nimport { CalendarEvent } from \"./CalendarEvent\";\n\nconst APPOINTMENT_LOOKUPS = gql`\n  query AppointmentLookups($page: PaginationInput!, $userTypeTitle: String!) {\n    rooms(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n\n    visitTypes(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n\n    consultationBillings {\n      id\n      item\n      code\n      price\n      credit\n      remark\n    }\n\n    appointmentStatuses(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n\n    getByUserTypeTitle(input: $userTypeTitle) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\nconst CONFIRM_PAYMENT = gql`\n  mutation ConfirmPayment($id: ID!) {\n    confirmPayment(id: $id) {\n      id\n    }\n  }\n`;\n\nconst REQUEST_WAIVER = gql`\n  mutation RequestPaymentWaiver($paymentId: ID!, $patientId: ID!) {\n    requestPaymentWaiver(paymentId: $paymentId, patientId: $patientId) {\n      id\n    }\n  }\n`;\n\nconst SEARCH_APPOINTMENTS = gql`\n  query SearchAppointments(\n    $input: AppointmentSearchInput!\n    $page: PaginationInput!\n  ) {\n    searchAppointments(input: $input, page: $page) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          providerName\n          checkInTime\n          checkedInTime\n          checkedOutTime\n          patient {\n            id\n            firstName\n            lastName\n            phoneNo\n          }\n          room {\n            id\n            title\n          }\n          visitType {\n            id\n            title\n          }\n          appointmentStatus {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst GET_PATIENT_ENCOUNTER_LIMIT = gql`\n  query PatientEncounterLimit($userId: ID!) {\n    patientEncounterLimitByUser(userId: $userId) {\n      id\n      userId\n      dailyLimit\n      overbook\n    }\n  }\n`;\n\ninterface Props {\n  selectedOrder: Order;\n  title: string;\n  onCancel: () => void;\n  onSubmit: (value: any) => void;\n}\n\nexport const HandleOrderScheduleForm: React.FC<Props> = ({\n  selectedOrder,\n  title,\n  onCancel,\n  onSubmit,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit, setValue, watch, getValues } =\n    useForm<AppointmentInput>();\n  const appointmentInput = watch();\n\n  const calendarRef = React.createRef<FullCalendar>();\n\n  const [order, setOrder] = useState<Order>(selectedOrder);\n  const [errors, setErrors] = useState<Array<any>>([]);\n  const [paginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const lookupQuery = useQuery<Query, any>(APPOINTMENT_LOOKUPS, {\n    variables: { page: paginationInput, userTypeTitle: \"Physician\" },\n  });\n\n  const patientEncounterLimitQuery = useLazyQuery<\n    Query,\n    QueryPatientEncounterLimitByUserArgs\n  >(GET_PATIENT_ENCOUNTER_LIMIT);\n\n  const patientEncounterLimit =\n    patientEncounterLimitQuery[1].data?.patientEncounterLimitByUser;\n\n  const providerAppointmentsQuery = useLazyQuery<\n    Query,\n    QuerySearchAppointmentsArgs\n  >(SEARCH_APPOINTMENTS);\n\n  const events =\n    providerAppointmentsQuery[1].data?.searchAppointments.edges.map((e) => ({\n      id: e?.node.id,\n      title: `${e?.node.visitType.title} with ${e?.node.providerName}`,\n      patientName: `${e?.node.firstName} ${e?.node.lastName}`,\n      date: parseISO(e?.node.checkInTime),\n    }));\n\n  useEffect(() => {\n    const values = getValues();\n\n    if (selectedOrder.user.id && values.checkInTime) {\n      providerAppointmentsQuery[0]({\n        variables: {\n          page: { page: 0, size: 100 },\n          input: {\n            userId: selectedOrder.user.id,\n            checkInTime: new Date(values.checkInTime),\n          },\n        },\n      });\n\n      patientEncounterLimitQuery[0]({\n        variables: {\n          userId: selectedOrder.user.id,\n        },\n      });\n    }\n  }, [selectedOrder.user.id, appointmentInput.checkInTime]);\n\n  const [confirmPayment, confirmPaymentResult] = useMutation<\n    any,\n    MutationConfirmPaymentArgs\n  >(CONFIRM_PAYMENT, {\n    onCompleted(data) {\n      const paymentId = data.confirmPayment.id;\n      const paymentIdx = order.payments?.findIndex((e) => e?.id === paymentId);\n\n      setOrder({\n        ...order,\n        payments: [\n          ...order.payments.slice(0, paymentIdx),\n          {\n            ...order.payments[paymentIdx],\n            status: \"PAID\",\n          },\n          ...order.payments?.slice(paymentIdx + 1),\n        ],\n      });\n    },\n    update: (cache, mutationResult) => {\n      let payment = order.payments?.find(\n        (e) => e?.id === mutationResult.data.confirmPayment.id\n      );\n\n      if (payment) {\n        cache.modify({\n          id: cache.identify(payment),\n          fields: {\n            status(cachedStatus) {\n              return \"PAID\";\n            },\n          },\n        });\n      }\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [requestWaiver, requestWaiverResult] = useMutation<\n    any,\n    MutationRequestPaymentWaiverArgs\n  >(REQUEST_WAIVER, {\n    onCompleted(data) {\n      const paymentId = data.requestPaymentWaiver.id;\n      const paymentIdx = order.payments?.findIndex((e) => e?.id === paymentId);\n\n      setOrder({\n        ...order,\n        payments: [\n          ...order.payments.slice(0, paymentIdx),\n          {\n            ...order.payments[paymentIdx],\n            status: \"PAYMENT_WAIVER_REQUESTED\",\n          },\n          ...order.payments?.slice(paymentIdx + 1),\n        ],\n      });\n    },\n    update: (cache, mutationResult) => {\n      let payment = order.payments?.find(\n        (e) => e?.id === mutationResult.data.requestPaymentWaiver.id\n      );\n\n      if (payment) {\n        cache.modify({\n          id: cache.identify(payment),\n          fields: {\n            status(cachedStatus) {\n              return \"PAYMENT_WAIVER_REQUESTED\";\n            },\n          },\n        });\n      }\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    const surgery = lookupQuery.data?.visitTypes.edges.find(\n      (e) => e?.node.title === \"Surgery\"\n    );\n\n    if (surgery) {\n      setValue(\"visitTypeId\", surgery.node.id);\n    }\n  }, [lookupQuery.data?.visitTypes]);\n\n  const handleFormSubmit = (input: AppointmentInput) => {\n    onSubmit(input);\n  };\n\n  useEffect(() => {\n    let newErrors = [];\n    if (confirmPaymentResult.error) newErrors.push(confirmPaymentResult.error);\n    if (requestWaiverResult.error) newErrors.push(requestWaiverResult.error);\n\n    setErrors(newErrors);\n  }, [confirmPaymentResult.error, requestWaiverResult.error]);\n\n  const handleDates = (rangeInfo: DatesSetArg) => {};\n  const handleDateClick = (arg: EventClickArg) => {};\n\n  const openAgenda =\n    selectedOrder.user.id !== undefined &&\n    appointmentInput.checkInTime !== undefined &&\n    appointmentInput.checkInTime.length > 0;\n\n  const selectedUser = lookupQuery.data?.getByUserTypeTitle.find(\n    (e) => e.id.toString() === selectedOrder.user.id?.toString()\n  );\n\n  const providerAppointments =\n    providerAppointmentsQuery[1].data?.searchAppointments;\n  const scheduledToday = providerAppointments?.totalCount ?? 0;\n  const dailyLimit = patientEncounterLimit?.dailyLimit ?? 0;\n  const overbook = patientEncounterLimit?.overbook ?? 0;\n\n  const bookingLeft = dailyLimit - scheduledToday;\n  const overbooked =\n    dailyLimit < scheduledToday && scheduledToday < dailyLimit + overbook;\n  const fullyBooked = scheduledToday >= dailyLimit + overbook;\n\n  return (\n    <div>\n      <div className=\"z-40 pb-5 bg-white\">\n        <div className=\"flex divide-x-2 divide-gray-300 h-full\">\n          <div className=\"flex-1 px-6\">\n            <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n              <form onSubmit={handleSubmit(handleFormSubmit)}>\n                <p className=\"text-2xl text-teal-700 font-extrabold tracking-wider\">\n                  {title}\n                </p>\n                <div className=\"mt-5\">\n                  <table className=\"table-fixed w-full\">\n                    <thead>\n                      <tr className=\"bg-gray-50\">\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                        >\n                          Billing\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                        >\n                          Code\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                        >\n                          Price\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider\"\n                        ></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {order.payments?.map((p) => (\n                        <tr key={p?.id} className=\"border-t\">\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {p?.billing.item}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {p?.billing.code}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            <span className=\"text-gray-600 tracking-wide\">\n                              ETB{\" \"}\n                            </span>\n                            <span>{p?.billing.price.toLocaleString()}</span>\n                          </td>\n                          <td className=\"px-6 py-4 text-sm\">\n                            {p?.status === \"PAID\" && (\n                              <p className=\"text-green-700 uppercase font-semibold\">\n                                Payment Confirmed\n                              </p>\n                            )}\n                            {p?.status === \"PAYMENT_WAIVER_REQUESTED\" && (\n                              <p className=\"text-yellow-700 uppercase font-semibold animate-pulse\">\n                                Payment waiver requested\n                              </p>\n                            )}\n                            {p?.status === \"NOTPAID\" && (\n                              <MenuComponent\n                                title={\"Options\"}\n                                menus={\n                                  <div className=\"px-1 py-1\">\n                                    <Menu.Item>\n                                      {({ active }) => (\n                                        <button\n                                          disabled\n                                          className={`${\n                                            active\n                                              ? \"bg-teal-500 text-white\"\n                                              : \"text-gray-900\"\n                                          } group flex rounded-md items-center w-full px-2 py-2 text-sm opacity-25`}\n                                          type=\"button\"\n                                          onClick={() => {\n                                            if (p?.id) {\n                                              // confirmPayment({\n                                              //   variables: {\n                                              //     id: p?.id,\n                                              //   },\n                                              // });\n                                            }\n                                          }}\n                                        >\n                                          <PencilIcon\n                                            className=\"w-5 h-5 mr-2 text-teal-700\"\n                                            aria-hidden=\"true\"\n                                          />\n                                          Confirm Payment\n                                        </button>\n                                      )}\n                                    </Menu.Item>\n                                    <Menu.Item>\n                                      {({ active }) => (\n                                        <button\n                                          className={`${\n                                            active\n                                              ? \"bg-teal-500 text-white\"\n                                              : \"text-gray-900\"\n                                          } group flex rounded-md items-center w-full px-2 py-2 text-sm`}\n                                          type=\"button\"\n                                          onClick={() => {\n                                            if (p?.id && order.patientId) {\n                                              requestWaiver({\n                                                variables: {\n                                                  paymentId: p?.id,\n                                                  patientId: order.patientId,\n                                                },\n                                              });\n                                            }\n                                          }}\n                                        >\n                                          <SortAscendingIcon\n                                            className=\"w-5 h-5 mr-2 text-teal-700\"\n                                            aria-hidden=\"true\"\n                                          />\n                                          Request Payment Waiver\n                                        </button>\n                                      )}\n                                    </Menu.Item>\n                                  </div>\n                                }\n                              />\n                            )}\n                          </td>\n                        </tr>\n                      ))}\n                      <tr className=\"border-t\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\"></td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\"></td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          <span className=\"text-gray-600 tracking-wide\">\n                            Total:\n                          </span>\n                          <span>\n                            {` ETB ${order.payments\n                              ?.reduce(\n                                (a, c) =>\n                                  a + (c?.billing ? c?.billing.price : 0),\n                                0\n                              )\n                              .toLocaleString()}`}\n                          </span>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n\n                {order.status === \"ORDERED\" && (\n                  <div>\n                    <div className=\"mt-4\">\n                      <label\n                        htmlFor=\"checkInTime\"\n                        className=\"block text-sm font-medium text-gray-700\"\n                      >\n                        Check-In time\n                      </label>\n                      <input\n                        type=\"datetime-local\"\n                        name=\"checkInTime\"\n                        id=\"checkInTime\"\n                        required\n                        ref={register({ required: true })}\n                        className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n                      />\n                    </div>\n\n                    <div className=\"mt-4\">\n                      <label\n                        htmlFor=\"roomId\"\n                        className=\"block text-sm font-medium text-gray-700\"\n                      >\n                        Room\n                      </label>\n                      <select\n                        id=\"roomId\"\n                        name=\"roomId\"\n                        required\n                        ref={register({ required: true })}\n                        className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                      >\n                        {lookupQuery.data?.rooms.edges.map((e) => (\n                          <option key={e?.node.id} value={e?.node.id}>\n                            {e?.node.title}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n\n                    <div className=\"mt-4\">\n                      <label\n                        htmlFor=\"visitTypeId\"\n                        className=\"block text-sm font-medium text-gray-700\"\n                      >\n                        Visit Type\n                      </label>\n                      <select\n                        id=\"visitTypeId\"\n                        name=\"visitTypeId\"\n                        disabled\n                        ref={register({ required: true })}\n                        className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-gray-100 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                      >\n                        {lookupQuery.data?.visitTypes.edges.map((e) => (\n                          <option key={e?.node.id} value={e?.node.id}>\n                            {e?.node.title}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n\n                    <div className=\"mt-4\">\n                      <div>\n                        <label\n                          htmlFor=\"invoiceNo\"\n                          className=\"block text-sm font-medium text-gray-700\"\n                        >\n                          Invoice\n                        </label>\n                        <input\n                          required\n                          id=\"invoiceNo\"\n                          name=\"invoiceNo\"\n                          ref={register({ required: true })}\n                          className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"mt-4\">\n                      {errors.length > 0 &&\n                        errors.map((e) => (\n                          <p className=\"text-red-600\">Error: {e?.message}</p>\n                        ))}\n                    </div>\n                    <button\n                      type=\"submit\"\n                      disabled={\n                        order.payments.some(\n                          (e) =>\n                            e.status === \"PAYMENT_WAIVER_REQUESTED\" ||\n                            order.payments.every((e) => e.status === \"PAID\")\n                        ) || fullyBooked\n                      }\n                      className={classnames(\n                        \"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md  focus:outline-none\",\n                        {\n                          \"text-white bg-teal-700 hover:bg-teal-800\":\n                            !order.payments.some(\n                              (e) => e.status === \"PAYMENT_WAIVER_REQUESTED\"\n                            ) && !fullyBooked,\n                          \"bg-yellow-700 text-white animate-pulse\":\n                            order.payments.some(\n                              (e) => e.status === \"PAYMENT_WAIVER_REQUESTED\"\n                            ),\n                          \"bg-gray-400 text-white\": fullyBooked,\n                        }\n                      )}\n                    >\n                      <span className=\"ml-2\">\n                        {order.payments.some(\n                          (e) => e.status === \"PAYMENT_WAIVER_REQUESTED\"\n                        ) ? (\n                          \"Payment Waiver Requested\"\n                        ) : (\n                          <span>\n                            {order.payments.every((e) => e.status === \"PAID\")\n                              ? \"All Payments Confirmed\"\n                              : \"Confirm All Payments & Schedule\"}\n                          </span>\n                        )}\n                      </span>\n                    </button>\n                  </div>\n                )}\n              </form>\n            </div>\n          </div>\n          {openAgenda && (\n            <div className=\"flex-1 px-6\">\n              <div className=\"flex justify-between\">\n                <div>\n                  <p className=\"text-xl font-extrabold text-gray-800\">\n                    {`Dr. ${selectedUser?.firstName} ${selectedUser?.lastName}'s Appointments`}\n                  </p>\n                  {!overbooked && !fullyBooked && (\n                    <p className=\"text-green-600 font-semibold\">\n                      {`${scheduledToday} scheduled on this day, ${bookingLeft} left`}\n                    </p>\n                  )}\n\n                  {overbooked && !fullyBooked && (\n                    <p className=\"text-yellow-500 font-semibold\">\n                      {`Provider is overbooked with ${scheduledToday} patients`}\n                    </p>\n                  )}\n\n                  {fullyBooked && (\n                    <p className=\"text-red-500 font-semibold\">\n                      {`Provider is fully booked with ${scheduledToday} patients`}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <button onClick={() => onCancel()}>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                      className=\"text-gray-600 h-8 w-8\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M6 18L18 6M6 6l12 12\"\n                      />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n              <div className=\"mt-8\">\n                <FullCalendar\n                  ref={calendarRef}\n                  plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                  headerToolbar={{\n                    left: \"prev,next today\",\n                    center: \"title\",\n                    right: \"dayGridMonth,timeGridWeek,timeGridDay\",\n                  }}\n                  datesSet={handleDates}\n                  eventClick={handleDateClick}\n                  initialView=\"dayGridMonth\"\n                  events={events}\n                  eventContent={(event) => <CalendarEvent eventInfo={event} />}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/LabOrdersTable.tsx",["1129"],"import { format, parseISO } from \"date-fns\";\nimport React from \"react\";\nimport classnames from \"classnames\";\nimport { LabOrder, LabOrderStatus, LabStatus } from \"../models/models\";\nimport { TablePagination } from \"./table_pagination\";\n\ninterface Props {\n  orders: Array<LabOrder>;\n  onItemClick: (order: LabOrder) => void;\n  totalCount: number;\n  onNext: () => void;\n  onPrev: () => void;\n}\n\nexport const LabOrdersTable: React.FC<Props> = ({\n  orders,\n  onItemClick,\n  totalCount,\n  onNext,\n  onPrev,\n}) => {\n  return (\n    <div className=\"flex flex-col mt-4\">\n      <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n        <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n          <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead>\n                <tr>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Patient\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Ordered By\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Items\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {orders?.map((e) => {\n                  const payments = e.labs\n                    .map((p) => p.payments)\n                    .flat();\n\n                  return (\n                    <tr\n                      key={e?.id}\n                      className=\"hover:bg-gray-100 cursor-pointer\"\n                      onClick={() => e && onItemClick(e)}\n                    >\n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex items-center\">\n                          <div className=\"flex-shrink-0 h-10 w-10\">\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              fill=\"none\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                              className=\"h-10 w-10 text-gray-600\"\n                            >\n                              <path\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth={2}\n                                d=\"M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                              />\n                            </svg>\n                          </div>\n                          <div className=\"ml-4\">\n                            <div className=\"text-sm font-medium text-gray-900\">\n                              {`${e.firstName} ${e.lastName}`}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {e.patientId}\n                            </div>\n                          </div>\n                        </div>\n                      </td>\n\n                      <td className=\"px-6 py-4\">\n                        <div className=\"text-sm text-gray-900\">\n                          {`${e.orderedBy?.firstName} ${e.orderedBy?.lastName}`}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {format(parseISO(e.createdAt), \"MMM d, y\")}\n                        </div>\n                      </td>\n\n                      <td className=\"px-6 py-4\">\n                        <div className=\"text-sm text-gray-900\">\n                          {payments\n                            .map(\n                              (p) => `${p?.billing.item} (${p?.billing.code})`\n                            )\n                            .join(\", \")}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {`ETB ${payments.reduce(\n                            (a, c) => a + (c?.billing ? c?.billing.price : 0),\n                            0\n                          )}`}\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 text-sm text-teal-700 tracking-wide font-semibold\">\n                        <span\n                          className={classnames(\n                            \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\",\n                            {\n                              \"bg-yellow-100 text-yellow-800\":\n                                e?.status ===\n                                  LabOrderStatus.Ordered ||\n                                payments.some(\n                                  (e) =>\n                                    e.status === \"NOTPAID\" ||\n                                    e.status === \"PAYMENT_WAIVER_REQUESTED\"\n                                ),\n                            },\n                            {\n                              \"bg-green-100 text-green-800\": payments.every(\n                                (e) => e.status === \"PAID\"\n                              ),\n                            }\n                          )}\n                        >\n                          {e.status}\n                        </span>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            <TablePagination\n              totalCount={totalCount}\n              onNext={onNext}\n              onPrevious={onPrev}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Patient/PatientDetailsPage.tsx",["1130","1131"],"import { gql, useLazyQuery, useQuery } from \"@apollo/client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport FullCalendar, { DatesSetArg, EventClickArg } from \"@fullcalendar/react\";\nimport { parseISO } from \"date-fns\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { PatientTabs } from \"./patient_tabs\";\nimport { AppointmentForm } from \"../../components/AppointmentForm\";\nimport { Tabs } from \"../../components/tabs\";\nimport { Query } from \"../../models/models\";\nimport { PatientBasicInfo } from \"../../components/PatientBasicInfo\";\nimport { PatientContactInfo } from \"../../components/PatientContactInfo\";\nimport { PatientEmergencyContactInfo } from \"../../components/PatientEmergencyContactInfo\";\nimport { CalendarEvent } from \"../../components/CalendarEvent\";\nimport { parseJwt } from \"../../util\";\nimport { useHistory } from \"react-router-dom\";\nimport { Page } from \"../../models/page\";\nimport { PatientDocuments } from \"../../components/PatientDocuments\";\n\nexport const PATIENT_DETAILS = gql`\n  query PatientDetails($id: ID!) {\n    patient(id: $id) {\n      id\n      firstName\n      lastName\n      dateOfBirth\n      gender\n      idNo\n      occupation\n      martialStatus\n      memo\n      phoneNo\n      phoneNo2\n      homePhone\n      region\n      city\n      subCity\n      kebele\n      woreda\n      email\n      houseNo\n      emergencyContactRel\n      emergencyContactName\n      emergencyContactMemo\n      emergencyContactPhone\n      emergencyContactPhone2\n      paperRecord\n      cardNo\n      paperRecordDocument {\n        id\n        contentType\n        fileName\n        extension\n        hash\n        size\n      }\n      documents {\n        id\n        contentType\n        fileName\n        extension\n        hash\n        size\n      }\n    }\n  }\n`;\n\nconst PATIENT_APPOINTMENTS = gql`\n  query PatientAppointments($id: ID!, $start: Time!, $end: Time!) {\n    findAppointmentsByPatientAndRange(\n      patientId: $id\n      start: $start\n      end: $end\n    ) {\n      id\n      checkInTime\n      credit\n      userId\n      providerName\n      firstName\n      lastName\n      visitType {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const PatientDetailsPage: React.FC<{\n  patientId: string;\n  onAddPage?: (page: any) => void;\n  onUpdateTab?: (page: any) => void;\n}> = ({ patientId, onUpdateTab, onAddPage }) => {\n  const [tabValue, setTabValue] = useState(\"Appointments\");\n  const [dateRange, setDateRange] = useState<{ start: Date; end: Date }>();\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const history = useHistory();\n\n  const calendarRef = React.createRef<FullCalendar>();\n\n  const { data, loading } = useQuery<Query, any>(PATIENT_DETAILS, {\n    variables: {\n      id: patientId,\n    },\n  });\n\n  const appointmentQuery = useLazyQuery<Query, any>(PATIENT_APPOINTMENTS);\n\n  useEffect(() => {\n    if (dateRange?.start !== undefined) {\n      appointmentQuery[0]({\n        variables: {\n          id: patientId,\n          start: dateRange.start,\n          end: dateRange.end,\n        },\n      });\n    }\n  }, [dateRange]);\n\n  useEffect(() => {\n    if (data?.patient && onUpdateTab) {\n      const page: any = {\n        title: `Patient - ${data.patient.firstName} ${data.patient.lastName}`,\n        route: `/patients/${data.patient.id}`,\n        icon: (\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n            className=\"h-4 w-4\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z\"\n            />\n          </svg>\n        ),\n      };\n\n      onUpdateTab(page);\n    }\n  }, [data]);\n\n  const handleDates = (rangeInfo: DatesSetArg) => {\n    setDateRange({ start: rangeInfo.start, end: rangeInfo.end });\n  };\n\n  const handleDateClick = (arg: EventClickArg) => {\n    if (data?.patient) {\n      const token = sessionStorage.getItem(\"accessToken\");\n\n      if (token !== null) {\n        const claim = parseJwt(token);\n        const userType = claim.UserType;\n\n        if (userType === \"Receptionist\") {\n          bottomSheetDispatch({\n            type: \"show\",\n            snapPoint: 1000,\n            children: (\n              <AppointmentForm\n                patientId={data?.patient.id}\n                updateId={arg.event.id}\n                onSuccess={() => {\n                  if (appointmentQuery[1].refetch !== undefined) {\n                    appointmentQuery[1].refetch();\n                  }\n                }}\n              />\n            ),\n          });\n        } else {\n          const page: Page = {\n            title: `Appointment - ${arg.event.extendedProps.patientName}`,\n            cancellable: true,\n            route: `/appointments/${arg.event.id}/patient-details`,\n            icon: (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                className=\"h-4 w-4\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n                />\n              </svg>\n            ),\n          };\n\n          if (onAddPage) {\n            onAddPage(page);\n            history.push(`/appointments/${arg.event.id}/patient-details`);\n          }\n        }\n      }\n    }\n  };\n\n  const handleEditClick = () => {\n    history.push(`/update-patient?patientId=${data?.patient.id}`);\n  };\n\n  const events =\n    appointmentQuery[1].data?.findAppointmentsByPatientAndRange.map((e) => ({\n      id: e?.id,\n      title: `${e?.visitType.title} with ${e?.providerName}`,\n      patientName: `${e?.firstName} ${e?.lastName}`,\n      date: parseISO(e?.checkInTime),\n    }));\n\n  return (\n    <div>\n      <PatientBasicInfo\n        data={data?.patient}\n        loading={loading}\n        onEditClick={handleEditClick}\n      />\n\n      <div className=\"mt-4\">\n        <ul className=\"list-reset flex border-b\">\n          <Tabs\n            value={tabValue}\n            onChange={(value) => setTabValue(value)}\n            tabs={PatientTabs}\n          />\n        </ul>\n        <div className=\"bg-white p-4\">\n          {tabValue === \"Appointments\" && (\n            <div>\n              <div>\n                <button\n                  className=\"bg-teal-700 hover:bg-teal-800 p-3 text-white rounded-md\"\n                  onClick={() => {\n                    if (data?.patient) {\n                      bottomSheetDispatch({\n                        type: \"show\",\n                        snapPoint: 1000,\n                        children: (\n                          <AppointmentForm\n                            patientId={data?.patient.id}\n                            onSuccess={() => {\n                              if (appointmentQuery[1].refetch !== undefined) {\n                                appointmentQuery[1].refetch();\n                              }\n                            }}\n                          />\n                        ),\n                      });\n                    }\n                  }}\n                >\n                  <div className=\"flex items-center space-x-2 tracking-wide\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                      className=\"h-4 w-4\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"\n                      />\n                    </svg>\n\n                    <div>New appointment</div>\n                  </div>\n                </button>\n              </div>\n\n              <div className=\"mt-6\">\n                <FullCalendar\n                  ref={calendarRef}\n                  plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                  headerToolbar={{\n                    left: \"prev,next today\",\n                    center: \"title\",\n                    right: \"dayGridMonth,timeGridWeek,timeGridDay\",\n                  }}\n                  datesSet={handleDates}\n                  eventClick={handleDateClick}\n                  initialView=\"dayGridMonth\"\n                  events={events}\n                  eventContent={(event) => <CalendarEvent eventInfo={event} />}\n                />\n              </div>\n            </div>\n          )}\n          {tabValue === \"Contact Information\" && (\n            <PatientContactInfo data={data?.patient} loading={loading} />\n          )}\n          {tabValue === \"Emergency Contact\" && (\n            <PatientEmergencyContactInfo\n              data={data?.patient}\n              loading={loading}\n            />\n          )}\n          {tabValue === \"Documents\" && (\n            <PatientDocuments data={data?.patient} loading={loading} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PrescriptionOrdersToolbar.tsx",["1132"],"import { gql, useQuery } from \"@apollo/client\";\nimport { format } from \"date-fns\";\nimport React from \"react\";\nimport { Query, QueryGetByUserTypeTitleArgs } from \"../models/models\";\n\nconst GET_PROVIDERS = gql`\n  query Providers($input: String!) {\n    getByUserTypeTitle(input: $input) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\ninterface Props {\n  date: any;\n  onDateChange: (value: any) => void;\n  status: string;\n  onStatusChange: (value: string) => void;\n  searchTerm: string;\n  onSearchTermChange: (value: string) => void;\n  onClear: () => void;\n}\n\nexport const PrescriptionOrdersToolbar: React.FC<Props> = ({\n  date,\n  onDateChange,\n  status,\n  onStatusChange,\n  searchTerm,\n  onSearchTermChange,\n  onClear,\n}) => {\n  const { data } = useQuery<Query, QueryGetByUserTypeTitleArgs>(GET_PROVIDERS, {\n    variables: {\n      input: \"Physician\",\n    },\n  });\n\n  return (\n    <div className=\"flex bg-white w-full h-16 p-4 rounded-md shadow-md justify-between items-center\">\n      <div className=\"flex items-center text-gray-700\">\n        <input\n          type=\"date\"\n          name=\"date\"\n          className=\"border-l-1 border-gray-100 rounded-md\"\n          value={format(date, \"yyyy-MM-dd\")}\n          onChange={(evt) => {\n            const value = evt.target.value;\n            onDateChange(new Date(value));\n          }}\n        />\n\n        <select\n          name=\"status\"\n          value={status ?? \"all\"}\n          className=\"ml-6 border-l-1 border-gray-100 rounded-md\"\n          onChange={(evt) => {\n            onStatusChange(evt.target.value);\n          }}\n        >\n          <option value=\"all\">All statuses</option>\n          <option value=\"Ordered\">Ordered</option>\n          <option value=\"Completed\">Completed</option>\n        </select>\n        <div className=\"ml-6 border-l-2 p-1 pl-6\">\n          <button\n            onClick={onClear}\n            className=\"uppercase text-white tracking-wider text-sm rounded-md bg-teal-600 px-6 py-2\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n      <div>\n        <div className=\"relative mx-auto text-gray-600\">\n          <input\n            className=\"border-2 border-gray-300 bg-white h-10 px-5 pr-16 rounded-lg text-sm focus:outline-none\"\n            type=\"search\"\n            name=\"searchTerm\"\n            placeholder=\"Search\"\n            value={searchTerm}\n            onChange={(evt) => onSearchTermChange(evt.target.value.trim())}\n          />\n          <button type=\"submit\" className=\"absolute right-0 top-0 mt-3 mr-4\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n              className=\"h-4 w-4\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/FileUploaderComponent.tsx",["1133"],"import React, { useState, createRef } from \"react\";\nimport classnames from \"classnames\";\nimport { FileViewer } from \"./FileViewer\";\nimport { Page } from \"react-pdf\";\nimport { Document } from \"react-pdf/dist/esm/entry.webpack\";\nexport interface FileUploader {\n  id?: string;\n  fileObject?: File | undefined;\n  fileUrl?: string | undefined;\n  name: string;\n  size: number | undefined;\n  createdAt: any;\n  contentType: string | undefined;\n}\n\ninterface Props {\n  multiSelect: boolean;\n  accept?: \"image\" | \"document\" | undefined;\n  values?: Array<FileUploader>;\n  disabled?: boolean;\n  onChange: (files: Array<FileUploader>) => void;\n  onDelete: (index: number) => void;\n}\n\nexport const FileUploaderComponent: React.FC<Props> = ({\n  multiSelect,\n  accept,\n  values,\n  disabled,\n  onChange,\n  onDelete,\n}) => {\n  const [fileViewer, setFileViewer] = useState<any>({\n    isOpen: false,\n  });\n\n  const rand = Math.random();\n\n  let inputRef = createRef<HTMLInputElement>();\n\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files !== null) {\n      let files: Array<FileUploader> = [];\n\n      for (let i = 0; i < event.target.files?.length; i++) {\n        files.push({\n          fileObject: event.target.files[i],\n          name: event.target.files[i].name,\n          size: event.target.files[i].size,\n          createdAt: new Date(),\n          contentType: event.target.files[i].type,\n        });\n      }\n\n      onChange(files);\n    }\n  };\n\n  const handleAddClick = () => {\n    if (inputRef.current !== null) {\n      inputRef.current.click();\n    }\n  };\n\n  const handlePreviewClick = (e: FileUploader) => {\n    setFileViewer({\n      isOpen: true,\n      src:\n        e.fileObject !== undefined\n          ? URL.createObjectURL(e.fileObject)\n          : e.fileUrl,\n      type: e.contentType,\n      meta: {\n        name: e.name,\n        type: e.contentType,\n        size: e.size,\n        createdAt: e.createdAt,\n      },\n    });\n  };\n\n  let acceptString;\n  if (accept === \"image\") {\n    acceptString = \"image/*\";\n  } else if (accept === \"document\") {\n    acceptString = \"application/pdf\";\n  } else {\n    acceptString = \"*/*\";\n  }\n\n  return (\n    <div>\n      <div\n        className={classnames(\n          \"flex p-3 border-2 border-gray-300 border-dashed rounded-md\",\n          {\n            \"justify-center\": values === undefined || values.length === 0,\n          }\n        )}\n      >\n        <div\n          hidden={!(values?.length === 0 || values?.length === undefined)}\n          className=\"space-y-1 text-center\"\n        >\n          <svg\n            className=\"mx-auto h-12 w-12 text-gray-400\"\n            stroke=\"currentColor\"\n            fill=\"none\"\n            viewBox=\"0 0 48 48\"\n            aria-hidden=\"true\"\n          >\n            <path\n              d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n          </svg>\n          <div className=\"flex items-center justify-center text-sm text-gray-600\">\n            <label\n              htmlFor={\"file-upload-\" + rand}\n              className=\"relative cursor-pointer rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500\"\n            >\n              <span className=\"text-center\">\n                {multiSelect ? \"Upload multiple files\" : \"Upload a file\"}\n              </span>\n            </label>\n            <input\n              id={\"file-upload-\" + rand}\n              name=\"file-upload\"\n              type=\"file\"\n              className=\"sr-only\"\n              ref={inputRef}\n              multiple={multiSelect}\n              onChange={changeHandler}\n              accept={acceptString}\n              disabled={disabled}\n            />\n          </div>\n          <p className=\"text-xs text-gray-500\">\n            {accept === \"image\" && \"PNG, JPG up to 20MB\"}\n            {accept === \"document\" && \"PDF up to 20MB\"}\n            {accept === undefined && \"Files up to 20MB\"}\n          </p>\n        </div>\n\n        <div\n          hidden={values?.length === 0 || values?.length === undefined}\n          className=\"w-full\"\n        >\n          <div className=\"flex space-x-5 text-sm\">\n            {multiSelect && (\n              <button\n                type=\"button\"\n                className=\"uppercase bg-teal-600 hover:bg-teal-500 text-white px-3 py-1 rounded-lg\"\n                onClick={handleAddClick}\n                disabled={disabled}\n              >\n                Edit\n              </button>\n            )}\n            <button\n              type=\"button\"\n              className=\"uppercase\"\n              onClick={() => onChange([])}\n              disabled={disabled}\n            >\n              Clear\n            </button>\n          </div>\n          <hr className=\"mt-2\" />\n\n          {values?.map((e, i) => (\n            <div key={i} className=\"mt-5 flex justify-between\">\n              <div className=\"flex space-x-4 flex-grow\">\n                {e.contentType?.startsWith(\"image\") && (\n                  <img\n                    className=\"rounded-lg h-16 w-16 object-cover shadow-xl cursor-pointer transform hover:scale-110\"\n                    src={\n                      e.fileObject !== undefined\n                        ? URL.createObjectURL(e.fileObject)\n                        : e.fileUrl\n                    }\n                    onClick={() => handlePreviewClick(e)}\n                  />\n                )}\n\n                {e.contentType === \"application/pdf\" && (\n                  <div\n                    className=\"rounded-lg shadow-xl cursor-pointer transform hover:scale-110\"\n                    onClick={() => handlePreviewClick(e)}\n                  >\n                    <Document\n                      file={\n                        e.fileObject !== undefined\n                          ? URL.createObjectURL(e.fileObject)\n                          : e.fileUrl\n                      }\n                    >\n                      <Page height={60} pageNumber={1} />\n                    </Document>\n                  </div>\n                )}\n\n                <div className=\"flex-grow\">\n                  <input\n                    className=\"text-sm font-semibold p-1 rounded-lg w-full bg-transparent\"\n                    value={e.name.split(\".\")[0]}\n                    disabled={disabled}\n                    onChange={(evt) => {\n                      const ext = e.name.split(\".\")[1];\n                      let files = [...values];\n                      files[i].name = evt.target.value + \".\" + ext;\n\n                      onChange(files);\n                    }}\n                  />\n                  <p className=\"text-sm text-gray-500\">{e.contentType}</p>\n                </div>\n              </div>\n              <div>\n                <button\n                  onClick={() => {\n                    onDelete(i);\n                  }}\n                  disabled={disabled}\n                  type=\"button\"\n                >\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                    fill=\"currentColor\"\n                    className=\"text-gray-500 w-5\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      {fileViewer.isOpen && (\n        <FileViewer\n          isOpen={fileViewer.isOpen}\n          src={fileViewer.src}\n          meta={fileViewer.meta}\n          onClose={() => setFileViewer({ isOpen: false })}\n        />\n      )}\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/CompleteMedicalPrescriptionOrder.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrdersTable.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrdersToolbar.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/ProfileTabs.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AppointmentForm/index.tsx",["1134","1135","1136","1137","1138","1139"],"import React, { useEffect, useState } from \"react\";\n\nimport FullCalendar, { DatesSetArg, EventClickArg } from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport { useForm } from \"react-hook-form\";\nimport { formatDate } from \"../../util\";\nimport { gql, useLazyQuery, useMutation, useQuery } from \"@apollo/client\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { format, parseISO } from \"date-fns\";\n\nimport {\n  AppointmentInput,\n  AppointmentUpdateInput,\n  MutationNewAppointmentArgs,\n  PaginationInput,\n  Query,\n  QueryPatientArgs,\n  QueryPatientEncounterLimitByUserArgs,\n  QuerySearchAppointmentsArgs,\n} from \"../../models/models\";\nimport { CalendarEvent } from \"../CalendarEvent\";\nimport classnames from \"classnames\";\n\nexport const APPOINTMENT_LOOKUPS = gql`\n  query AppointmentLookups(\n    $page: PaginationInput!\n    $userTypeTitle: String!\n    $patientId: ID!\n  ) {\n    rooms(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n\n    visitTypes(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n\n    consultationBillings {\n      id\n      item\n      code\n      price\n      credit\n      remark\n    }\n\n    payForConsultation(patientId: $patientId)\n\n    appointmentStatuses(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n\n    getByUserTypeTitle(input: $userTypeTitle) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\nconst GET_APPOINTMENT = gql`\n  query GetAppointment($id: ID!) {\n    appointment(id: $id) {\n      id\n      checkInTime\n      credit\n      userId\n      visitType {\n        id\n      }\n      room {\n        id\n      }\n    }\n  }\n`;\n\nconst SEARCH_APPOINTMENTS = gql`\n  query SearchAppointments(\n    $input: AppointmentSearchInput!\n    $page: PaginationInput!\n  ) {\n    searchAppointments(input: $input, page: $page) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          providerName\n          checkInTime\n          checkedInTime\n          checkedOutTime\n          patient {\n            id\n            firstName\n            lastName\n            phoneNo\n          }\n          room {\n            id\n            title\n          }\n          visitType {\n            id\n            title\n          }\n          appointmentStatus {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const SAVE_APPOINTMENT = gql`\n  mutation SaveAppointment($input: AppointmentInput!) {\n    newAppointment(input: $input) {\n      id\n    }\n  }\n`;\n\nconst GET_PATIENT = gql`\n  query GetPatient($id: ID!) {\n    patient(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\nconst GET_PATIENT_ENCOUNTER_LIMIT = gql`\n  query PatientEncounterLimit($userId: ID!) {\n    patientEncounterLimitByUser(userId: $userId) {\n      id\n      userId\n      dailyLimit\n      overbook\n    }\n  }\n`;\n\nconst UPDATE_APPOINTMENT = gql`\n  mutation UpdateAppointment($input: AppointmentUpdateInput!) {\n    updateAppointment(input: $input) {\n      id\n    }\n  }\n`;\n\ninterface AppointmentFormProps {\n  patientId: string;\n  updateId?: string;\n  defaultValues?: AppointmentInput;\n  onSuccess: () => void;\n}\n\nexport const AppointmentForm: React.FC<AppointmentFormProps> = ({\n  defaultValues,\n  patientId,\n  updateId,\n  onSuccess,\n}) => {\n  const [paginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 1000,\n  });\n\n  const calendarRef = React.createRef<FullCalendar>();\n\n  const { register, handleSubmit, setValue, getValues, watch } =\n    useForm<AppointmentInput>({\n      defaultValues: defaultValues,\n    });\n\n  const appointmentInput = watch();\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [shouldPayForConsultation, setShouldPayForConsultation] =\n    useState<boolean>(true);\n\n  const [save] = useMutation<any, MutationNewAppointmentArgs>(\n    SAVE_APPOINTMENT,\n    {\n      onCompleted(data) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: `${patientQuery.data?.patient.firstName} ${patientQuery.data?.patient.lastName} has been scheduled successfully`,\n          variant: \"success\",\n        });\n        bottomSheetDispatch({ type: \"hide\" });\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const updateMutation = useMutation<any, any>(UPDATE_APPOINTMENT, {\n    onCompleted(data) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Success\",\n        notifSubTitle: `${patientQuery.data?.patient.firstName} ${patientQuery.data?.patient.lastName} has been scheduled successfully`,\n        variant: \"success\",\n      });\n      bottomSheetDispatch({ type: \"hide\" });\n      onSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const lookupQuery = useQuery<Query, any>(APPOINTMENT_LOOKUPS, {\n    variables: {\n      page: paginationInput,\n      userTypeTitle: \"Physician\",\n      patientId: patientId,\n    },\n  });\n\n  useEffect(() => {\n    if (lookupQuery.data?.payForConsultation) {\n      setShouldPayForConsultation(true);\n    } else {\n      setShouldPayForConsultation(false);\n    }\n  }, [lookupQuery.data?.payForConsultation]);\n\n  const patientQuery = useQuery<Query, QueryPatientArgs>(GET_PATIENT, {\n    variables: { id: patientId },\n  });\n\n  const appointmentQuery = useLazyQuery<Query, any>(GET_APPOINTMENT);\n  useEffect(() => {\n    if (updateId !== undefined) {\n      appointmentQuery[0]({\n        variables: { id: updateId },\n      });\n    }\n  }, [updateId]);\n\n  const patientEncounterLimitQuery = useLazyQuery<\n    Query,\n    QueryPatientEncounterLimitByUserArgs\n  >(GET_PATIENT_ENCOUNTER_LIMIT);\n\n  const patientEncounterLimit =\n    patientEncounterLimitQuery[1].data?.patientEncounterLimitByUser;\n\n  const providerAppointmentsQuery = useLazyQuery<\n    Query,\n    QuerySearchAppointmentsArgs\n  >(SEARCH_APPOINTMENTS);\n\n  const events =\n    providerAppointmentsQuery[1].data?.searchAppointments.edges.map((e) => ({\n      id: e?.node.id,\n      title: `${e?.node.visitType.title} with ${e?.node.providerName}`,\n      patientName: `${e?.node.firstName} ${e?.node.lastName}`,\n      date: parseISO(e?.node.checkInTime),\n    }));\n\n  useEffect(() => {\n    const values = getValues();\n\n    if (values.userId && values.checkInTime) {\n      providerAppointmentsQuery[0]({\n        variables: {\n          page: { page: 0, size: 100 },\n          input: {\n            userId: values.userId,\n            checkInTime: new Date(values.checkInTime),\n          },\n        },\n      });\n\n      patientEncounterLimitQuery[0]({\n        variables: {\n          userId: values.userId,\n        },\n      });\n    }\n  }, [watch(\"userId\"), watch(\"checkInTime\")]);\n\n  useEffect(() => {\n    const data = appointmentQuery[1].data?.appointment;\n\n    if (data !== undefined) {\n      setValue(\"userId\", data.userId);\n      setValue(\"roomId\", data.room.id);\n      setValue(\"visitTypeId\", data.visitType.id);\n      setValue(\n        \"checkInTime\",\n        format(parseISO(data.checkInTime), \"yyyy-MM-dd'T'HH:mm\")\n      );\n    }\n  }, [appointmentQuery[1]]);\n\n  const onSubmit = (input: AppointmentUpdateInput | AppointmentInput) => {\n    input.patientId = patientQuery.data?.patient.id;\n    input.checkInTime = formatDate(input.checkInTime);\n    input.credit = false;\n\n    if (updateId !== undefined) {\n      const updateInput = input as AppointmentUpdateInput;\n      updateInput.id = updateId;\n\n      updateMutation[0]({\n        variables: { input: updateInput },\n      });\n    } else {\n      save({ variables: { input: input as AppointmentInput } });\n    }\n  };\n\n  const handleDates = (rangeInfo: DatesSetArg) => {};\n  const handleDateClick = (arg: EventClickArg) => {};\n\n  const openAgenda =\n    appointmentInput.userId !== undefined &&\n    appointmentInput.userId.length > 0 &&\n    appointmentInput.checkInTime !== undefined &&\n    appointmentInput.checkInTime.length > 0;\n\n  const selectedUser = lookupQuery.data?.getByUserTypeTitle.find(\n    (e) => e.id.toString() === appointmentInput?.userId?.toString()\n  );\n\n  const providerAppointments =\n    providerAppointmentsQuery[1].data?.searchAppointments;\n  const scheduledToday = providerAppointments?.totalCount ?? 0;\n  const dailyLimit = patientEncounterLimit?.dailyLimit ?? 0;\n  const overbook = patientEncounterLimit?.overbook ?? 0;\n\n\n  const bookingLeft = dailyLimit - scheduledToday;\n  const overbooked =\n    dailyLimit < scheduledToday && scheduledToday < dailyLimit + overbook;\n  const fullyBooked = scheduledToday >= dailyLimit + overbook;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div className=\"z-40 pb-5 bg-white\">\n        <div className=\"flex divide-x-2 divide-gray-300 h-full\">\n          <div\n            className={classnames(\"flex-1 px-6\", {\n              \"mx-20\": !openAgenda,\n            })}\n          >\n            <p className=\"text-xl font-extrabold text-gray-800\">\n              {`Scheduling ${patientQuery.data?.patient.firstName} ${patientQuery.data?.patient.lastName}`}\n            </p>\n\n            <p className=\"text-gray-500\">{patientQuery.data?.patient.id}</p>\n\n            <div className=\"mt-8\">\n              <div className=\"mt-4\">\n                <label\n                  htmlFor=\"provider\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Provider\n                </label>\n                <select\n                  id=\"userId\"\n                  name=\"userId\"\n                  required\n                  ref={register({ required: true })}\n                  className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                >\n                  {lookupQuery.data?.getByUserTypeTitle.map((e) => (\n                    <option\n                      key={e?.id}\n                      value={e?.id}\n                    >{`Dr. ${e?.firstName} ${e?.lastName}`}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"mt-4\">\n                <label\n                  htmlFor=\"checkInTime\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Check-In time\n                </label>\n                <input\n                  type=\"datetime-local\"\n                  name=\"checkInTime\"\n                  id=\"checkInTime\"\n                  required\n                  ref={register({ required: true })}\n                  className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n                />\n              </div>\n\n              <div className=\"mt-4\">\n                <label\n                  htmlFor=\"roomId\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Room\n                </label>\n                <select\n                  id=\"roomId\"\n                  name=\"roomId\"\n                  required\n                  ref={register({ required: true })}\n                  className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                >\n                  {lookupQuery.data?.rooms.edges.map((e) => (\n                    <option key={e?.node.id} value={e?.node.id}>\n                      {e?.node.title}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"mt-4\">\n                <label\n                  htmlFor=\"visitTypeId\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Visit Type\n                </label>\n                <select\n                  id=\"visitTypeId\"\n                  name=\"visitTypeId\"\n                  required\n                  ref={register({ required: true })}\n                  className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                >\n                  {lookupQuery.data?.visitTypes.edges.map((e: any) => (\n                    <option key={e?.node.id} value={e?.node.id}>\n                      {e?.node.title}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              {shouldPayForConsultation && (\n                <div className=\"mt-4\">\n                  <label\n                    htmlFor=\"billingId\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Billing\n                  </label>\n                  <select\n                    id=\"billingId\"\n                    name=\"billingId\"\n                    ref={register({ required: true })}\n                    className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                  >\n                    {lookupQuery.data?.consultationBillings.map((e) => (\n                      <option key={e?.id} value={e?.id}>\n                        {e?.item}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              )}\n\n              {shouldPayForConsultation && (\n                <div className=\"mt-4\">\n                  <label\n                    htmlFor=\"invoiceNo\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Consultation Invoice\n                  </label>\n                  <input\n                    id=\"invoiceNo\"\n                    name=\"invoiceNo\"\n                    ref={register({ required: true })}\n                    className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                  />\n                </div>\n              )}\n\n              <div className=\"py-3 mt-2 bg-gray-50 text-right\">\n                <button\n                  type=\"submit\"\n                  disabled={fullyBooked}\n                  className={classnames(\n                    \"inline-flex justify-center w-full py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white focus:outline-none\",\n                    {\n                      \"bg-gray-400\": fullyBooked,\n                      \"bg-teal-600 hover:bg-teal-700\": !fullyBooked,\n                    }\n                  )}\n                >\n                  <span className=\"ml-2\">Schedule</span>\n                </button>\n              </div>\n            </div>\n          </div>\n          {openAgenda && (\n            <div className=\"flex-1 px-6\">\n              <div className=\"flex justify-between\">\n                <div>\n                  <p className=\"text-xl font-extrabold text-gray-800\">\n                    {`Dr. ${selectedUser?.firstName} ${selectedUser?.lastName}'s Appointments`}\n                  </p>\n                  {!overbooked && !fullyBooked && (\n                    <p className=\"text-green-600 font-semibold\">\n                      {`${scheduledToday} scheduled on this day, ${bookingLeft} left`}\n                    </p>\n                  )}\n\n                  {overbooked && !fullyBooked && (\n                    <p className=\"text-yellow-500 font-semibold\">\n                      {`Provider is overbooked with ${scheduledToday} patients`}\n                    </p>\n                  )}\n\n                  {fullyBooked && (\n                    <p className=\"text-red-500 font-semibold\">\n                      {`Provider is fully booked with ${scheduledToday} patients`}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <button\n                    onClick={() => {\n                      bottomSheetDispatch({ type: \"hide\" });\n                    }}\n                  >\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                      className=\"text-gray-600 h-8 w-8\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M6 18L18 6M6 6l12 12\"\n                      />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n              <div className=\"mt-8\">\n                <FullCalendar\n                  ref={calendarRef}\n                  plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                  headerToolbar={{\n                    left: \"prev,next today\",\n                    center: \"title\",\n                    right: \"dayGridMonth,timeGridWeek,timeGridDay\",\n                  }}\n                  datesSet={handleDates}\n                  eventClick={handleDateClick}\n                  initialView=\"dayGridMonth\"\n                  events={events}\n                  eventContent={(event) => <CalendarEvent eventInfo={event} />}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </form>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/PatientEncounterLimitPage.tsx",["1140","1141","1142"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { AddPatientEncounterLimitForm } from \"../../components/AddPatientEncounterLimitForm\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport { UpdatePatientEncounterLimitForm } from \"../../components/UpdatePatientEncounterLimitForm\";\nimport {\n  Maybe,\n  PaginationInput,\n  PatientEncounterLimit,\n  PatientEncounterLimitEdge,\n  Query,\n  QueryPatientEncounterLimitsArgs,\n} from \"../../models/models\";\nimport { useNotificationDispatch } from \"../../notification\";\n\nexport const PATIENT_ENCOUNTER_LIMITS = gql`\n  query PatientEncounterLimits($page: PaginationInput!) {\n    patientEncounterLimits(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          user {\n            id\n            firstName\n            lastName\n          }\n          dailyLimit\n          overbook\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nexport const PatientEncounterLimitPage: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryPatientEncounterLimitsArgs>(\n    PATIENT_ENCOUNTER_LIMITS,\n    {\n      variables: { page: paginationInput },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.patientEncounterLimits.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleAdd = () => {\n    bottomSheetDispatch({\n      type: \"show\",\n      snapPoint: 500,\n      children: (\n        <AddPatientEncounterLimitForm\n          onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n          onSuccess={() => {\n            refetch();\n            bottomSheetDispatch({ type: \"hide\" });\n          }}\n        />\n      ),\n    });\n  };\n\n  const handleUpdate = (item: PatientEncounterLimit) => {\n    bottomSheetDispatch({\n      type: \"show\",\n      snapPoint: 500,\n      children: (\n        <UpdatePatientEncounterLimitForm\n          values={item}\n          onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n          onSuccess={() => {\n            refetch();\n            bottomSheetDispatch({ type: \"hide\" });\n          }}\n        />\n      ),\n    });\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"overflow-x-auto\">\n        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  colSpan={2}\n                  className=\"px-6 py-3 bg-gray-700 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                >\n                  Patient Encounter Limits\n                </th>\n\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                >\n                  <button\n                    onClick={() => handleAdd()}\n                    className=\"uppercase bg-gray-800 hover:bg-gray-600 py-1 px-2 rounded-md text-sm\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"h-6 w-6\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </div>\n                      <div className=\"font-semibold\">Add</div>\n                    </div>\n                  </button>\n                </th>\n              </tr>\n              <tr>\n                <th colSpan={6}>\n                  <input\n                    type=\"text\"\n                    name=\"search\"\n                    placeholder=\"Search\"\n                    className=\"p-3 pl-4 block w-full sm:text-md border-gray-300\"\n                  />\n                </th>\n              </tr>\n              <tr className=\"bg-gray-50\">\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  User\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Daily limit\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Overbook\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {data?.patientEncounterLimits.edges.map(\n                (value: Maybe<PatientEncounterLimitEdge>) => (\n                  <tr\n                    key={value?.node.id}\n                    className=\"hover:bg-gray-100\"\n                    onClick={() => value?.node && handleUpdate(value?.node)}\n                  >\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {`${value?.node.user.firstName} ${value?.node.user.lastName}`}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {value?.node.dailyLimit}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {value?.node.overbook}\n                    </td>\n                  </tr>\n                )\n              )}\n            </tbody>\n          </table>\n          <TablePagination\n            totalCount={data?.patientEncounterLimits.totalCount ?? 0}\n            onNext={handleNextClick}\n            onPrevious={handlePreviousClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/UserAdminPage.tsx",["1143"],"import React, { useEffect, useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport classnames from \"classnames\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport {\n  Maybe,\n  PaginationInput,\n  Query,\n  QueryUsersArgs,\n  UserEdge,\n} from \"../../models/models\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport { UserRegistrationForm } from \"../../components/UserRegistrationForm\";\nimport { UserUpdateForm } from \"../../components/UserUpdateForm\";\n\nconst USERS = gql`\n  query Users($page: PaginationInput!, $filter: UserFilter) {\n    users(page: $page, filter: $filter) {\n      totalCount\n      edges {\n        node {\n          id\n          firstName\n          lastName\n          email\n          confirmed\n          locked\n          active\n          userTypes {\n            id\n            title\n          }\n          signature {\n            id\n            size\n            hash\n            fileName\n            extension\n            contentType\n          }\n          profilePic {\n            id\n            size\n            hash\n            fileName\n            extension\n            contentType\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 20;\n\nexport const UserAdminPage: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryUsersArgs>(USERS, {\n    variables: { page: paginationInput },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.users.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"overflow-x-auto\">\n        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  colSpan={3}\n                  className=\"px-6 py-3 bg-gray-700 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                >\n                  Users\n                </th>\n\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                >\n                  <button\n                    onClick={() =>\n                      bottomSheetDispatch({\n                        type: \"show\",\n                        snapPoint: 0,\n                        children: (\n                          <div className=\"px-10 py-4\">\n                            <div className=\"\">\n                              <div className=\"float-right\">\n                                <button\n                                  onClick={() => {\n                                    bottomSheetDispatch({ type: \"hide\" });\n                                  }}\n                                >\n                                  <svg\n                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                    fill=\"none\"\n                                    viewBox=\"0 0 24 24\"\n                                    stroke=\"currentColor\"\n                                    className=\"h-8 w-8 text-gray-500\"\n                                  >\n                                    <path\n                                      strokeLinecap=\"round\"\n                                      strokeLinejoin=\"round\"\n                                      strokeWidth={2}\n                                      d=\"M6 18L18 6M6 6l12 12\"\n                                    />\n                                  </svg>\n                                </button>\n                              </div>\n                              <UserRegistrationForm\n                                onSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"User has been saved successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                              />\n                            </div>\n                          </div>\n                        ),\n                      })\n                    }\n                    className=\"uppercase bg-gray-800 hover:bg-gray-600 py-1 px-2 rounded-md text-sm\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"h-6 w-6\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </div>\n                      <div className=\"font-semibold\">Add</div>\n                    </div>\n                  </button>\n                </th>\n              </tr>\n              <tr>\n                <th colSpan={4}>\n                  <input\n                    type=\"text\"\n                    name=\"search\"\n                    placeholder=\"Search\"\n                    className=\"p-3 pl-4 block w-full sm:text-md border-gray-300\"\n                  />\n                </th>\n              </tr>\n              <tr className=\"bg-gray-50\">\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  User\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Email\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  User Type\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Status\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {data?.users.edges.map((value: Maybe<UserEdge>) => (\n                <tr\n                  key={value?.node.id}\n                  className=\"hover:bg-gray-100 cursor-pointer\"\n                  onClick={() => {\n                    bottomSheetDispatch({\n                      type: \"show\",\n                      snapPoint: 0,\n                      children: (\n                        <div className=\"px-10 py-4\">\n                          <div className=\"\">\n                            <div className=\"float-right\">\n                              <button\n                                onClick={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n                                }}\n                              >\n                                <svg\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  fill=\"none\"\n                                  viewBox=\"0 0 24 24\"\n                                  stroke=\"currentColor\"\n                                  className=\"h-8 w-8 text-gray-500\"\n                                >\n                                  <path\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    strokeWidth={2}\n                                    d=\"M6 18L18 6M6 6l12 12\"\n                                  />\n                                </svg>\n                              </button>\n                            </div>\n                            {value?.node && (\n                              <UserUpdateForm\n                                values={value?.node}\n                                onSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"User has been updated successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onResetSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Password successfully reset\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                              />\n                            )}\n                          </div>\n                        </div>\n                      ),\n                    });\n                  }}\n                >\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {`${value?.node.firstName} ${value?.node.lastName}`}\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {value?.node.email}\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {value?.node.userTypes.map((e) => e?.title).join(\", \")}\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    <span\n                      className={classnames(\n                        \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\",\n                        {\n                          \"bg-yellow-100 text-yellow-800\":\n                            value?.node.active === false,\n                        },\n                        {\n                          \"bg-green-100 text-green-800\":\n                            value?.node.active === true,\n                        }\n                      )}\n                    >\n                      {value?.node.active ? \"Active\" : \"Inactive\"}\n                    </span>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <TablePagination\n            totalCount={data?.users.totalCount ?? 0}\n            onNext={handleNextClick}\n            onPrevious={handlePreviousClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/SurgicalProcedureTypeAdminPage.tsx",["1144","1145","1146","1147","1148","1149","1150","1151"],"import React, { useState } from \"react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport classnames from \"classnames\";\nimport { BILLINGS } from \"./BillingsAdminPage\";\nimport { SUPPLIES } from \"./SupplyAdminPage\";\nimport {\n  Maybe,\n  MutationSaveSurgicalProcedureTypeArgs,\n  PaginationInput,\n  Query,\n  QueryBillingsArgs,\n  QuerySuppliesArgs,\n  QuerySurgicalProceduresArgs,\n  SurgicalProcedureTypeEdge,\n  SurgicalProcedureTypeInput,\n} from \"../../models/models\";\nimport { UpdateSurgicalProcedureTypeForm } from \"../../components/UpdateSurgicalProcedureTypeForm\";\nimport { AddSurgicalProcedureTypeForm } from \"../../components/AddSurgicalProcedureTypeForm\";\n\nconst SURGICAL_PROCEDURE_TYPES = gql`\n  query SurgicalProcedureTypes($page: PaginationInput!, $searchTerm: String) {\n    surgicalProcedureTypes(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          active\n          billings {\n            id\n            item\n            code\n          }\n          supplies {\n            id\n            title\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 20;\n\nexport const SurgicalProcedureTypesPage: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const { data, refetch } = useQuery<Query, QuerySurgicalProceduresArgs>(\n    SURGICAL_PROCEDURE_TYPES,\n    {\n      variables: { page: paginationInput },\n    }\n  );\n\n  const handleNextClick = () => {\n    const totalPages = data?.surgicalProcedureTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"overflow-x-auto\">\n        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  colSpan={4}\n                  className=\"px-6 py-3 bg-gray-700 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                >\n                  Surgical Procedures\n                </th>\n\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                >\n                  <button\n                    onClick={() =>\n                      bottomSheetDispatch({\n                        type: \"show\",\n                        snapPoint: 0,\n                        children: (\n                          <AddSurgicalProcedureTypeForm\n                            onSuccess={() => {\n                              bottomSheetDispatch({ type: \"hide\" });\n\n                              notifDispatch({\n                                type: \"show\",\n                                notifTitle: \"Success\",\n                                notifSubTitle:\n                                  \"Surgical Procedure has been saved successfully\",\n                                variant: \"success\",\n                              });\n\n                              refetch();\n                            }}\n                            onCancel={() =>\n                              bottomSheetDispatch({ type: \"hide\" })\n                            }\n                          />\n                        ),\n                      })\n                    }\n                    className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"h-6 w-6\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </div>\n                      <div className=\"font-semibold\">Add</div>\n                    </div>\n                  </button>\n                </th>\n              </tr>\n              <tr className=\"bg-gray-100\">\n                <th colSpan={5}>\n                  <input\n                    type=\"text\"\n                    name=\"search\"\n                    placeholder=\"Search\"\n                    className=\"p-3 pl-4 block w-full sm:text-md border-gray-300\"\n                  />\n                </th>\n              </tr>\n              <tr className=\"bg-gray-100\">\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Title\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Billings\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Supplies\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Status\n                </th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {data?.surgicalProcedureTypes.edges.map(\n                (value: Maybe<SurgicalProcedureTypeEdge>) => (\n                  <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                    <td className=\"px-6 py-4text-sm text-gray-900\">\n                      {value?.node.title}\n                    </td>\n\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {value?.node.billings.map((e, i) => (\n                        <span\n                          key={e?.id}\n                          className={classnames(\n                            \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800\",\n                            {\n                              \"ml-2\": i !== 0,\n                            }\n                          )}\n                        >\n                          {e?.item}\n                        </span>\n                      ))}\n                    </td>\n\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {value?.node.supplies.map((e, i) => (\n                        <span\n                          key={e?.id}\n                          className={classnames(\n                            \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800\",\n                            {\n                              \"ml-2\": i !== 0,\n                            }\n                          )}\n                        >\n                          {e?.title}\n                        </span>\n                      ))}\n                    </td>\n\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      <span\n                        className={classnames(\n                          \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\",\n                          {\n                            \"bg-yellow-100 text-yellow-800\":\n                              value?.node.active === false,\n                          },\n                          {\n                            \"bg-green-100 text-green-800\":\n                              value?.node.active === true,\n                          }\n                        )}\n                      >\n                        {value?.node.active ? \"Active\" : \"Inactive\"}\n                      </span>\n                    </td>\n\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <button\n                        onClick={() => {\n                          bottomSheetDispatch({\n                            type: \"show\",\n                            snapPoint: 0,\n                            children: (\n                              <UpdateSurgicalProcedureTypeForm\n                                onUpdateSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Surgical procedure has been updated successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onDeleteSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Surgical procedure has been deleted successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onCancel={() =>\n                                  bottomSheetDispatch({ type: \"hide\" })\n                                }\n                                values={value?.node}\n                              />\n                            ),\n                          });\n                        }}\n                        className=\"text-indigo-600 hover:text-indigo-900\"\n                      >\n                        Edit\n                      </button>\n                    </td>\n                  </tr>\n                )\n              )}\n            </tbody>\n          </table>\n          <TablePagination\n            totalCount={data?.surgicalProcedureTypes.totalCount ?? 0}\n            onNext={handleNextClick}\n            onPrevious={handlePreviousClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/MedicationAdminPage.tsx",["1152"],"import React, { useEffect, useState } from \"react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport {\n  Maybe,\n  Medication,\n  MedicationEdge,\n  MedicationInput,\n  MedicationUpdateInput,\n  MutationDeleteMedicationArgs,\n  MutationSaveMedicationArgs,\n  MutationUpdateMedicationArgs,\n  PaginationInput,\n  Query,\n  QueryMedicationsArgs,\n} from \"../../models/models\";\n\nconst MEDICATIONS = gql`\n  query Medications($page: PaginationInput!, $searchTerm: String) {\n    medications(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      edges {\n        node {\n          id\n          itemId\n          inscription\n          subscription\n          price\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 20;\n\nexport const MedicationsPage: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryMedicationsArgs>(MEDICATIONS, {\n    variables: { page: paginationInput },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.medications.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"overflow-x-auto\">\n        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  colSpan={2}\n                  className=\"px-6 py-3 bg-gray-700 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                >\n                  Medications\n                </th>\n\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                >\n                  <button\n                    onClick={() =>\n                      bottomSheetDispatch({\n                        type: \"show\",\n                        snapPoint: 0,\n                        children: (\n                          <AddMedicationForm\n                            onSuccess={() => {\n                              bottomSheetDispatch({ type: \"hide\" });\n\n                              notifDispatch({\n                                type: \"show\",\n                                notifTitle: \"Success\",\n                                notifSubTitle:\n                                  \"Medication has been saved successfully\",\n                                variant: \"success\",\n                              });\n\n                              refetch();\n                            }}\n                            onCancel={() =>\n                              bottomSheetDispatch({ type: \"hide\" })\n                            }\n                          />\n                        ),\n                      })\n                    }\n                    className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"h-6 w-6\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </div>\n                      <div className=\"font-semibold\">Add</div>\n                    </div>\n                  </button>\n                </th>\n              </tr>\n              <tr className=\"bg-gray-100\">\n                <th colSpan={3}>\n                  <input\n                    type=\"text\"\n                    name=\"search\"\n                    placeholder=\"Search\"\n                    className=\"p-3 pl-4 block w-full sm:text-md border-gray-300\"\n                  />\n                </th>\n              </tr>\n              <tr className=\"bg-gray-100\">\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Inscription\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Price\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                ></th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {data?.medications.edges.map((value: Maybe<MedicationEdge>) => (\n                <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {value?.node.inscription}\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {value?.node.price}\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <button\n                      onClick={() => {\n                        bottomSheetDispatch({\n                          type: \"show\",\n                          snapPoint: 500,\n                          children: (\n                            <UpdateMedicationForm\n                              onUpdateSuccess={() => {\n                                bottomSheetDispatch({ type: \"hide\" });\n\n                                notifDispatch({\n                                  type: \"show\",\n                                  notifTitle: \"Success\",\n                                  notifSubTitle:\n                                    \"Medication has been updated successfully\",\n                                  variant: \"success\",\n                                });\n\n                                refetch();\n                              }}\n                              onDeleteSuccess={() => {\n                                bottomSheetDispatch({ type: \"hide\" });\n\n                                notifDispatch({\n                                  type: \"show\",\n                                  notifTitle: \"Success\",\n                                  notifSubTitle:\n                                    \"Medication has been deleted successfully\",\n                                  variant: \"success\",\n                                });\n\n                                refetch();\n                              }}\n                              onCancel={() =>\n                                bottomSheetDispatch({ type: \"hide\" })\n                              }\n                              values={value?.node}\n                            />\n                          ),\n                        });\n                      }}\n                      className=\"text-indigo-600 hover:text-indigo-900\"\n                    >\n                      Edit\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <TablePagination\n            totalCount={data?.medications.totalCount ?? 0}\n            onNext={handleNextClick}\n            onPrevious={handlePreviousClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SAVE_MEDICATION = gql`\n  mutation SaveMedication($input: MedicationInput!) {\n    saveMedication(input: $input) {\n      id\n    }\n  }\n`;\n\ninterface AddMedicationProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst AddMedicationForm: React.FC<AddMedicationProps> = ({\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<MedicationInput>();\n\n  const [save, { error }] = useMutation<any, MutationSaveMedicationArgs>(\n    SAVE_MEDICATION,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSubmit = (data: MedicationInput) => {\n    save({\n      variables: {\n        input: {\n          inscription: data.inscription,\n          price: data.price,\n        },\n      },\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Add Medication\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"inscription\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Inscription\n            </label>\n            <input\n              id=\"inscription\"\n              type=\"text\"\n              name=\"inscription\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"price\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Price\n            </label>\n            <input\n              id=\"price\"\n              type=\"text\"\n              name=\"price\"\n              ref={register}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst UPDATE_MEDICATION = gql`\n  mutation UpdateMedication($input: MedicationUpdateInput!) {\n    updateMedication(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_MEDICATION = gql`\n  mutation DeleteMedication($id: ID!) {\n    deleteMedication(id: $id)\n  }\n`;\n\ninterface UpdateMedicationProps {\n  values: Medication | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst UpdateMedicationForm: React.FC<UpdateMedicationProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<MedicationUpdateInput>({\n    defaultValues: {\n      inscription: values?.inscription,\n      price: values?.price,\n    },\n  });\n\n  const [save, { error }] = useMutation<any, MutationUpdateMedicationArgs>(\n    UPDATE_MEDICATION,\n    {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteMedication] = useMutation<any, MutationDeleteMedicationArgs>(\n    DELETE_MEDICATION,\n    {\n      onCompleted(data) {\n        onDeleteSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onUpdateSubmit = (data: MedicationUpdateInput) => {\n    if (values?.id !== undefined) {\n      data.id = values?.id;\n\n      save({\n        variables: {\n          input: data,\n        },\n      });\n    }\n  };\n\n  const onDeleteSubmit = () => {\n    if (values?.id !== undefined) {\n      deleteMedication({ variables: { id: values.id } });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update Medication\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"inscription\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Inscription\n            </label>\n            <input\n              id=\"inscription\"\n              type=\"text\"\n              name=\"inscription\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"price\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Price\n            </label>\n            <input\n              id=\"price\"\n              type=\"text\"\n              name=\"price\"\n              ref={register}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/SupplyAdminPage.tsx",["1153","1154"],"import React, { useEffect, useState } from \"react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport { BILLINGS } from \"./BillingsAdminPage\";\nimport classnames from \"classnames\";\nimport {\n  Maybe,\n  MutationDeleteSupplyArgs,\n  MutationSaveSupplyArgs,\n  MutationUpdateSupplyArgs,\n  PaginationInput,\n  Query,\n  QueryBillingsArgs,\n  QuerySuppliesArgs,\n  Supply,\n  SupplyEdge,\n  SupplyInput,\n  SupplyUpdateInput,\n} from \"../../models/models\";\n\nexport const SUPPLIES = gql`\n  query Supply($page: PaginationInput!, $searchTerm: String) {\n    supplies(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          active\n          billings {\n            id\n            item\n            code\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 20;\n\nexport const SupplyPage: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const { data, refetch } = useQuery<Query, QuerySuppliesArgs>(SUPPLIES, {\n    variables: { page: paginationInput },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.supplies.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"overflow-x-auto\">\n        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  colSpan={3}\n                  className=\"px-6 py-3 bg-gray-700 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                >\n                  Supplies\n                </th>\n\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                >\n                  <button\n                    onClick={() =>\n                      bottomSheetDispatch({\n                        type: \"show\",\n                        snapPoint: 0,\n                        children: (\n                          <AddSupplyForm\n                            onSuccess={() => {\n                              bottomSheetDispatch({ type: \"hide\" });\n\n                              notifDispatch({\n                                type: \"show\",\n                                notifTitle: \"Success\",\n                                notifSubTitle:\n                                  \"Supply has been saved successfully\",\n                                variant: \"success\",\n                              });\n\n                              refetch();\n                            }}\n                            onCancel={() =>\n                              bottomSheetDispatch({ type: \"hide\" })\n                            }\n                          />\n                        ),\n                      })\n                    }\n                    className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"h-6 w-6\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </div>\n                      <div className=\"font-semibold\">Add</div>\n                    </div>\n                  </button>\n                </th>\n              </tr>\n              <tr className=\"bg-gray-100\">\n                <th colSpan={4}>\n                  <input\n                    type=\"text\"\n                    name=\"search\"\n                    placeholder=\"Search\"\n                    className=\"p-3 pl-4 block w-full sm:text-md border-gray-300\"\n                  />\n                </th>\n              </tr>\n              <tr className=\"bg-gray-100\">\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Title\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Billings\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Status\n                </th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {data?.supplies.edges.map((value: Maybe<SupplyEdge>) => (\n                <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {value?.node.title}\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {value?.node.billings.map((e, i) => (\n                      <span\n                        key={e?.id}\n                        className={classnames(\n                          \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800\",\n                          {\n                            \"ml-2\": i !== 0,\n                          }\n                        )}\n                      >\n                        {e?.item}\n                      </span>\n                    ))}\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    <span\n                      className={classnames(\n                        \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\",\n                        {\n                          \"bg-yellow-100 text-yellow-800\":\n                            value?.node.active === false,\n                        },\n                        {\n                          \"bg-green-100 text-green-800\":\n                            value?.node.active === true,\n                        }\n                      )}\n                    >\n                      {value?.node.active ? \"Active\" : \"Inactive\"}\n                    </span>\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <button\n                      onClick={() => {\n                        bottomSheetDispatch({\n                          type: \"show\",\n                          snapPoint: 500,\n                          children: (\n                            <UpdateSupplyForm\n                              onUpdateSuccess={() => {\n                                bottomSheetDispatch({ type: \"hide\" });\n\n                                notifDispatch({\n                                  type: \"show\",\n                                  notifTitle: \"Success\",\n                                  notifSubTitle:\n                                    \"Supply has been updated successfully\",\n                                  variant: \"success\",\n                                });\n\n                                refetch();\n                              }}\n                              onDeleteSuccess={() => {\n                                bottomSheetDispatch({ type: \"hide\" });\n\n                                notifDispatch({\n                                  type: \"show\",\n                                  notifTitle: \"Success\",\n                                  notifSubTitle:\n                                    \"Supply has been deleted successfully\",\n                                  variant: \"success\",\n                                });\n\n                                refetch();\n                              }}\n                              onCancel={() =>\n                                bottomSheetDispatch({ type: \"hide\" })\n                              }\n                              values={value?.node}\n                            />\n                          ),\n                        });\n                      }}\n                      className=\"text-indigo-600 hover:text-indigo-900\"\n                    >\n                      Edit\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <TablePagination\n            totalCount={data?.supplies.totalCount ?? 0}\n            onNext={handleNextClick}\n            onPrevious={handlePreviousClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SAVE_SUPPLY = gql`\n  mutation SaveSupply($input: SupplyInput!) {\n    saveSupply(input: $input) {\n      id\n    }\n  }\n`;\n\ninterface AddSupplyProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst AddSupplyForm: React.FC<AddSupplyProps> = ({ onSuccess, onCancel }) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<SupplyInput>({\n    defaultValues: {\n      active: true,\n    },\n  });\n\n  const { data } = useQuery<Query, QueryBillingsArgs>(BILLINGS, {\n    variables: { page: { page: 0, size: 1000 } },\n  });\n\n  const [save, { error }] = useMutation<any, MutationSaveSupplyArgs>(\n    SAVE_SUPPLY,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSubmit = (data: SupplyInput) => {\n    save({\n      variables: {\n        input: {\n          title: data.title,\n          active: data.active,\n          billingIds: data.billingIds,\n        },\n      },\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">Add Supply</p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              id=\"title\"\n              type=\"text\"\n              name=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"billingIds\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Billings\n            </label>\n            <select\n              id=\"billingIds\"\n              name=\"billingIds\"\n              required\n              multiple\n              ref={register({ required: true })}\n              className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n            >\n              {data?.billings.edges.map((e: any) => (\n                <option key={e?.node.id} value={e?.node.id}>\n                  {e?.node.item}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"active\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Status\n            </label>\n            <select\n              required\n              name=\"active\"\n              ref={register({ required: true })}\n              className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n            >\n              <option value={\"true\"}>Active</option>\n              <option value={\"false\"}>Inactive</option>\n            </select>\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst UPDATE_SUPPLY = gql`\n  mutation UpdateSupply($input: SupplyUpdateInput!) {\n    updateSupply(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_SUPPLY = gql`\n  mutation DeleteSupply($id: ID!) {\n    deleteSupply(id: $id)\n  }\n`;\n\ninterface UpdateSupplyProps {\n  values: Supply | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst UpdateSupplyForm: React.FC<UpdateSupplyProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit, setValue } = useForm<SupplyUpdateInput>();\n\n  const { data } = useQuery<Query, QueryBillingsArgs>(BILLINGS, {\n    variables: { page: { page: 0, size: 1000 } },\n  });\n\n  useEffect(() => {\n    setValue(\"title\", values?.title);\n    setValue(\"active\", values?.active);\n    setValue(\n      \"billingIds\",\n      values?.billings.map((e) => e?.id.toString())\n    );\n  }, [values, data]);\n\n  const [save, { error }] = useMutation<any, MutationUpdateSupplyArgs>(\n    UPDATE_SUPPLY,\n    {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteSupply] = useMutation<any, MutationDeleteSupplyArgs>(\n    DELETE_SUPPLY,\n    {\n      onCompleted(data) {\n        onDeleteSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onUpdateSubmit = (data: SupplyUpdateInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    save({\n      variables: {\n        input: {\n          id: id,\n          title: data.title,\n          active: data.active,\n          billingIds: data.billingIds,\n        },\n      },\n    });\n  };\n\n  const onDeleteSubmit = (data: SupplyUpdateInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    deleteSupply({ variables: { id: id } });\n  };\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update Supply\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              id=\"title\"\n              type=\"text\"\n              name=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"billingIds\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Billings\n            </label>\n            <select\n              id=\"billingIds\"\n              name=\"billingIds\"\n              required\n              multiple\n              ref={register({ required: true })}\n              className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n            >\n              {data?.billings.edges.map((e: any) => (\n                <option key={e?.node.id} value={e?.node.id}>\n                  {e?.node.item}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"status\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Status\n            </label>\n            <select\n              required\n              name=\"status\"\n              ref={register({ required: true })}\n              className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n            >\n              <option value={\"true\"}>Active</option>\n              <option value={\"false\"}>Inactive</option>\n            </select>\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/LabratoryTypeAdminPage.tsx",["1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166"],"import React, { useEffect, useState } from \"react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport { BILLINGS } from \"./BillingsAdminPage\";\nimport classnames from \"classnames\";\nimport {\n  LabStatus,\n  LabType,\n  LabTypeEdge,\n  LabTypeInput,\n  LabTypeUpdateInput,\n  Maybe,\n  MutationDeleteLabTypeArgs,\n  MutationSaveLabTypeArgs,\n  MutationUpdateLabTypeArgs,\n  PaginationInput,\n  Query,\n  QueryBillingsArgs,\n  QueryLabTypesArgs,\n} from \"../../models/models\";\nimport { UpdateLabTypeForm } from \"../../components/UpdateLabTypeForm\";\nimport { AddLabTypeForm } from \"../../components/AddLabTypeForm\";\n\nconst LAB_TYPES = gql`\n  query LabTypes($page: PaginationInput!, $searchTerm: String) {\n    labTypes(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          active\n          billings {\n            id\n            item\n            code\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 20;\n\nexport const LabTypePage: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryLabTypesArgs>(LAB_TYPES, {\n    variables: { page: paginationInput },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.labTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"overflow-x-auto\">\n        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  colSpan={3}\n                  className=\"px-6 py-3 bg-gray-700 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                >\n                  Labratory Types\n                </th>\n\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                >\n                  <button\n                    onClick={() =>\n                      bottomSheetDispatch({\n                        type: \"show\",\n                        snapPoint: 0,\n                        children: (\n                          <AddLabTypeForm\n                            onSuccess={() => {\n                              bottomSheetDispatch({ type: \"hide\" });\n\n                              notifDispatch({\n                                type: \"show\",\n                                notifTitle: \"Success\",\n                                notifSubTitle:\n                                  \"Lab has been saved successfully\",\n                                variant: \"success\",\n                              });\n\n                              refetch();\n                            }}\n                            onCancel={() =>\n                              bottomSheetDispatch({ type: \"hide\" })\n                            }\n                          />\n                        ),\n                      })\n                    }\n                    className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"h-6 w-6\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </div>\n                      <div className=\"font-semibold\">Add</div>\n                    </div>\n                  </button>\n                </th>\n              </tr>\n              <tr className=\"bg-gray-100\">\n                <th colSpan={4}>\n                  <input\n                    type=\"text\"\n                    name=\"search\"\n                    placeholder=\"Search\"\n                    className=\"p-3 pl-4 block w-full sm:text-md border-gray-300\"\n                  />\n                </th>\n              </tr>\n              <tr className=\"bg-gray-100\">\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Title\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Billings\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Status\n                </th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {data?.labTypes.edges.map((value: Maybe<LabTypeEdge>) => (\n                <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {value?.node.title}\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {value?.node.billings.map((e, i) => (\n                      <span\n                        key={e?.id}\n                        className={classnames(\n                          \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800\",\n                          {\n                            \"ml-2\": i !== 0,\n                          }\n                        )}\n                      >\n                        {e?.item}\n                      </span>\n                    ))}\n                  </td>\n\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {value?.node.active ? \"Active\" : \"Inactive\"}\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <button\n                      onClick={() => {\n                        bottomSheetDispatch({\n                          type: \"show\",\n                          snapPoint: 500,\n                          children: (\n                            <UpdateLabTypeForm\n                              onUpdateSuccess={() => {\n                                bottomSheetDispatch({ type: \"hide\" });\n\n                                notifDispatch({\n                                  type: \"show\",\n                                  notifTitle: \"Success\",\n                                  notifSubTitle:\n                                    \"Lab type has been updated successfully\",\n                                  variant: \"success\",\n                                });\n\n                                refetch();\n                              }}\n                              onDeleteSuccess={() => {\n                                bottomSheetDispatch({ type: \"hide\" });\n\n                                notifDispatch({\n                                  type: \"show\",\n                                  notifTitle: \"Success\",\n                                  notifSubTitle:\n                                    \"Lab type has been deleted successfully\",\n                                  variant: \"success\",\n                                });\n\n                                refetch();\n                              }}\n                              onCancel={() =>\n                                bottomSheetDispatch({ type: \"hide\" })\n                              }\n                              values={value?.node}\n                            />\n                          ),\n                        });\n                      }}\n                      className=\"text-indigo-600 hover:text-indigo-900\"\n                    >\n                      Edit\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <TablePagination\n            totalCount={data?.labTypes.totalCount ?? 0}\n            onNext={handleNextClick}\n            onPrevious={handlePreviousClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/CalendarEvent.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientDocuments.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/FileViewer.tsx",["1167"],"import { format } from \"date-fns\";\nimport { parseISO } from \"date-fns/esm\";\nimport React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Page } from \"react-pdf\";\nimport { Document } from \"react-pdf/dist/esm/entry.webpack\";\n\nexport interface FileViewerProps {\n  isOpen: boolean;\n  src: any;\n  meta: any;\n  onClose: () => void;\n}\n\nconst customStyles = {\n  content: {\n    top: \"3%\",\n    left: \"3%\",\n    right: \"3%\",\n    bottom: \"3%\",\n    padding: 0,\n    border: \"none\",\n    backgroundColor: \"rgba(0,0,0,0.2)\",\n    zIndex: 30,\n  },\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,0.1)\",\n    backdropFilter: \"blur(40px)\",\n    zIndex: 100,\n  },\n};\n\nModal.setAppElement(\"#root\");\n\nexport const FileViewer: React.FC<FileViewerProps> = ({\n  isOpen,\n  src,\n  meta,\n  onClose,\n}) => {\n  const isImage = meta.type.split(\"/\")[0] === \"image\";\n  const isPdf = meta.type === \"application/pdf\";\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onAfterOpen={() => {}}\n      onRequestClose={onClose}\n      style={customStyles}\n    >\n      {isImage && <RenderImages src={src} meta={meta} onClose={onClose} />}\n      {isPdf && <RenderDocument src={src} meta={meta} onClose={onClose} />}\n    </Modal>\n  );\n};\n\ninterface RenderProps {\n  src: any;\n  meta?: any;\n  onClose: () => void;\n}\n\nfunction formatBytes(bytes: number, decimals = 2) {\n  if (bytes === 0) return \"0 Bytes\";\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n}\nconst RenderImages: React.FC<RenderProps> = ({ src, meta, onClose }) => {\n  return (\n    <div className=\"flex h-full bg-gray-800\">\n      <div className=\"flex-initial text-left bg-gray-800 pr-4 pl-4 pt-4\">\n        <p className=\"text-white text-lg font-bold\">{meta?.name}</p>\n        <hr className=\"mt-4\" />\n        <div className=\"mt-4\" />\n        <span className=\"text-white\">Kind: </span>\n        <span className=\"text-gray-300\">{meta?.type}</span> <br />\n        <span className=\"text-white\">Size: </span>\n        <span className=\"text-gray-300\">{formatBytes(meta.size)}</span> <br />\n        <span className=\"text-white\">Created: </span>\n        <span className=\"text-gray-300\">\n          {meta.createdAt && format(parseISO(meta.createdAt), \"MMM d, y\")}\n        </span>\n        <hr className=\"mt-4\" />\n        <div className=\"mt-4\">\n          <label\n            htmlFor=\"comments\"\n            className=\"block text-sm font-medium text-gray-300\"\n          >\n            Comments\n          </label>\n          <textarea\n            name=\"comments\"\n            id=\"comments\"\n            rows={4}\n            className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-800 bg-gray-700 focus:bg-gray-600 text-white border rounded-md\"\n          />\n        </div>\n        <div className=\"mt-5\">\n          <button\n            type=\"button\"\n            className=\"w-full border-white border rounded-lg px-2 py-1 text-white\"\n            onClick={onClose}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n      <div className=\"flex-1\">\n        <img src={src} className=\"w-full h-full object-cover\" />\n      </div>\n    </div>\n  );\n};\n\nconst RenderDocument: React.FC<RenderProps> = ({ src, meta, onClose }) => {\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [isDocumentFocused, setIsDocumentFocused] = useState(false);\n\n  const onDocumentLoadSuccess = (pdf: any) => {\n    setNumPages(pdf.numPages);\n  };\n\n  return (\n    <div className=\"flex \">\n      <div className=\"flex-initial text-left bg-gray-800 pr-4 pl-4 pt-4\">\n        <p className=\"text-white text-lg font-bold\">{meta?.name}</p>\n        <hr className=\"mt-4\" />\n        <div className=\"mt-4\" />\n        <span className=\"text-white\">Kind: </span>\n        <span className=\"text-gray-300\">{meta?.type}</span> <br />\n        <span className=\"text-white\">Size: </span>\n        <span className=\"text-gray-300\">10MB</span> <br />\n        <span className=\"text-white\">Created: </span>\n        <span className=\"text-gray-300\">5 October 2020</span>\n        <hr className=\"mt-4\" />\n        <div className=\"mt-4\">\n          <label\n            htmlFor=\"comments\"\n            className=\"block text-sm font-medium text-gray-300\"\n          >\n            Comments\n          </label>\n          <textarea\n            name=\"comments\"\n            id=\"comments\"\n            rows={4}\n            className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-800 bg-gray-700 focus:bg-gray-600 text-white border rounded-md\"\n          />\n        </div>\n        <div className=\"mt-5\">\n          <button\n            type=\"button\"\n            className=\"w-full border-white border rounded-lg px-2 py-1 text-white\"\n            onClick={onClose}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"relative\">\n          <div\n            onMouseEnter={() => setIsDocumentFocused(true)}\n            onMouseLeave={() => setIsDocumentFocused(false)}\n          >\n            <Document file={src} onLoadSuccess={onDocumentLoadSuccess}>\n              <Page pageNumber={pageNumber} />\n            </Document>\n          </div>\n          <div\n            hidden={!isDocumentFocused}\n            className=\"absolute bottom-10 inset-x-0\"\n            onMouseEnter={() => setIsDocumentFocused(true)}\n            onMouseLeave={() => setIsDocumentFocused(false)}\n          >\n            <div className=\"flex justify-between\">\n              <div></div>\n              <div>\n                <div className=\"bg-white px-3 py-3 shadow-2xl rounded-md\">\n                  <div className=\"flex items-center space-x-5\">\n                    <button\n                      type=\"button\"\n                      disabled={pageNumber === 1}\n                      onClick={() => setPageNumber(pageNumber - 1)}\n                    >\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                        className=\"w-4 text-gray-500\"\n                      >\n                        <path\n                          fillRule=\"evenodd\"\n                          d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\"\n                          clipRule=\"evenodd\"\n                        />\n                      </svg>\n                    </button>\n                    <p className=\"italic\">\n                      {pageNumber} of {numPages}\n                    </p>\n                    <button\n                      type=\"button\"\n                      disabled={pageNumber === numPages}\n                      onClick={() => setPageNumber(pageNumber + 1)}\n                    >\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                        className=\"w-4 text-gray-500\"\n                      >\n                        <path\n                          fillRule=\"evenodd\"\n                          d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\"\n                          clipRule=\"evenodd\"\n                        />\n                      </svg>\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientBasicInfo.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/models/models.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/MenuComponent.tsx",["1168"],"import React, { Fragment } from \"react\";\nimport { Menu, Transition } from \"@headlessui/react\";\nimport { ChevronDownIcon } from \"@heroicons/react/outline\";\nimport classnames from \"classnames\";\n\ninterface Props {\n  title: string;\n  menus: JSX.Element;\n  color?: string;\n  rounded?: string;\n}\n\nexport default function (props: Props) {\n  const color = props.color ? props.color : \"\";\n  const rounded = props.rounded ? props.rounded : \"\";\n\n  return (\n    <Menu as=\"div\" className=\"relative inline-block text-left\">\n      <div>\n        <Menu.Button\n          className={classnames(\n            \"inline-flex justify-center w-full px-4 py-3 text-sm font-medium focus:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75\",\n            {\n              \"bg-teal-300 text-gray-600 hover:text-gray-800 bg-opacity-20 hover:bg-opacity-30\":\n                props.color === undefined,\n              [color]: props.color !== undefined,\n              \"rounded-md\": props.rounded === undefined,\n              [rounded]: props.rounded !== undefined,\n            }\n          )}\n        >\n          {props.title}\n          <ChevronDownIcon className=\"w-5 h-5 ml-2 -mr-1\" aria-hidden=\"true\" />\n        </Menu.Button>\n      </div>\n      <Transition\n        as={Fragment}\n        enter=\"transition ease-out duration-100\"\n        enterFrom=\"transform opacity-0 scale-95\"\n        enterTo=\"transform opacity-100 scale-100\"\n        leave=\"transition ease-in duration-75\"\n        leaveFrom=\"transform opacity-100 scale-100\"\n        leaveTo=\"transform opacity-0 scale-95\"\n      >\n        <Menu.Items className=\"absolute z-50 right-0 w-56 mt-2 origin-top-right bg-white divide-y divide-gray-100 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n          {props.menus}\n        </Menu.Items>\n      </Transition>\n    </Menu>\n  );\n}\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/tabs/index.tsx",["1169"],"import React from \"react\";\nimport classNames from \"classnames\";\nimport { Tab } from \"../../models/tab\";\n\ninterface Props {\n  tabs: Array<Tab>;\n  value: string;\n  onChange: (title: string) => void;\n}\n\nexport const Tabs: React.FC<Props> = ({ tabs, value, onChange }) => {\n  const handleChange = (\n    evt: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    e: string\n  ) => {\n    evt.preventDefault();\n    onChange(e);\n  };\n\n  return (\n    <div className=\"mb-3\">\n      <ul className=\"list-reset flex space-x-3 items-center\">\n        {tabs.map((e) => (\n          <li className=\"-mb-px\" key={e.title}>\n            <a\n              className={classNames(\n                \"bg-gray-50 inline-block py-3 px-5 text-gray-800 rounded-sm\",\n                {\n                  \"border-r-2 font-bold text-teal-800 shadow-lg transform scale-y-110\":\n                    value === e.title,\n                  \"shadow-md\": value !== e.title,\n                }\n              )}\n              href=\"#\"\n              onClick={(evt) => handleChange(evt, e.title)}\n            >\n              <div className=\"flex space-x-2 items-center\">\n                <div>{value === e.title ? e.selectedIcon : e.icon}</div>\n\n                <div>{e.title}</div>\n              </div>\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/RefractionDistanceForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Admin/BillingsAdminPage.tsx",["1170","1171","1172","1173","1174","1175","1176","1177"],"import React, { useEffect, useState } from \"react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport {\n  PaginationInput,\n  QueryBillingsArgs,\n  Maybe,\n  BillingEdge,\n  BillingInput,\n  MutationSaveBillingArgs,\n  Billing,\n  MutationUpdateBillingArgs,\n  MutationDeleteBillingArgs,\n  Query,\n} from \"../../models/models\";\nimport { UpdateBillingForm } from \"../../components/UpdateBillingForm\";\nimport { AddBillingForm } from \"../../components/AddBillingForm\";\n\nexport const BILLINGS = gql`\n  query Billings($page: PaginationInput!) {\n    billings(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          item\n          code\n          price\n          credit\n          remark\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 20;\n\nexport const BillingsPage: React.FC = () => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryBillingsArgs>(BILLINGS, {\n    variables: { page: paginationInput },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.billings.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"overflow-x-auto\">\n        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  colSpan={5}\n                  className=\"px-6 py-3 bg-gray-700 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                >\n                  Billings\n                </th>\n\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                >\n                  <button\n                    onClick={() =>\n                      bottomSheetDispatch({\n                        type: \"show\",\n                        snapPoint: 0,\n                        children: (\n                          <AddBillingForm\n                            onSuccess={() => {\n                              bottomSheetDispatch({ type: \"hide\" });\n\n                              notifDispatch({\n                                type: \"show\",\n                                notifTitle: \"Success\",\n                                notifSubTitle:\n                                  \"Billing has been saved successfully\",\n                                variant: \"success\",\n                              });\n\n                              refetch();\n                            }}\n                            onCancel={() =>\n                              bottomSheetDispatch({ type: \"hide\" })\n                            }\n                          />\n                        ),\n                      })\n                    }\n                    className=\"uppercase bg-gray-800 hover:bg-gray-600 py-1 px-2 rounded-md text-sm\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"h-6 w-6\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </div>\n                      <div className=\"font-semibold\">Add</div>\n                    </div>\n                  </button>\n                </th>\n              </tr>\n              <tr>\n                <th colSpan={6}>\n                  <input\n                    type=\"text\"\n                    name=\"search\"\n                    id=\"billings-search\"\n                    placeholder=\"Search\"\n                    className=\"p-3 pl-4 block w-full sm:text-md border-gray-300\"\n                  />\n                </th>\n              </tr>\n              <tr className=\"bg-gray-50\">\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Item\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Code\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Price\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Credit\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\"\n                >\n                  Remark\n                </th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {data?.billings.edges.map((value: Maybe<BillingEdge>) => (\n                <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {value?.node.item}\n                  </td>\n\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {value?.node.code}\n                  </td>\n\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {value?.node.price}\n                  </td>\n\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {value?.node.credit === true ? \"Yes\" : \"No\"}\n                  </td>\n\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {value?.node.remark}\n                  </td>\n\n                  <td className=\"px-6 py-4 text-right text-sm font-medium\">\n                    <button\n                      onClick={() => {\n                        bottomSheetDispatch({\n                          type: \"show\",\n                          snapPoint: 500,\n                          children: (\n                            <UpdateBillingForm\n                              onUpdateSuccess={() => {\n                                bottomSheetDispatch({ type: \"hide\" });\n\n                                notifDispatch({\n                                  type: \"show\",\n                                  notifTitle: \"Success\",\n                                  notifSubTitle:\n                                    \"Billing has been updated successfully\",\n                                  variant: \"success\",\n                                });\n\n                                refetch();\n                              }}\n                              onDeleteSuccess={() => {\n                                bottomSheetDispatch({ type: \"hide\" });\n\n                                notifDispatch({\n                                  type: \"show\",\n                                  notifTitle: \"Success\",\n                                  notifSubTitle:\n                                    \"Billing has been deleted successfully\",\n                                  variant: \"success\",\n                                });\n\n                                refetch();\n                              }}\n                              onCancel={() =>\n                                bottomSheetDispatch({ type: \"hide\" })\n                              }\n                              values={value?.node}\n                            />\n                          ),\n                        });\n                      }}\n                      className=\"text-indigo-600 hover:text-indigo-900\"\n                    >\n                      Edit\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <TablePagination\n            totalCount={data?.billings.totalCount ?? 0}\n            onNext={handleNextClick}\n            onPrevious={handlePreviousClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\n\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/Header/index.tsx",["1178","1179","1180","1181","1182","1183"],"import React, { useState } from \"react\";\nimport classnames from \"classnames\";\nimport { Page } from \"../../models/page\";\nimport { useApolloClient } from \"@apollo/client\";\nimport { isLoggedInVar } from \"../../cache\";\nimport Logo from \"../../img/logo.png\";\nimport { SearchBar } from \"../SearchBar\";\nimport { useHistory } from \"react-router-dom\";\nimport { parseJwt } from \"../../util\";\n\ninterface Props {\n  setSearchFocused: (focused: boolean) => void;\n  searchFocused: boolean;\n  onChangePage: (route: string) => void;\n  onAddPage: (page: Page) => void;\n}\n\nexport const Header: React.FC<Props> = ({\n  searchFocused,\n  setSearchFocused,\n  onChangePage,\n  onAddPage,\n}) => {\n  const [isNavBarOpen, setNavBarOpen] = useState(false);\n  const history = useHistory();\n  const client = useApolloClient();\n\n  const onProfileClick = (\n    evt: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n  ) => {\n    evt.preventDefault();\n\n    const token = sessionStorage.getItem(\"accessToken\");\n    const claim = parseJwt(token);\n\n    history.push(`/profile/${claim.ID}`);\n  };\n\n  return (\n    <div className=\"bg-gray-200\">\n      <nav className=\"bg-gray-800\">\n        <div className=\"mx-auto px-6 py-1\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex flex-grow items-center\">\n              <div>\n                <img className=\"h-auto w-44\" src={Logo} />\n              </div>\n              <div className=\"items-baseline flex-grow relative mx-36\">\n                <SearchBar\n                  searchFocused={searchFocused}\n                  setSearchFocused={setSearchFocused}\n                  onChangePage={onChangePage}\n                  onAddPage={onAddPage}\n                />\n              </div>\n            </div>\n            <div className=\"hidden md:block flex-grow-0\">\n              <div className=\"ml-4 flex items-center md:ml-6\">\n                <button\n                  className=\"p-1 border-2 border-transparent text-gray-400 rounded-full hover:text-white focus:outline-none focus:text-white focus:bg-gray-700\"\n                  aria-label=\"Notifications\"\n                >\n                  <svg\n                    className=\"h-6 w-6\"\n                    stroke=\"currentColor\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"2\"\n                      d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\"\n                    />\n                  </svg>\n                </button>\n\n                <div className=\"ml-3 relative\">\n                  <div>\n                    <button\n                      className=\"max-w-xs flex items-center text-sm rounded-full text-white focus:outline-none focus:shadow-solid\"\n                      id=\"user-menu\"\n                      aria-label=\"User menu\"\n                      aria-haspopup=\"true\"\n                      onClick={() => {\n                        setNavBarOpen(!isNavBarOpen);\n                      }}\n                    >\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                        className=\"h-8 w-8\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={1}\n                          d=\"M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                        />\n                      </svg>\n                    </button>\n                  </div>\n\n                  <div\n                    className={classnames(\n                      \"origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg\",\n                      {\n                        hidden: !isNavBarOpen,\n                      }\n                    )}\n                  >\n                    <div\n                      className=\"py-1 rounded-md bg-white shadow-xs\"\n                      role=\"menu\"\n                      aria-orientation=\"vertical\"\n                      aria-labelledby=\"user-menu\"\n                    >\n                      <a\n                        href=\"#\"\n                        className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                        role=\"menuitem\"\n                        onClick={onProfileClick}\n                      >\n                        Your profile\n                      </a>\n\n                      <a\n                        href=\"#\"\n                        className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                        role=\"menuitem\"\n                        onClick={() => {\n                          client.cache.gc();\n                          sessionStorage.removeItem(\"accessToken\");\n                          isLoggedInVar(false);\n                        }}\n                      >\n                        Sign out\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"-mr-2 flex md:hidden\">\n              <button\n                onClick={() => setNavBarOpen(!isNavBarOpen)}\n                className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:bg-gray-700 focus:text-white\"\n              >\n                <svg\n                  className=\"block h-6 w-6\"\n                  stroke=\"currentColor\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M4 6h16M4 12h16M4 18h16\"\n                  />\n                </svg>\n\n                <svg\n                  className=\"hidden h-6 w-6\"\n                  stroke=\"currentColor\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className={classnames(\"md:hidden\", { hidden: !isNavBarOpen })}>\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\"></div>\n          <div className=\"pt-4 pb-3 border-t border-gray-700\">\n            <div className=\"flex items-center px-5 space-x-3\">\n              <div className=\"flex-shrink-0\">\n                <img\n                  className=\"h-10 w-10 rounded-full\"\n                  src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\"\n                  alt=\"\"\n                />\n              </div>\n              <div className=\"space-y-1\">\n                <div className=\"text-base font-medium leading-none text-white\">\n                  Tom Cook\n                </div>\n                <div className=\"text-sm font-medium leading-none text-gray-400\">\n                  tom@example.com\n                </div>\n              </div>\n            </div>\n            <div className=\"mt-3 px-2 space-y-1\">\n              <a\n                href=\"#\"\n                className=\"block px-3 py-2 rounded-md text-base font-medium text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:text-white focus:bg-gray-700\"\n              >\n                Your Profile\n              </a>\n\n              <a\n                href=\"#\"\n                className=\"block px-3 py-2 rounded-md text-base font-medium text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:text-white focus:bg-gray-700\"\n              >\n                Settings\n              </a>\n\n              <a\n                href=\"#\"\n                className=\"block px-3 py-2 rounded-md text-base font-medium text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:text-white focus:bg-gray-700\"\n              >\n                Sign out\n              </a>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateEyewearShopForm.tsx",["1184","1185"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  EyewearShop,\n  EyewearShopUpdateInput,\n  MutationUpdateEyewearShopArgs,\n  MutationUpdatePharmacyArgs,\n  Pharmacy,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\n\nconst UPDATE_EYEWEAR_SHOP = gql`\n  mutation UpdateEyewearShop($input: EyewearShopUpdateInput!) {\n    updateEyewearShop(input: $input) {\n      id\n    }\n  }\n`;\n\ninterface Props {\n  values: EyewearShop | undefined;\n  onUpdateSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport const UpdateEyewearShopForm = ({\n  values,\n  onUpdateSuccess,\n  onCancel,\n}: Props) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<EyewearShopUpdateInput>({\n    defaultValues: values,\n  });\n\n  const [update, { error }] = useMutation<any, MutationUpdateEyewearShopArgs>(\n    UPDATE_EYEWEAR_SHOP,\n    {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSubmit = (data: any) => {\n    if (values?.id) {\n      update({\n        variables: {\n          input: {\n            id: values?.id,\n            title: data.title,\n            address: data.address,\n            region: data.region,\n            country: data.country,\n            phone: data.phone,\n            inHouse: data.inHouse === \"true\",\n            active: data.active === \"true\",\n          },\n        },\n      });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update eyewear shop details\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              required\n              type=\"text\"\n              name=\"title\"\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"address\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Address\n            </label>\n            <input\n              required\n              type=\"text\"\n              name=\"address\"\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"region\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Region\n            </label>\n            <input\n              required\n              type=\"text\"\n              name=\"region\"\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"country\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Country\n            </label>\n            <input\n              required\n              type=\"text\"\n              name=\"country\"\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"phone\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Phone\n            </label>\n            <input\n              required\n              type=\"text\"\n              name=\"phone\"\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"inHouse\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              In-House\n            </label>\n            <select\n              required\n              name=\"inHouse\"\n              ref={register({ required: true })}\n              className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n            >\n              <option value={\"true\"}>Yes</option>\n              <option value={\"false\"}>No</option>\n            </select>\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"active\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Active\n            </label>\n            <select\n              required\n              name=\"active\"\n              ref={register({ required: true })}\n              className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n            >\n              <option value={\"true\"}>Yes</option>\n              <option value={\"false\"}>No</option>\n            </select>\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-teal-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Update</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdatePharmacyForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdatePatientEncounterLimitForm.tsx",["1186"],"import React from \"react\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { useForm } from \"react-hook-form\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport {\n  Maybe,\n  MutationUpdatePatientEncounterLimitArgs,\n  PatientEncounterLimit,\n  PatientEncounterLimitUpdateInput,\n  Query,\n  QueryGetByUserTypeTitleArgs,\n} from \"../models/models\";\n\nconst UPDATE_PATIENT_ENCOUNTER_LIMIT = gql`\n  mutation UpdatePatientEncounterLimit(\n    $input: PatientEncounterLimitUpdateInput!\n  ) {\n    updatePatientEncounterLimit(input: $input) {\n      id\n    }\n  }\n`;\n\nconst GET_PROVIDERS = gql`\n  query Providers($input: String!) {\n    getByUserTypeTitle(input: $input) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\ninterface Props {\n  values: Maybe<PatientEncounterLimit>;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport const UpdatePatientEncounterLimitForm: React.FC<Props> = ({\n  values,\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit, reset } =\n    useForm<PatientEncounterLimitUpdateInput>({\n      defaultValues: {\n        ...values,\n      },\n    });\n\n  const { data } = useQuery<Query, QueryGetByUserTypeTitleArgs>(GET_PROVIDERS, {\n    variables: {\n      input: \"Physician\",\n    },\n  });\n\n  const [save, { error }] = useMutation<\n    any,\n    MutationUpdatePatientEncounterLimitArgs\n  >(UPDATE_PATIENT_ENCOUNTER_LIMIT, {\n    onCompleted(data) {\n      onSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PatientEncounterLimitUpdateInput) => {\n    if (values?.id) {\n      data.id = values.id;\n      save({\n        variables: {\n          input: data,\n        },\n      });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update Patient Encounter Limit\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"userId\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Physician\n            </label>\n            <select\n              required\n              name=\"userId\"\n              ref={register}\n              className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n            >\n              {data?.getByUserTypeTitle.map((e) => (\n                <option\n                  key={e?.id}\n                  value={e?.id}\n                >{`Dr. ${e?.firstName} ${e?.lastName}`}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"mt-4 flex space-x-4 w-full items-stretch\">\n            <div className=\"flex-1\">\n              <label\n                htmlFor=\"dailyLimit\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Daily Limit\n              </label>\n              <input\n                required\n                type=\"number\"\n                name=\"dailyLimit\"\n                ref={register}\n                className=\"p-1 pl-4 w-full sm:text-md border-gray-300 border rounded-md\"\n              />\n            </div>\n            <div className=\"flex-1\">\n              <label\n                htmlFor=\"overbook\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Overbook\n              </label>\n              <input\n                required\n                type=\"number\"\n                name=\"overbook\"\n                ref={register}\n                className=\"p-1 pl-4 w-full sm:text-md border-gray-300 border rounded-md\"\n              />\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-teal-700 hover:bg-teal-800 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Update</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UserUpdateForm.tsx",["1187","1188"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useNotificationDispatch } from \"../notification\";\nimport {\n  FileUploader,\n  FileUploaderComponent,\n} from \"../components/FileUploaderComponent\";\nimport {\n  MutationResetPasswordArgs,\n  MutationUpdateUserArgs,\n  User,\n} from \"../models/models\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst UPDATE_USER = gql`\n  mutation UpdateUser($input: UserUpdateInput!) {\n    updateUser(input: $input) {\n      id\n    }\n  }\n`;\n\nconst RESET_PASSWORD = gql`\n  mutation ResetPassword($id: ID!) {\n    resetPassword(id: $id) {\n      id\n    }\n  }\n`;\n\ninterface Props {\n  values: User;\n  onSuccess: () => void;\n  onResetSuccess: () => void;\n}\n\nexport const UserUpdateForm: React.FC<Props> = ({\n  values,\n  onSuccess,\n  onResetSuccess,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const [userTypes, setUserTypes] = useState([]);\n  const [signatures, setSignatures] = useState<Array<FileUploader>>();\n  const [profilePictures, setProfilePictures] = useState<Array<FileUploader>>();\n  const { register, handleSubmit, watch, reset } = useForm<any>();\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  useEffect(() => {\n    reset({\n      firstName: values.firstName,\n      lastName: values.lastName,\n      email: values.email,\n      userTypeIds: values.userTypes.map((e) => e?.id.toString()),\n      active: values.active,\n    });\n\n    if (values.signature) {\n      const sig = {\n        id: values?.signature.id,\n        fileUrl: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/files/${values?.signature.fileName}_${values?.signature.hash}.${values?.signature.extension}`,\n        name: values?.signature.fileName ?? \"\",\n        size: values?.signature.size,\n        createdAt: values?.signature.createdAt,\n        contentType: values?.signature.contentType ?? \"\",\n      };\n\n      setSignatures([sig]);\n    }\n\n    if (values.profilePic) {\n      const profilePic = {\n        id: values?.profilePic.id,\n        fileUrl: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/files/${values?.profilePic.fileName}_${values?.profilePic.hash}.${values?.profilePic.extension}`,\n        name: values?.profilePic.fileName ?? \"\",\n        size: values?.profilePic.size,\n        createdAt: values?.profilePic.createdAt,\n        contentType: values?.profilePic.contentType ?? \"\",\n      };\n\n      setProfilePictures([profilePic]);\n    }\n  }, [values, userTypes]);\n\n  const [update, { error }] = useMutation<any, MutationUpdateUserArgs>(\n    UPDATE_USER,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [resetPassword] = useMutation<any, MutationResetPasswordArgs>(\n    RESET_PASSWORD,\n    {\n      onCompleted(data) {\n        onResetSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  useEffect(() => {\n    fetch(`${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/userTypes`, {\n      method: \"GET\",\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setUserTypes(data);\n      })\n      .catch((error) => {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      });\n  }, []);\n\n  const onSubmit = (user: any) => {\n    user.id = values.id;\n\n    if (signatures && signatures?.length > 0 && signatures[0].fileObject) {\n      const file = {\n        file: signatures[0].fileObject,\n        name: signatures[0].name,\n      };\n\n      user.signature = file;\n    }\n\n    if (\n      profilePictures &&\n      profilePictures?.length > 0 &&\n      profilePictures[0].fileObject\n    ) {\n      const file = {\n        file: profilePictures[0].fileObject,\n        name: profilePictures[0].name,\n      };\n\n      user.profilePic = file;\n    }\n\n    user.active = user.active === \"true\";\n\n    update({\n      variables: {\n        input: user,\n      },\n    });\n  };\n\n  const handleSignatureChange = (change: Array<FileUploader>) => {\n    setSignatures(change);\n  };\n\n  const handleProfilePictureChange = (change: Array<FileUploader>) => {\n    setProfilePictures(change);\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <p className=\"mt-2 text-3xl text-gray-800 font-bold tracking-wide\">\n          Update\n        </p>\n\n        <div className=\"grid grid-cols-2 gap-16 mt-10\">\n          <div>\n            <p className=\"text-lg font-semibold tracking-wide text-gray-700 uppercase\">\n              Basic Information\n            </p>\n            <hr />\n            <div className=\"grid grid-cols-2 gap-6 mt-5\">\n              <div className=\"col-span-2 sm:col-span-2\">\n                <label\n                  htmlFor=\"active\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Status\n                </label>\n                <select\n                  name=\"active\"\n                  required\n                  ref={register({ required: true })}\n                  className=\"mt-1 block w-full p-2 bg-gray-100 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                >\n                  <option value={\"true\"}>Active</option>\n                  <option value={\"false\"}>Inactive</option>\n                </select>\n              </div>\n              <div className=\"col-span-2 sm:col-span-2\">\n                <label\n                  htmlFor=\"userTypeIds\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Account Type\n                </label>\n                <select\n                  name=\"userTypeIds\"\n                  required\n                  multiple\n                  ref={register({ required: true })}\n                  className=\"mt-1 block w-full p-2 bg-gray-100 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                >\n                  {userTypes.map((e: any) => (\n                    <option key={e.ID} value={e.ID}>\n                      {e.title}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"col-span-1 sm:col-span-1\">\n                <label\n                  htmlFor=\"firstName\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  First name\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"firstName\"\n                  id=\"firstName\"\n                  required\n                  ref={register({ required: true })}\n                  className=\"mt-1 p-1 pl-4 block w-full sm:text-md bg-gray-100 border-gray-300 border rounded-md\"\n                />\n              </div>\n\n              <div className=\"col-span-1 sm:col-span-1\">\n                <label\n                  htmlFor=\"lastName\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Last name\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"lastName\"\n                  id=\"lastName\"\n                  required\n                  ref={register({ required: true })}\n                  className=\"mt-1 p-1 pl-4 block w-full sm:text-md bg-gray-100 border-gray-300 border rounded-md\"\n                />\n              </div>\n\n              <div className=\"col-span-2 sm:col-span-2\">\n                <label\n                  htmlFor=\"email\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Email\n                </label>\n                <input\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  required\n                  ref={register({\n                    required: true,\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                      message: \"Invalid email address\",\n                    },\n                  })}\n                  className=\"mt-1 p-1 pl-4 block w-full sm:text-md bg-gray-100 border-gray-300 border rounded-md\"\n                />\n              </div>\n\n              <div className=\"col-span-2 sm:col-span-2\">\n                {error && (\n                  <p className=\"text-red-600\">Error: {error.message}</p>\n                )}\n              </div>\n\n              <div className=\"col-span-1 sm:col-span-1\">\n                <button\n                  type=\"button\"\n                  className=\"inline-flex justify-center w-full py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                  onClick={() => {\n                    resetPassword({\n                      variables: {\n                        id: values.id,\n                      },\n                    });\n                  }}\n                >\n                  <span className=\"ml-2\">Reset Password</span>\n                </button>\n              </div>\n\n              <div className=\"col-span-1 sm:col-span-1 bg-gray-50 text-right\">\n                <button\n                  type=\"submit\"\n                  className=\"inline-flex justify-center w-full py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-teal-600 hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                >\n                  <span className=\"ml-2\">Update</span>\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"px-7\">\n            <div>\n              <p className=\"text-lg font-semibold tracking-wide text-gray-700 uppercase\">\n                Documents\n              </p>\n              <hr />\n              <label className=\"block text-sm font-medium text-gray-700 mt-5\">\n                Your signature\n              </label>\n              <FileUploaderComponent\n                multiSelect={false}\n                accept={\"image\"}\n                values={signatures}\n                onChange={handleSignatureChange}\n                onDelete={() => setSignatures([])}\n              />\n            </div>\n\n            <div className=\"col-span-2 sm:col-span-2 mt-10\">\n              <label className=\"block text-sm font-medium text-gray-700\">\n                Profile Picture\n              </label>\n              <FileUploaderComponent\n                multiSelect={false}\n                accept={\"image\"}\n                values={profilePictures}\n                onChange={handleProfilePictureChange}\n                onDelete={() => setProfilePictures([])}\n              />\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddLabTypeForm.tsx",["1189"],"import { gql, useQuery, useMutation } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  LabStatus,\n  LabTypeInput,\n  MutationSaveLabTypeArgs,\n  Query,\n  QueryBillingsArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { BILLINGS } from \"../pages/Admin/BillingsAdminPage\";\nimport Select from \"react-select\";\n\nconst SAVE_LAB_TYPE = gql`\n  mutation SaveLabType($input: LabTypeInput!) {\n    saveLabType(input: $input) {\n      id\n    }\n  }\n`;\n\ninterface AddLabTypeProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport const AddLabTypeForm: React.FC<AddLabTypeProps> = ({\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<LabTypeInput>({\n    defaultValues: {\n      active: true,\n    },\n  });\n\n  const [selectedBillings, setSelectedBillings] = useState<Array<any>>([]);\n\n  const { data } = useQuery<Query, QueryBillingsArgs>(BILLINGS, {\n    variables: { page: { page: 0, size: 1000 } },\n  });\n\n  const [save, { error }] = useMutation<any, MutationSaveLabTypeArgs>(\n    SAVE_LAB_TYPE,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSubmit = (data: any) => {\n    save({\n      variables: {\n        input: {\n          title: data.title,\n          active: data.active === \"true\",\n          billingIds: selectedBillings.map((e) => e.value),\n        },\n      },\n    });\n  };\n\n  const billings = data?.billings.edges.map((e) => ({\n    value: e?.node.id,\n    label: e?.node.item,\n  }));\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">Add Lab Type</p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              id=\"title\"\n              type=\"text\"\n              name=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            <Select\n              isMulti\n              placeholder=\"Billings\"\n              options={billings}\n              onChange={(values) => {\n                setSelectedBillings(values.map((e) => e));\n              }}\n            />\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"status\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Status\n            </label>\n            <select\n              required\n              name=\"active\"\n              ref={register({ required: true })}\n              className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n            >\n              <option value={\"true\"}>Active</option>\n              <option value={\"false\"}>Inactive</option>\n            </select>\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/HpiComponentTypeAdminTable.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientInfoBlock.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/VisitTypesAdminTable.tsx",["1190","1191"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { Query, PaginationInput, QueryVisitTypesArgs, Maybe, VisitTypeEdge, VisitTypeInput, MutationSaveVisitTypeArgs, VisitType, MutationUpdateVisitTypeArgs, MutationDeleteVisitTypeArgs } from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { TablePagination } from \"./table_pagination\";\n\nconst VISIT_TYPES = gql`\n  query VisitTypes($page: PaginationInput!) {\n    visitTypes(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 5;\n\nexport const VisitTypesTable: React.FC = () => {\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const { data, refetch } = useQuery<Query, QueryVisitTypesArgs>(VISIT_TYPES, {\n    variables: { page: paginationInput },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.visitTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n        <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n          <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead>\n                <tr>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-700 text-left text-sm font-medium text-gray-50 uppercase tracking-wider\"\n                  >\n                    Visit Types\n                  </th>\n\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                  >\n                    <button\n                      onClick={() =>\n                        bottomSheetDispatch({\n                          type: \"show\",\n                          snapPoint: 500,\n                          children: (\n                            <AddVisitTypeForm\n                              onSuccess={() => {\n                                bottomSheetDispatch({ type: \"hide\" });\n\n                                notifDispatch({\n                                  type: \"show\",\n                                  notifTitle: \"Success\",\n                                  notifSubTitle:\n                                    \"Visit Type has been saved successfully\",\n                                  variant: \"success\",\n                                });\n\n                                refetch();\n                              }}\n                              onCancel={() =>\n                                bottomSheetDispatch({ type: \"hide\" })\n                              }\n                            />\n                          ),\n                        })\n                      }\n                      className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                    >\n                      <div className=\"flex items-center\">\n                        <div>\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"currentColor\"\n                            className=\"h-6 w-6\"\n                          >\n                            <path\n                              fillRule=\"evenodd\"\n                              d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                              clipRule=\"evenodd\"\n                            />\n                          </svg>\n                        </div>\n                        <div className=\"font-semibold\">Add</div>\n                      </div>\n                    </button>\n                  </th>\n                </tr>\n                <tr>\n                  <th colSpan={2}>\n                    <input\n                      type=\"text\"\n                      name=\"search\"\n                      id=\"search\"\n                      placeholder=\"Search\"\n                      className=\"p-1 pl-4 block w-full sm:text-md border-gray-300\"\n                    />\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {data?.visitTypes.edges.map((value: Maybe<VisitTypeEdge>) => (\n                  <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {value?.node.title}\n                    </td>\n\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <button\n                        className=\"text-indigo-600 hover:text-indigo-900\"\n                        onClick={() => {\n                          bottomSheetDispatch({\n                            type: \"show\",\n                            snapPoint: 500,\n                            children: (\n                              <UpdateVisitTypeForm\n                                onUpdateSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Visit type has been updated successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onDeleteSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Visit type has been deleted successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onCancel={() =>\n                                  bottomSheetDispatch({ type: \"hide\" })\n                                }\n                                values={value?.node}\n                              />\n                            ),\n                          });\n                        }}\n                      >\n                        Edit\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <TablePagination\n              totalCount={data?.visitTypes.totalCount ?? 0}\n              onNext={handleNextClick}\n              onPrevious={handlePreviousClick}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SAVE_VISIT_TYPE = gql`\n  mutation SaveVisitType($input: VisitTypeInput!) {\n    saveVisitType(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\ninterface AddVisitTypeProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst AddVisitTypeForm: React.FC<AddVisitTypeProps> = ({\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<VisitTypeInput>();\n  const [save, { error }] = useMutation<any, MutationSaveVisitTypeArgs>(\n    SAVE_VISIT_TYPE,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSubmit = (data: VisitTypeInput) => {\n    save({ variables: { input: data } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Add visit type\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst UPDATE_VISIT_TYPE = gql`\n  mutation UpdateVisitType($input: VisitTypeInput!, $id: ID!) {\n    updateVisitType(input: $input, id: $id) {\n      id\n      title\n    }\n  }\n`;\n\nconst DELETE_VISIT_TYPE = gql`\n  mutation DeleteVisitType($id: ID!) {\n    deleteVisitType(id: $id)\n  }\n`;\n\ninterface UpdateVisitTypeProps {\n  values: VisitType | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst UpdateVisitTypeForm: React.FC<UpdateVisitTypeProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit, setValue } = useForm<VisitTypeInput>();\n  const [save, { error }] = useMutation<any, MutationUpdateVisitTypeArgs>(\n    UPDATE_VISIT_TYPE,\n    {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteVisitType] = useMutation<any, MutationDeleteVisitTypeArgs>(\n    DELETE_VISIT_TYPE,\n    {\n      onCompleted(data) {\n        onDeleteSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  useEffect(() => {\n    setValue(\"title\", values?.title ?? \"\");\n  }, [values]);\n\n  const onUpdateSubmit = (data: VisitTypeInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    save({ variables: { id: id, input: data } });\n  };\n\n  const onDeleteSubmit = (data: VisitTypeInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    deleteVisitType({ variables: { id: id } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Add visit type\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddDiagnosticProcedureTypeForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateDiagnosticProcedureTypeForm.tsx",["1192"],"import { gql, useQuery, useMutation } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  DiagnosticProcedureType,\n  DiagnosticProcedureTypeUpdateInput,\n  MutationDeleteDiagnosticProcedureTypeArgs,\n  MutationUpdateDiagnosticProcedureTypeArgs,\n  Query,\n  QueryBillingsArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { BILLINGS } from \"../pages/Admin/BillingsAdminPage\";\nimport Select from \"react-select\";\n\nconst UPDATE_DIAGNOSTIC_PROCEDURE_TYPE = gql`\n  mutation UpdateDiagnosticProcedureType(\n    $input: DiagnosticProcedureTypeUpdateInput!\n  ) {\n    updateDiagnosticProcedureType(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_DIAGNOSTIC_PROCEDURE_TYPE = gql`\n  mutation DeleteDiagnosticProcedureType($id: ID!) {\n    deleteDiagnosticProcedureType(id: $id)\n  }\n`;\n\ninterface Props {\n  values: DiagnosticProcedureType | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport const UpdateDiagnosticProcedureTypeForm: React.FC<Props> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit, setValue } =\n    useForm<DiagnosticProcedureTypeUpdateInput>();\n\n  const { data } = useQuery<Query, QueryBillingsArgs>(BILLINGS, {\n    variables: { page: { page: 0, size: 1000 } },\n  });\n\n  const [selectedBillings, setSelectedBillings] = useState<Array<any>>([]);\n\n  useEffect(() => {\n    const billings = values?.billings.map((e) => ({\n      value: e?.id,\n      label: e?.item,\n    }));\n    if (billings) {\n      setSelectedBillings(billings);\n    }\n\n    setValue(\"title\", values?.title);\n    setValue(\"active\", values?.active);\n  }, [values, data]);\n\n  const [save, { error }] = useMutation<\n    any,\n    MutationUpdateDiagnosticProcedureTypeArgs\n  >(UPDATE_DIAGNOSTIC_PROCEDURE_TYPE, {\n    onCompleted(data) {\n      onUpdateSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [deleteDiagnosticProcedureType] = useMutation<\n    any,\n    MutationDeleteDiagnosticProcedureTypeArgs\n  >(DELETE_DIAGNOSTIC_PROCEDURE_TYPE, {\n    onCompleted(data) {\n      onDeleteSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const onUpdateSubmit = (data: any) => {\n    const id: string = values?.id.toString() ?? \"\";\n    save({\n      variables: {\n        input: {\n          id: id,\n          title: data.title,\n          active: data.active === \"true\",\n          billingIds: selectedBillings.map((e) => e.value),\n        },\n      },\n    });\n  };\n\n  const onDeleteSubmit = (data: DiagnosticProcedureTypeUpdateInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    deleteDiagnosticProcedureType({ variables: { id: id } });\n  };\n\n  const billings = data?.billings.edges.map((e) => ({\n    value: e?.node.id,\n    label: e?.node.item,\n  }));\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update Diagnostic Procedure\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              required\n              id=\"title\"\n              type=\"text\"\n              name=\"title\"\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            <Select\n              isMulti\n              placeholder=\"Billings\"\n              options={billings}\n              value={selectedBillings}\n              onChange={(values) => {\n                setSelectedBillings(values.map((e) => e));\n              }}\n            />\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"active\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Status\n            </label>\n            <select\n              required\n              name=\"active\"\n              ref={register({ required: true })}\n              className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n            >\n              <option value={\"true\"}>Active</option>\n              <option value={\"false\"}>Inactive</option>\n            </select>\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UserTypeAdminTable.tsx",["1193","1194"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { Query, PaginationInput, QueryUserTypesArgs, Maybe, UserTypeEdge, UserTypeInput, MutationSaveUserTypeArgs, UserType, MutationUpdateUserTypeArgs, MutationDeleteUserTypeArgs, UserTypeUpdateInput } from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { TablePagination } from \"./table_pagination\";\n\nconst USER_TYPE = gql`\n  query UserTypes($page: PaginationInput!) {\n    userTypes(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 5;\n\nexport const UserTypesTable: React.FC = () => {\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const { data, refetch } = useQuery<Query, QueryUserTypesArgs>(USER_TYPE, {\n    variables: { page: paginationInput },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.userTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n        <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n          <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead>\n                <tr>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-700 text-left text-sm font-medium text-gray-50 uppercase tracking-wider\"\n                  >\n                    User Types\n                  </th>\n\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                  >\n                    <button\n                      onClick={() =>\n                        bottomSheetDispatch({\n                          type: \"show\",\n                          snapPoint: 500,\n                          children: (\n                            <AddUserTypeForm\n                              onSuccess={() => {\n                                bottomSheetDispatch({ type: \"hide\" });\n\n                                notifDispatch({\n                                  type: \"show\",\n                                  notifTitle: \"Success\",\n                                  notifSubTitle:\n                                    \"User Type has been saved successfully\",\n                                  variant: \"success\",\n                                });\n\n                                refetch();\n                              }}\n                              onCancel={() =>\n                                bottomSheetDispatch({ type: \"hide\" })\n                              }\n                            />\n                          ),\n                        })\n                      }\n                      className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                    >\n                      <div className=\"flex items-center\">\n                        <div>\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"currentColor\"\n                            className=\"h-6 w-6\"\n                          >\n                            <path\n                              fillRule=\"evenodd\"\n                              d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                              clipRule=\"evenodd\"\n                            />\n                          </svg>\n                        </div>\n                        <div className=\"font-semibold\">Add</div>\n                      </div>\n                    </button>\n                  </th>\n                </tr>\n                <tr>\n                  <th colSpan={2}>\n                    <input\n                      type=\"text\"\n                      name=\"search\"\n                      id=\"search\"\n                      placeholder=\"Search\"\n                      className=\"p-1 pl-4 block w-full sm:text-md border-gray-300\"\n                    />\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {data?.userTypes.edges.map((value: Maybe<UserTypeEdge>) => (\n                  <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {value?.node.title}\n                    </td>\n\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <button\n                        className=\"text-indigo-600 hover:text-indigo-900\"\n                        onClick={() => {\n                          bottomSheetDispatch({\n                            type: \"show\",\n                            snapPoint: 500,\n                            children: (\n                              <UpdateUserTypeForm\n                                onUpdateSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"User type has been updated successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onDeleteSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"User type has been deleted successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onCancel={() =>\n                                  bottomSheetDispatch({ type: \"hide\" })\n                                }\n                                values={value?.node}\n                              />\n                            ),\n                          });\n                        }}\n                      >\n                        Edit\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <TablePagination\n              totalCount={data?.userTypes.totalCount ?? 0}\n              onNext={handleNextClick}\n              onPrevious={handlePreviousClick}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SAVE_USER_TYPE = gql`\n  mutation SaveUserType($input: UserTypeInput!) {\n    saveUserType(input: $input) {\n      id\n    }\n  }\n`;\n\ninterface AddUserTypeProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst AddUserTypeForm: React.FC<AddUserTypeProps> = ({\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<UserTypeInput>();\n  const [save, { error }] = useMutation<any, MutationSaveUserTypeArgs>(\n    SAVE_USER_TYPE,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSubmit = (data: UserTypeInput) => {\n    save({ variables: { input: data } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Add user type\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst UPDATE_USER_TYPE = gql`\n  mutation UpdateUserType($input: UserTypeInput!, $id: ID!) {\n    updateUserType(input: $input, id: $id) {\n      id\n      title\n    }\n  }\n`;\n\nconst DELETE_USER_TYPE = gql`\n  mutation DeleteUserType($id: ID!) {\n    deleteUserType(id: $id)\n  }\n`;\n\ninterface UpdateUserTypeProps {\n  values: UserType | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst UpdateUserTypeForm: React.FC<UpdateUserTypeProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit, setValue } = useForm<UserTypeInput>();\n  const [save, { error }] = useMutation<any, MutationUpdateUserTypeArgs>(\n    UPDATE_USER_TYPE,\n    {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteUserType] = useMutation<any, MutationDeleteUserTypeArgs>(\n    DELETE_USER_TYPE,\n    {\n      onCompleted(data) {\n        onDeleteSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  useEffect(() => {\n    setValue(\"title\", values?.title ?? \"\");\n  }, [values]);\n\n  const onUpdateSubmit = (data: UserTypeUpdateInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    data.id = id;\n    save({ variables: { input: data } });\n  };\n\n  const onDeleteSubmit = (data: UserTypeInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    deleteUserType({ variables: { id: id } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Add user type\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PastIllnessTypeAdminTable.tsx",["1195"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { Query, PaginationInput, QueryPastIllnessTypesArgs, Maybe, PastIllnessTypeEdge, PastIllnessTypeInput, MutationSavePastIllnessTypesArgs, PastIllnessType, MutationUpdatePastIllnessTypeArgs, MutationDeletePastIllnessTypeArgs, PastIllnessTypeUpdateInput } from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { TablePagination } from \"./table_pagination\";\n\nconst PAST_ILLNESS_TYPES = gql`\n  query PastIllnessTypes($page: PaginationInput!) {\n    pastIllnessTypes(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 5;\n\nexport const PastIllnessTypesTable: React.FC = () => {\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const { data, refetch } = useQuery<Query, QueryPastIllnessTypesArgs>(\n    PAST_ILLNESS_TYPES,\n    {\n      variables: { page: paginationInput },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.pastIllnessTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"flex flex-col\">\n        <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n            <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead>\n                  <tr>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 bg-gray-700 text-left text-sm font-medium text-gray-50 uppercase tracking-wider\"\n                    >\n                      Past Illness Types\n                    </th>\n\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                    >\n                      <button\n                        onClick={() =>\n                          bottomSheetDispatch({\n                            type: \"show\",\n                            snapPoint: 500,\n                            children: (\n                              <AddPastIllnessTypeForm\n                                onSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Past Illness Type has been saved successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onCancel={() =>\n                                  bottomSheetDispatch({ type: \"hide\" })\n                                }\n                              />\n                            ),\n                          })\n                        }\n                        className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                      >\n                        <div className=\"flex items-center\">\n                          <div>\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 20 20\"\n                              fill=\"currentColor\"\n                              className=\"h-6 w-6\"\n                            >\n                              <path\n                                fillRule=\"evenodd\"\n                                d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                                clipRule=\"evenodd\"\n                              />\n                            </svg>\n                          </div>\n                          <div className=\"font-semibold\">Add</div>\n                        </div>\n                      </button>\n                    </th>\n                  </tr>\n                  <tr>\n                    <th colSpan={2}>\n                      <input\n                        type=\"text\"\n                        name=\"search\"\n                        id=\"past-illness-types-search\"\n                        placeholder=\"Search\"\n                        className=\"p-1 pl-4 block w-full sm:text-md border-gray-300\"\n                      />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {data?.pastIllnessTypes.edges.map(\n                    (value: Maybe<PastIllnessTypeEdge>) => (\n                      <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {value?.node.title}\n                        </td>\n\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <button\n                            className=\"text-indigo-600 hover:text-indigo-900\"\n                            onClick={() => {\n                              bottomSheetDispatch({\n                                type: \"show\",\n                                snapPoint: 500,\n                                children: (\n                                  <UpdatePastIllnessTypeForm\n                                    onUpdateSuccess={() => {\n                                      bottomSheetDispatch({ type: \"hide\" });\n\n                                      notifDispatch({\n                                        type: \"show\",\n                                        notifTitle: \"Success\",\n                                        notifSubTitle:\n                                          \"Past Illness Type has been updated successfully\",\n                                        variant: \"success\",\n                                      });\n\n                                      refetch();\n                                    }}\n                                    onDeleteSuccess={() => {\n                                      bottomSheetDispatch({ type: \"hide\" });\n\n                                      notifDispatch({\n                                        type: \"show\",\n                                        notifTitle: \"Success\",\n                                        notifSubTitle:\n                                          \"Past Illness Type has been deleted successfully\",\n                                        variant: \"success\",\n                                      });\n\n                                      refetch();\n                                    }}\n                                    onCancel={() =>\n                                      bottomSheetDispatch({ type: \"hide\" })\n                                    }\n                                    values={value?.node}\n                                  />\n                                ),\n                              });\n                            }}\n                          >\n                            Edit\n                          </button>\n                        </td>\n                      </tr>\n                    )\n                  )}\n                </tbody>\n              </table>\n              <TablePagination\n                totalCount={data?.pastIllnessTypes.totalCount ?? 0}\n                onNext={handleNextClick}\n                onPrevious={handlePreviousClick}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SAVE_PAST_ILLNESS_TYPE = gql`\n  mutation SavePastIllnessType($input: PastIllnessTypeInput!) {\n    savePastIllnessTypes(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\ninterface AddPastIllnessTypeProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst AddPastIllnessTypeForm: React.FC<AddPastIllnessTypeProps> = ({\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<PastIllnessTypeInput>();\n  const [save, { error }] = useMutation<any, MutationSavePastIllnessTypesArgs>(\n    SAVE_PAST_ILLNESS_TYPE,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSubmit = (data: PastIllnessTypeInput) => {\n    save({ variables: { input: data } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Add Past Illness Type\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst UPDATE_PAST_ILLNESS_TYPE = gql`\n  mutation UpdatePastIllnessType($input: PastIllnessTypeUpdateInput!) {\n    updatePastIllnessType(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\nconst DELETE_PAST_ILLNESS_TYPE = gql`\n  mutation DeletePastIllnessType($id: ID!) {\n    deletePastIllnessType(id: $id)\n  }\n`;\n\ninterface UpdatePastIllnessTypeProps {\n  values: PastIllnessType | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst UpdatePastIllnessTypeForm: React.FC<UpdatePastIllnessTypeProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<PastIllnessTypeInput>({\n    defaultValues: {\n      title: values?.title,\n    },\n  });\n\n  const [save, { error }] = useMutation<any, MutationUpdatePastIllnessTypeArgs>(\n    UPDATE_PAST_ILLNESS_TYPE,\n    {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n  const [deletePastIllnessType] = useMutation<\n    any,\n    MutationDeletePastIllnessTypeArgs\n  >(DELETE_PAST_ILLNESS_TYPE, {\n    onCompleted(data) {\n      onDeleteSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const onUpdateSubmit = (data: PastIllnessTypeUpdateInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    data.id = id;\n    save({ variables: { input: data } });\n  };\n\n  const onDeleteSubmit = (data: PastIllnessTypeUpdateInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    deletePastIllnessType({ variables: { id: id } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update past illness type\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SearchBarMedications.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SearchBarAppointments.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/LifestyleTypeAdminTable.tsx",["1196"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { Query, PaginationInput, QueryLifestyleTypesArgs, Maybe, LifestyleTypeEdge, LifestyleTypeInput, MutationSaveLifestyleTypesArgs, LifestyleType, MutationUpdateLifestyleTypeArgs, MutationDeleteLifestyleTypeArgs, LifestyleTypeUpdateInput } from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { TablePagination } from \"./table_pagination\";\n\nconst LIFESTYLE_TYPES = gql`\n  query LifestyleTypes($page: PaginationInput!) {\n    lifestyleTypes(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 5;\n\nexport const LifestyleTypesTable: React.FC = () => {\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const { data, refetch } = useQuery<Query, QueryLifestyleTypesArgs>(\n    LIFESTYLE_TYPES,\n    {\n      variables: { page: paginationInput },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.lifestyleTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"flex flex-col\">\n        <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n            <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead>\n                  <tr>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 bg-gray-700 text-left text-sm font-medium text-gray-50 uppercase tracking-wider\"\n                    >\n                      Lifestyle Types\n                    </th>\n\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                    >\n                      <button\n                        onClick={() =>\n                          bottomSheetDispatch({\n                            type: \"show\",\n                            snapPoint: 500,\n                            children: (\n                              <AddLifestyleTypeForm\n                                onSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Lifestyle Type has been saved successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onCancel={() =>\n                                  bottomSheetDispatch({ type: \"hide\" })\n                                }\n                              />\n                            ),\n                          })\n                        }\n                        className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                      >\n                        <div className=\"flex items-center\">\n                          <div>\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 20 20\"\n                              fill=\"currentColor\"\n                              className=\"h-6 w-6\"\n                            >\n                              <path\n                                fillRule=\"evenodd\"\n                                d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                                clipRule=\"evenodd\"\n                              />\n                            </svg>\n                          </div>\n                          <div className=\"font-semibold\">Add</div>\n                        </div>\n                      </button>\n                    </th>\n                  </tr>\n                  <tr>\n                    <th colSpan={2}>\n                      <input\n                        type=\"text\"\n                        name=\"search\"\n                        id=\"lifestyle-types-search\"\n                        placeholder=\"Search\"\n                        className=\"p-1 pl-4 block w-full sm:text-md border-gray-300\"\n                      />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {data?.lifestyleTypes.edges.map(\n                    (value: Maybe<LifestyleTypeEdge>) => (\n                      <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {value?.node.title}\n                        </td>\n\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <button\n                            className=\"text-indigo-600 hover:text-indigo-900\"\n                            onClick={() => {\n                              bottomSheetDispatch({\n                                type: \"show\",\n                                snapPoint: 500,\n                                children: (\n                                  <UpdateLifestyleTypeForm\n                                    onUpdateSuccess={() => {\n                                      bottomSheetDispatch({ type: \"hide\" });\n\n                                      notifDispatch({\n                                        type: \"show\",\n                                        notifTitle: \"Success\",\n                                        notifSubTitle:\n                                          \"Lifestyl Type has been updated successfully\",\n                                        variant: \"success\",\n                                      });\n\n                                      refetch();\n                                    }}\n                                    onDeleteSuccess={() => {\n                                      bottomSheetDispatch({ type: \"hide\" });\n\n                                      notifDispatch({\n                                        type: \"show\",\n                                        notifTitle: \"Success\",\n                                        notifSubTitle:\n                                          \"Lifestyl Type has been deleted successfully\",\n                                        variant: \"success\",\n                                      });\n\n                                      refetch();\n                                    }}\n                                    onCancel={() =>\n                                      bottomSheetDispatch({ type: \"hide\" })\n                                    }\n                                    values={value?.node}\n                                  />\n                                ),\n                              });\n                            }}\n                          >\n                            Edit\n                          </button>\n                        </td>\n                      </tr>\n                    )\n                  )}\n                </tbody>\n              </table>\n              <TablePagination\n                totalCount={data?.lifestyleTypes.totalCount ?? 0}\n                onNext={handleNextClick}\n                onPrevious={handlePreviousClick}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SAVE_LIFESTYLE_TYPE = gql`\n  mutation SaveLifestyleType($input: LifestyleTypeInput!) {\n    saveLifestyleTypes(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\ninterface AddLifestyleTypeProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst AddLifestyleTypeForm: React.FC<AddLifestyleTypeProps> = ({\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<LifestyleTypeInput>();\n  const [save, { error }] = useMutation<any, MutationSaveLifestyleTypesArgs>(\n    SAVE_LIFESTYLE_TYPE,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n  const onSubmit = (data: LifestyleTypeInput) => {\n    save({ variables: { input: data } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Add Lifestyle Type\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst UPDATE_LIFESTYLE_TYPE = gql`\n  mutation UpdateLifestyleType($input: LifestyleTypeUpdateInput!) {\n    updateLifestyleType(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\nconst DELETE_LIFESTYLE_TYPE = gql`\n  mutation DeleteLifestyleType($id: ID!) {\n    deleteLifestyleType(id: $id)\n  }\n`;\n\ninterface UpdateLifestyleTypeProps {\n  values: LifestyleType | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst UpdateLifestyleTypeForm: React.FC<UpdateLifestyleTypeProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<LifestyleTypeInput>({\n    defaultValues: {\n      title: values?.title,\n    },\n  });\n\n  const [save, { error }] = useMutation<any, MutationUpdateLifestyleTypeArgs>(\n    UPDATE_LIFESTYLE_TYPE,\n    {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteLifestyleType] = useMutation<\n    any,\n    MutationDeleteLifestyleTypeArgs\n  >(DELETE_LIFESTYLE_TYPE, {\n    onCompleted(data) {\n      onDeleteSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const onUpdateSubmit = (data: LifestyleTypeUpdateInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    data.id = id;\n    save({ variables: { input: data } });\n  };\n\n  const onDeleteSubmit = (data: LifestyleTypeUpdateInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    deleteLifestyleType({ variables: { id: id } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update lifestyle type\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/DiagnosisAdminTable.tsx",["1197"],"import React, { useEffect, useState } from \"react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useForm } from \"react-hook-form\";\nimport { Diagnosis, DiagnosisEdge, DiagnosisInput, DiagnosisUpdateInput, Maybe, MutationDeleteDiagnosisArgs, MutationSaveDiagnosisArgs, MutationUpdateDiagnosisArgs, PaginationInput, Query, QueryDiagnosesArgs } from \"../models/models\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { TablePagination } from \"./table_pagination\";\n\nconst DIAGNOSIS = gql`\n  query Diagnoses($page: PaginationInput!) {\n    diagnoses(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          code\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst ROWS_PER_PAGE = 5;\n\nexport const DiagnosisTable: React.FC = () => {\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: ROWS_PER_PAGE,\n  });\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const { data, refetch } = useQuery<Query, QueryDiagnosesArgs>(DIAGNOSIS, {\n    variables: { page: paginationInput },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.diagnoses.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n        <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n          <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead>\n                <tr>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-700 text-left text-sm font-medium text-gray-50 uppercase tracking-wider\"\n                  >\n                    Diagnosis\n                  </th>\n\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                  >\n                    <button\n                      onClick={() =>\n                        bottomSheetDispatch({\n                          type: \"show\",\n                          snapPoint: 500,\n                          children: (\n                            <AddDiagnosisForm\n                              onSuccess={() => {\n                                bottomSheetDispatch({ type: \"hide\" });\n\n                                notifDispatch({\n                                  type: \"show\",\n                                  notifTitle: \"Success\",\n                                  notifSubTitle:\n                                    \"Diagnosis has been saved successfully\",\n                                  variant: \"success\",\n                                });\n\n                                refetch();\n                              }}\n                              onCancel={() =>\n                                bottomSheetDispatch({ type: \"hide\" })\n                              }\n                            />\n                          ),\n                        })\n                      }\n                      className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                    >\n                      <div className=\"flex items-center\">\n                        <div>\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"currentColor\"\n                            className=\"h-6 w-6\"\n                          >\n                            <path\n                              fillRule=\"evenodd\"\n                              d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                              clipRule=\"evenodd\"\n                            />\n                          </svg>\n                        </div>\n                        <div className=\"font-semibold\">Add</div>\n                      </div>\n                    </button>\n                  </th>\n                </tr>\n                <tr>\n                  <th colSpan={2}>\n                    <input\n                      type=\"text\"\n                      name=\"search\"\n                      id=\"diangosis-search\"\n                      placeholder=\"Search\"\n                      className=\"p-1 pl-4 block w-full sm:text-md border-gray-300\"\n                    />\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {data?.diagnoses.edges.map((value: Maybe<DiagnosisEdge>) => (\n                  <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {value?.node.title}\n                    </td>\n\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <button\n                        className=\"text-indigo-600 hover:text-indigo-900\"\n                        onClick={() => {\n                          bottomSheetDispatch({\n                            type: \"show\",\n                            snapPoint: 500,\n                            children: (\n                              <UpdateDiagnosisForm\n                                onUpdateSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Diagnosis has been updated successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onDeleteSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"Diagnosis has been deleted successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onCancel={() =>\n                                  bottomSheetDispatch({ type: \"hide\" })\n                                }\n                                values={value?.node}\n                              />\n                            ),\n                          });\n                        }}\n                      >\n                        Edit\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <TablePagination\n              totalCount={data?.diagnoses.totalCount ?? 0}\n              onNext={handleNextClick}\n              onPrevious={handlePreviousClick}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SAVE_DIAGNOSIS = gql`\n  mutation SaveDiagnosis($input: DiagnosisInput!) {\n    saveDiagnosis(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\ninterface AddDiagnosisProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst AddDiagnosisForm: React.FC<AddDiagnosisProps> = ({\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<DiagnosisInput>();\n  const [save, { error }] = useMutation<any, MutationSaveDiagnosisArgs>(\n    SAVE_DIAGNOSIS,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSubmit = (data: DiagnosisInput) => {\n    save({ variables: { input: data } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Add diagnosis\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst UPDATE_DIAGNOSIS = gql`\n  mutation UpdateDiagnosis($input: DiagnosisUpdateInput!) {\n    updateDiagnosis(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\nconst DELETE_DIGANOSIS = gql`\n  mutation DeleteDiagnosis($id: ID!) {\n    deleteDiagnosis(id: $id)\n  }\n`;\n\ninterface UpdateDiagnosisProps {\n  values: Diagnosis | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst UpdateDiagnosisForm: React.FC<UpdateDiagnosisProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<DiagnosisUpdateInput>({\n    defaultValues: {\n      id: values?.id,\n      title: values?.title,\n    },\n  });\n\n  const [save, { error }] = useMutation<any, MutationUpdateDiagnosisArgs>(\n    UPDATE_DIAGNOSIS,\n    {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteDiagnosis] = useMutation<any, MutationDeleteDiagnosisArgs>(\n    DELETE_DIGANOSIS,\n    {\n      onCompleted(data) {\n        onDeleteSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onUpdateSubmit = (data: DiagnosisUpdateInput) => {\n    if (values?.id !== undefined) {\n      data.id = values?.id;\n      save({ variables: { input: data } });\n    }\n  };\n\n  const onDeleteSubmit = (data: DiagnosisUpdateInput) => {\n    deleteDiagnosis({ variables: { id: data.id } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update diagnosis\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateLabTypeForm.tsx",["1198","1199","1200"],"import { gql, useQuery, useMutation } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  LabStatus,\n  LabType,\n  LabTypeUpdateInput,\n  MutationDeleteLabTypeArgs,\n  MutationUpdateLabTypeArgs,\n  Query,\n  QueryBillingsArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { BILLINGS } from \"../pages/Admin/BillingsAdminPage\";\nimport Select from \"react-select\";\n\nconst UPDATE_LAB_TYPE = gql`\n  mutation UpdateLabType($input: LabTypeUpdateInput!) {\n    updateLabType(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_LAB_TYPE = gql`\n  mutation DeleteLabType($id: ID!) {\n    deleteLabType(id: $id)\n  }\n`;\n\ninterface UpdateLabTypeProps {\n  values: LabType | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport const UpdateLabTypeForm: React.FC<UpdateLabTypeProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit, setValue } = useForm<LabTypeUpdateInput>();\n\n  const [selectedBillings, setSelectedBillings] = useState<Array<any>>([]);\n\n  const { data } = useQuery<Query, QueryBillingsArgs>(BILLINGS, {\n    variables: { page: { page: 0, size: 1000 } },\n  });\n\n  useEffect(() => {\n    const billings = values?.billings.map((e) => ({\n      value: e?.id,\n      label: e?.item,\n    }));\n    if (billings) {\n      setSelectedBillings(billings);\n    }\n\n    setValue(\"title\", values?.title);\n    setValue(\"active\", values?.active);\n  }, [values, data]);\n\n  const [save, { error }] = useMutation<any, MutationUpdateLabTypeArgs>(\n    UPDATE_LAB_TYPE,\n    {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteLabType] = useMutation<any, MutationDeleteLabTypeArgs>(\n    DELETE_LAB_TYPE,\n    {\n      onCompleted(data) {\n        onDeleteSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onUpdateSubmit = (data: any) => {\n    const id: string = values?.id.toString() ?? \"\";\n    save({\n      variables: {\n        input: {\n          id: id,\n          title: data.title,\n          active: data.active === \"true\",\n          billingIds: selectedBillings.map((e) => e.value),\n        },\n      },\n    });\n  };\n\n  const onDeleteSubmit = (data: LabTypeUpdateInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    deleteLabType({ variables: { id: id } });\n  };\n\n  const billings = data?.billings.edges.map((e) => ({\n    value: e?.node.id,\n    label: e?.node.item,\n  }));\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update Lab Type\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              id=\"title\"\n              type=\"text\"\n              name=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            <Select\n              isMulti\n              placeholder=\"Billings\"\n              options={billings}\n              value={selectedBillings}\n              onChange={(values) => {\n                setSelectedBillings(values.map((e) => e));\n              }}\n            />\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"status\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Status\n            </label>\n            <select\n              id=\"status\"\n              name=\"status\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n            >\n              <option value={\"true\"}>Active</option>\n              <option value={\"false\"}>Inactive</option>\n            </select>\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/HpiComponentAdminTable.tsx",["1201"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useBottomSheetDispatch } from \"../bottomsheet\";\nimport { Query, PaginationInput, QueryHpiComponentsArgs, Maybe, HpiComponentEdge, HpiComponentInput, MutationSaveHpiComponentArgs, HpiComponent, HpiComponentUpdateInput, MutationUpdateHpiComponentArgs, MutationDeleteHpiComponentArgs } from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\n\ninterface Props {\n  hpiComponentTypeId: string;\n}\n\nconst HPI_COMPONENTS = gql`\n  query HpiComponents($page: PaginationInput!, $filter: HpiFilter) {\n    hpiComponents(page: $page, filter: $filter) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          hpiComponentType {\n            id\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nexport const HpiComponentTable: React.FC<Props> = ({ hpiComponentTypeId }) => {\n  const [paginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 50,\n  });\n\n  const bottomSheetDispatch = useBottomSheetDispatch();\n  const notifDispatch = useNotificationDispatch();\n\n  const { data, refetch } = useQuery<Query, QueryHpiComponentsArgs>(\n    HPI_COMPONENTS,\n    {\n      variables: {\n        page: paginationInput,\n        filter: { hpiComponentTypeId: hpiComponentTypeId },\n      },\n    }\n  );\n\n  useEffect(() => {\n    refetch();\n  }, [hpiComponentTypeId]);\n\n  return (\n    <div>\n      <div className=\"flex flex-col\">\n        <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n            <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead>\n                  <tr onClick={() => {}}>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 bg-gray-700 text-left text-sm font-medium text-gray-50 uppercase tracking-wider\"\n                    >\n                      HPI Components\n                    </th>\n\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 bg-gray-700 text-gray-100 text-right\"\n                    >\n                      <button\n                        onClick={() => {\n                          bottomSheetDispatch({\n                            type: \"show\",\n                            snapPoint: 500,\n                            children: (\n                              <AddHpiComponentForm\n                                hpiComponentTypeId={hpiComponentTypeId}\n                                onSuccess={() => {\n                                  bottomSheetDispatch({ type: \"hide\" });\n\n                                  notifDispatch({\n                                    type: \"show\",\n                                    notifTitle: \"Success\",\n                                    notifSubTitle:\n                                      \"HPI component has been saved successfully\",\n                                    variant: \"success\",\n                                  });\n\n                                  refetch();\n                                }}\n                                onCancel={() =>\n                                  bottomSheetDispatch({ type: \"hide\" })\n                                }\n                              />\n                            ),\n                          });\n                        }}\n                        className=\"uppercase bg-gray-800 hover:bg-gray-900 py-1 px-2 rounded-md text-sm\"\n                      >\n                        <div className=\"flex items-center\">\n                          <div>\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 20 20\"\n                              fill=\"currentColor\"\n                              className=\"h-6 w-6\"\n                            >\n                              <path\n                                fillRule=\"evenodd\"\n                                d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n                                clipRule=\"evenodd\"\n                              />\n                            </svg>\n                          </div>\n                          <div className=\"font-semibold\">Add</div>\n                        </div>\n                      </button>\n                    </th>\n                  </tr>\n                  <tr>\n                    <th colSpan={2}>\n                      <input\n                        type=\"text\"\n                        name=\"search\"\n                        id=\"hpi-component-search\"\n                        placeholder=\"Search\"\n                        className=\"p-1 pl-4 block w-full sm:text-md border-gray-300\"\n                      />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {data?.hpiComponents.edges.map(\n                    (value: Maybe<HpiComponentEdge>) => (\n                      <tr key={value?.node.id} className=\"hover:bg-gray-100\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {value?.node.title}\n                        </td>\n\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <button\n                            className=\"text-indigo-600 hover:text-indigo-900\"\n                            onClick={() => {\n                              bottomSheetDispatch({\n                                type: \"show\",\n                                snapPoint: 500,\n                                children: (\n                                  <UpdateHpiComponentForm\n                                    onUpdateSuccess={() => {\n                                      bottomSheetDispatch({ type: \"hide\" });\n\n                                      notifDispatch({\n                                        type: \"show\",\n                                        notifTitle: \"Success\",\n                                        notifSubTitle:\n                                          \"HPI component has been updated successfully\",\n                                        variant: \"success\",\n                                      });\n\n                                      refetch();\n                                    }}\n                                    onDeleteSuccess={() => {\n                                      bottomSheetDispatch({ type: \"hide\" });\n\n                                      notifDispatch({\n                                        type: \"show\",\n                                        notifTitle: \"Success\",\n                                        notifSubTitle:\n                                          \"HPI component has been deleted successfully\",\n                                        variant: \"success\",\n                                      });\n\n                                      refetch();\n                                    }}\n                                    onCancel={() =>\n                                      bottomSheetDispatch({ type: \"hide\" })\n                                    }\n                                    values={value?.node}\n                                  />\n                                ),\n                              });\n                            }}\n                          >\n                            Edit\n                          </button>\n                        </td>\n                      </tr>\n                    )\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SAVE_HPI_COMPONENT = gql`\n  mutation SaveHpiComponent($input: HpiComponentInput!) {\n    saveHpiComponent(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\ninterface AddHpiComponentProps {\n  hpiComponentTypeId: string | undefined;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst AddHpiComponentForm: React.FC<AddHpiComponentProps> = ({\n  hpiComponentTypeId,\n  onSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<HpiComponentInput>();\n\n  const [save, { error }] = useMutation<any, MutationSaveHpiComponentArgs>(\n    SAVE_HPI_COMPONENT,\n    {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSubmit = (data: HpiComponentInput) => {\n    if (hpiComponentTypeId !== undefined) {\n      data.hpiComponentTypeId = hpiComponentTypeId;\n    }\n\n    save({ variables: { input: data } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Add HPI component\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n          >\n            <span className=\"ml-2\">Save</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst UPDATE_HPI_COMPONENT = gql`\n  mutation UpdateHpiComponent($input: HpiComponentUpdateInput!) {\n    updateHpiComponent(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\nconst DELETE_HPI_COMPONENT = gql`\n  mutation DeleteHpiComponent($id: ID!) {\n    deleteHpiComponent(id: $id)\n  }\n`;\n\ninterface UpdateHpiComponentProps {\n  values: HpiComponent | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst UpdateHpiComponentForm: React.FC<UpdateHpiComponentProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit } = useForm<HpiComponentUpdateInput>({\n    defaultValues: {\n      id: values?.id,\n      title: values?.title,\n      hpiComponentTypeId: values?.hpiComponentType.id,\n    },\n  });\n\n  const [save, { error }] = useMutation<any, MutationUpdateHpiComponentArgs>(\n    UPDATE_HPI_COMPONENT,\n    {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteHpiComponent] = useMutation<any, MutationDeleteHpiComponentArgs>(\n    DELETE_HPI_COMPONENT,\n    {\n      onCompleted(data) {\n        onDeleteSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onUpdateSubmit = (data: HpiComponentUpdateInput) => {\n    if (values !== undefined) {\n      data.id = values?.id;\n      data.hpiComponentTypeId = values.hpiComponentType.id;\n\n      save({ variables: { input: data } });\n    }\n  };\n\n  const onDeleteSubmit = (data: HpiComponentInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    deleteHpiComponent({ variables: { id: id } });\n  };\n\n  return (\n    <div\n      className=\"container mx-auto flex justify-center pt-4\"\n      style={{ height: \"300px\" }}\n    >\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update HPI component\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n\n            <button\n              type=\"submit\"\n              onClick={handleSubmit(onDeleteSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Delete</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateTreatmentTypeForm.tsx",["1202","1203","1204"],"import { gql, useQuery, useMutation } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  MutationDeleteTreatmentTypeArgs,\n  MutationUpdateTreatmentTypeArgs,\n  Query,\n  QueryBillingsArgs,\n  QuerySuppliesArgs,\n  TreatmentStatus,\n  TreatmentType,\n  TreatmentTypeUpdateInput,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { BILLINGS } from \"../pages/Admin/BillingsAdminPage\";\nimport { SUPPLIES } from \"../pages/Admin/SupplyAdminPage\";\nimport Select from \"react-select\";\n\nconst UPDATE_TREATMENT_TYPE = gql`\n  mutation UpdateTreatmentType($input: TreatmentTypeUpdateInput!) {\n    updateTreatmentType(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_TREATMENT_TYPE = gql`\n  mutation DeleteTreatmentType($id: ID!) {\n    deleteTreatmentType(id: $id)\n  }\n`;\n\ninterface UpdateTreatmentTypeProps {\n  values: TreatmentType | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport const UpdateTreatmentTypeForm: React.FC<UpdateTreatmentTypeProps> = ({\n  values,\n  onUpdateSuccess,\n  onDeleteSuccess,\n  onCancel,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, handleSubmit, setValue } =\n    useForm<TreatmentTypeUpdateInput>();\n\n  const [selectedBillings, setSelectedBillings] = useState<Array<any>>([]);\n  const [selectedSupplies, setSelectedSupplies] = useState<Array<any>>([]);\n\n  const billingQuery = useQuery<Query, QueryBillingsArgs>(BILLINGS, {\n    variables: { page: { page: 0, size: 1000 } },\n  });\n\n  const supplyQuery = useQuery<Query, QuerySuppliesArgs>(SUPPLIES, {\n    variables: { page: { page: 0, size: 1000 } },\n  });\n\n  useEffect(() => {\n    const billings = values?.billings.map((e) => ({\n      value: e?.id,\n      label: e?.item,\n    }));\n    if (billings) {\n      setSelectedBillings(billings);\n    }\n\n    const supplies = values?.supplies.map((e) => ({\n      value: e?.id,\n      label: e?.title,\n    }));\n\n    if (supplies) {\n      setSelectedSupplies(supplies);\n    }\n\n    setValue(\"title\", values?.title);\n    setValue(\"active\", values?.active);\n  }, [values, billingQuery.data]);\n\n  const [save, { error }] = useMutation<any, MutationUpdateTreatmentTypeArgs>(\n    UPDATE_TREATMENT_TYPE,\n    {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteTreatmentType] = useMutation<\n    any,\n    MutationDeleteTreatmentTypeArgs\n  >(DELETE_TREATMENT_TYPE, {\n    onCompleted(data) {\n      onDeleteSuccess();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const onUpdateSubmit = (data: any) => {\n    const id: string = values?.id.toString() ?? \"\";\n    save({\n      variables: {\n        input: {\n          id: id,\n          title: data.title,\n          active: data.active === \"true\",\n          billingIds: selectedBillings.map((e) => e.value),\n          supplyIds: selectedSupplies.map((e) => e.value),\n        },\n      },\n    });\n  };\n\n  const onDeleteSubmit = (data: TreatmentTypeUpdateInput) => {\n    const id: string = values?.id.toString() ?? \"\";\n    deleteTreatmentType({ variables: { id: id } });\n  };\n\n  const billings = billingQuery.data?.billings.edges.map((e) => ({\n    value: e?.node.id,\n    label: e?.node.item,\n  }));\n\n  const supplies = supplyQuery.data?.supplies.edges.map((e) => ({\n    value: e?.node.id,\n    label: e?.node.title,\n  }));\n\n  return (\n    <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n      <div className=\"w-1/2\">\n        <div className=\"float-right\">\n          <button onClick={onCancel}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-8 w-8 text-gray-500\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <form>\n          <p className=\"text-2xl font-extrabold tracking-wider\">\n            Update Treatment Type\n          </p>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Title\n            </label>\n            <input\n              id=\"title\"\n              type=\"text\"\n              name=\"title\"\n              required\n              ref={register({ required: true })}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            <Select\n              isMulti\n              placeholder=\"Billings\"\n              options={billings}\n              value={selectedBillings}\n              onChange={(values) => {\n                setSelectedBillings(values.map((e) => e));\n              }}\n            />\n          </div>\n\n          <div className=\"mt-4\">\n            <Select\n              isMulti\n              placeholder=\"Supplies\"\n              options={supplies}\n              value={selectedSupplies}\n              onChange={(values) => {\n                setSelectedSupplies(values.map((e) => e));\n              }}\n            />\n          </div>\n          <div className=\"mt-4\">\n            <label\n              htmlFor=\"status\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Status\n            </label>\n            <select\n              required\n              id=\"status\"\n              name=\"status\"\n              ref={register({ required: true })}\n              className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n            >\n              <option value={\"true\"}>Active</option>\n              <option value={\"false\"}>Inactive</option>\n            </select>\n          </div>\n          <div className=\"mt-4\">\n            {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n          </div>\n          <div className=\"flex space-x-5\">\n            <button\n              type=\"button\"\n              onClick={handleSubmit(onUpdateSubmit)}\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Update</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateSurgicalProcedureTypeForm.tsx",["1205","1206"],"import { useQuery, useMutation, gql } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  SurgicalProcedureType,\n  SurgicalProcedureTypeUpdateInput,\n  QueryBillingsArgs,\n  QuerySuppliesArgs,\n  MutationUpdateSurgicalProcedureTypeArgs,\n  MutationDeleteSurgicalProcedureTypeArgs,\n  Query,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { BILLINGS } from \"../pages/Admin/BillingsAdminPage\";\nimport { SUPPLIES } from \"../pages/Admin/SupplyAdminPage\";\nimport Select from \"react-select\";\n\nconst UPDATE_SURGICAL_PROCEDURE_TYPE = gql`\n  mutation UpdateSurgicalProcedureType(\n    $input: SurgicalProcedureTypeUpdateInput!\n  ) {\n    updateSurgicalProcedureType(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_SURGICAL_PROCEDURE_TYPE = gql`\n  mutation DeleteSurgicalProcedureType($id: ID!) {\n    deleteSurgicalProcedureType(id: $id)\n  }\n`;\n\ninterface UpdateSurgicalProcedureTypeProps {\n  values: SurgicalProcedureType | undefined;\n  onUpdateSuccess: () => void;\n  onDeleteSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport const UpdateSurgicalProcedureTypeForm: React.FC<UpdateSurgicalProcedureTypeProps> =\n  ({ values, onUpdateSuccess, onDeleteSuccess, onCancel }) => {\n    const notifDispatch = useNotificationDispatch();\n    const { register, handleSubmit, setValue } =\n      useForm<SurgicalProcedureTypeUpdateInput>();\n\n    const billingQuery = useQuery<Query, QueryBillingsArgs>(BILLINGS, {\n      variables: { page: { page: 0, size: 1000 } },\n    });\n\n    const [selectedBillings, setSelectedBillings] = useState<Array<any>>([]);\n    const [selectedSupplies, setSelectedSupplies] = useState<Array<any>>([]);\n\n    const supplyQuery = useQuery<Query, QuerySuppliesArgs>(SUPPLIES, {\n      variables: { page: { page: 0, size: 1000 } },\n    });\n\n    useEffect(() => {\n      const billings = values?.billings.map((e) => ({\n        value: e?.id,\n        label: e?.item,\n      }));\n      if (billings) {\n        setSelectedBillings(billings);\n      }\n\n      const supplies = values?.supplies.map((e) => ({\n        value: e?.id,\n        label: e?.title,\n      }));\n\n      if (supplies) {\n        setSelectedSupplies(supplies);\n      }\n\n      setValue(\"title\", values?.title);\n      setValue(\"active\", values?.active);\n    }, [values, billingQuery.data]);\n\n    const [save, { error }] = useMutation<\n      any,\n      MutationUpdateSurgicalProcedureTypeArgs\n    >(UPDATE_SURGICAL_PROCEDURE_TYPE, {\n      onCompleted(data) {\n        onUpdateSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    });\n\n    const [deleteSurgicalProcedureType] = useMutation<\n      any,\n      MutationDeleteSurgicalProcedureTypeArgs\n    >(DELETE_SURGICAL_PROCEDURE_TYPE, {\n      onCompleted(data) {\n        onDeleteSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    });\n\n    const onUpdateSubmit = (data: any) => {\n      const id: string = values?.id.toString() ?? \"\";\n      save({\n        variables: {\n          input: {\n            id: id,\n            title: data.title,\n            active: data.active === \"true\",\n            billingIds: selectedBillings.map((e) => e.value),\n            supplyIds: selectedSupplies.map((e) => e.value),\n          },\n        },\n      });\n    };\n\n    const onDeleteSubmit = (data: SurgicalProcedureTypeUpdateInput) => {\n      const id: string = values?.id.toString() ?? \"\";\n      deleteSurgicalProcedureType({ variables: { id: id } });\n    };\n\n    const billings = billingQuery.data?.billings.edges.map((e) => ({\n      value: e?.node.id,\n      label: e?.node.item,\n    }));\n\n    const supplies = supplyQuery.data?.supplies.edges.map((e) => ({\n      value: e?.node.id,\n      label: e?.node.title,\n    }));\n\n    return (\n      <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n        <div className=\"w-1/2\">\n          <div className=\"float-right\">\n            <button onClick={onCancel}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                className=\"h-8 w-8 text-gray-500\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </button>\n          </div>\n          <form>\n            <p className=\"text-2xl font-extrabold tracking-wider\">\n              Update Surgical Procedure\n            </p>\n            <div className=\"mt-4\">\n              <label\n                htmlFor=\"title\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Title\n              </label>\n              <input\n                id=\"title\"\n                type=\"text\"\n                name=\"title\"\n                required\n                ref={register({ required: true })}\n                className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n              />\n            </div>\n            <div className=\"mt-4\">\n              <Select\n                isMulti\n                placeholder=\"Billings\"\n                options={billings}\n                value={selectedBillings}\n                onChange={(values) => {\n                  setSelectedBillings(values.map((e) => e));\n                }}\n              />\n            </div>\n\n            <div className=\"mt-4\">\n              <Select\n                isMulti\n                placeholder=\"Supplies\"\n                options={supplies}\n                value={selectedSupplies}\n                onChange={(values) => {\n                  setSelectedSupplies(values.map((e) => e));\n                }}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <label\n                htmlFor=\"active\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Status\n              </label>\n              <select\n                required\n                name=\"active\"\n                ref={register({ required: true })}\n                className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n              >\n                <option value={\"true\"}>Active</option>\n                <option value={\"false\"}>Inactive</option>\n              </select>\n            </div>\n            <div className=\"mt-4\">\n              {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n            </div>\n            <div className=\"flex space-x-5\">\n              <button\n                type=\"button\"\n                onClick={handleSubmit(onUpdateSubmit)}\n                className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 focus:outline-none\"\n              >\n                <span className=\"ml-2\">Update</span>\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  };\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddPatientEncounterLimitForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddPharmacyForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/NavItem.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/AppointmentsPage.tsx",["1207","1208"],"import { gql, QueryResult, useQuery } from \"@apollo/client\";\nimport classNames from \"classnames\";\nimport { format } from \"date-fns\";\nimport React, { useEffect, useState } from \"react\";\nimport { TablePagination } from \"../../components/table_pagination\";\nimport {\n  Appointment,\n  AppointmentConnection,\n  AppointmentSearchInput,\n  PaginationInput,\n  Query,\n  QuerySearchAppointmentsArgs,\n} from \"../../models/models\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { Page } from \"../../models/page\";\n\nconst TOOLBAR_LOOKUPS = gql`\n  query ToolbarLookups($userTypeTitle: String!) {\n    appointmentStatuses(page: { page: 0, size: 20 }) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n    }\n    visitTypes(page: { page: 0, size: 20 }) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n    }\n    getByUserTypeTitle(input: $userTypeTitle) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\nconst APPOINTMENT_SEARCH = gql`\n  query SearchAppointments(\n    $input: AppointmentSearchInput!\n    $page: PaginationInput!\n  ) {\n    searchAppointments(input: $input, page: $page) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          providerName\n          checkInTime\n          checkedInTime\n          checkedOutTime\n          patient {\n            id\n            firstName\n            lastName\n            phoneNo\n          }\n          room {\n            id\n            title\n          }\n          visitType {\n            id\n            title\n          }\n          appointmentStatus {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction useRouterQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport const AppointmentsPage: React.FC<{ onAddPage: (page: Page) => void }> =\n  ({ onAddPage }) => {\n    const query = useRouterQuery();\n    const queryUserId = query.get(\"userId\");\n    const queryStatusId = query.get(\"statusId\");\n    const queryStatus = query.get(\"status\");\n    const queryVisitTypeId = query.get(\"visitTypeId\");\n    const history = useHistory();\n\n    const [filter, setFilter] = useState<AppointmentSearchInput>({\n      checkInTime: new Date(),\n      userId: queryUserId === null ? \"all\" : queryUserId,\n      appointmentStatusId: queryStatusId === null ? \"all\" : queryStatusId,\n      visitTypeId: queryVisitTypeId === null ? \"all\" : queryVisitTypeId,\n    });\n\n    const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n      page: 1,\n      size: 20,\n    });\n\n    const { data, refetch } = useQuery<Query, QuerySearchAppointmentsArgs>(\n      APPOINTMENT_SEARCH,\n      {\n        variables: {\n          input: {\n            checkInTime: filter.checkInTime,\n            userId: filter.userId === \"all\" ? undefined : filter.userId,\n            appointmentStatusId:\n              filter.appointmentStatusId === \"all\"\n                ? undefined\n                : filter.appointmentStatusId,\n            visitTypeId:\n              filter.visitTypeId === \"all\" ? undefined : filter.visitTypeId,\n            searchTerm:\n              filter.searchTerm?.length === 0 ? undefined : filter.searchTerm,\n          },\n          page: paginationInput,\n        },\n      }\n    );\n\n    const queryToolbarLookup = useQuery<Query, any>(TOOLBAR_LOOKUPS, {\n      variables: {\n        userTypeTitle: \"Physician\",\n      },\n    });\n\n    useEffect(() => {\n      if (\n        queryToolbarLookup.data?.appointmentStatuses &&\n        queryStatus !== null\n      ) {\n        const status = queryToolbarLookup.data.appointmentStatuses.edges.find(\n          (e) => e?.node.title === queryStatus\n        );\n        if (status) {\n          setFilter({\n            ...filter,\n            appointmentStatusId: status.node.id.toString(),\n          });\n        }\n      }\n    }, [queryStatus, queryToolbarLookup]);\n\n    useEffect(() => {\n      refetch();\n    }, [filter, paginationInput]);\n\n    const handleNextClick = () => {\n      const totalPages = data?.searchAppointments.pageInfo.totalPages ?? 0;\n\n      if (totalPages > paginationInput.page) {\n        setPaginationInput({\n          ...paginationInput,\n          page: paginationInput.page + 1,\n        });\n      }\n    };\n\n    const handlePrevClick = () => {\n      if (paginationInput.page > 1) {\n        setPaginationInput({\n          ...paginationInput,\n          page: paginationInput.page - 1,\n        });\n      }\n    };\n\n    const handleClear = () => {\n      setFilter({\n        checkInTime: new Date(),\n        userId: \"all\",\n        appointmentStatusId: \"all\",\n        visitTypeId: \"all\",\n        searchTerm: undefined,\n      });\n    };\n\n    const handleAppointmentClick = (appointment: Appointment) => {\n      const page: Page = {\n        title: `Appointment - ${appointment.patient.firstName} ${appointment.patient.lastName}`,\n        cancellable: true,\n        route: `/appointments/${appointment.id}/patient-details`,\n        icon: (\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n            className=\"h-4 w-4\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n            />\n          </svg>\n        ),\n      };\n\n      onAddPage(page);\n      history.replace(`/appointments/${appointment.id}/patient-details`);\n    };\n    return (\n      <div className=\"h-screen\">\n        <Toolbar\n          filter={filter}\n          lookup={queryToolbarLookup}\n          onClear={handleClear}\n          onChange={(input) => {\n            setFilter(input);\n          }}\n        />\n\n        <AppointmentsTable\n          filter={filter}\n          data={data?.searchAppointments}\n          onSelect={handleAppointmentClick}\n          onNext={handleNextClick}\n          onPrev={handlePrevClick}\n        />\n      </div>\n    );\n  };\n\ninterface ToolbarProps {\n  filter: AppointmentSearchInput | undefined;\n  lookup: QueryResult<Query, any> | undefined;\n  onChange: (searchInput: AppointmentSearchInput) => void;\n  onClear: () => void;\n}\n\nconst Toolbar: React.FC<ToolbarProps> = ({\n  filter,\n  lookup,\n  onChange,\n  onClear,\n}) => {\n  const handleChange = (evt: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = evt.target.value;\n\n    const newValue = {\n      ...filter,\n      [evt.target.name]: value === \"all\" ? undefined : value,\n    };\n\n    onChange(newValue);\n  };\n\n  return (\n    <div className=\"flex bg-white w-full h-16 p-4 mt-4 rounded-md shadow-md justify-between items-center\">\n      <div className=\"flex items-center text-gray-700\">\n        <input\n          type=\"date\"\n          id=\"checkInTime\"\n          name=\"checkInTime\"\n          value={format(filter?.checkInTime, \"yyyy-MM-dd\")}\n          className=\"border-l-2 border-gray-200 rounded-md\"\n          onChange={(evt) => {\n            if (filter !== undefined) {\n              const value = evt.target.value;\n              const newValue: AppointmentSearchInput = {\n                ...filter,\n                checkInTime: new Date(value),\n              };\n\n              onChange(newValue);\n            }\n          }}\n        />\n\n        <select\n          name=\"userId\"\n          className=\"ml-6 border-l-2 border-gray-200 rounded-md\"\n          value={filter?.userId ?? \"all\"}\n          onChange={handleChange}\n        >\n          <option value={\"all\"}>All Doctors</option>\n          {lookup?.data?.getByUserTypeTitle.map((e) => (\n            <option\n              key={e?.id}\n              value={e?.id}\n            >{`Dr. ${e?.firstName} ${e?.lastName}`}</option>\n          ))}\n        </select>\n        <select\n          className=\"ml-6 border-l-2 border-gray-200 rounded-md\"\n          name=\"appointmentStatusId\"\n          value={filter?.appointmentStatusId ?? \"all\"}\n          onChange={handleChange}\n        >\n          <option value={\"all\"}>All Statuses</option>\n          {lookup?.data?.appointmentStatuses.edges.map((e) => (\n            <option key={e?.node.id} value={e?.node.id}>\n              {e?.node.title}\n            </option>\n          ))}\n        </select>\n        <select\n          className=\"ml-6 border-l-2 border-gray-200 rounded-md\"\n          name=\"visitTypeId\"\n          value={filter?.visitTypeId ?? \"all\"}\n          onChange={handleChange}\n        >\n          <option value={\"all\"}>All visit types</option>\n          {lookup?.data?.visitTypes.edges.map((e) => (\n            <option key={e?.node.id} value={e?.node.id}>\n              {e?.node.title}\n            </option>\n          ))}\n        </select>\n        <div className=\"ml-6 border-l-2 p-1 pl-6\">\n          <button\n            onClick={onClear}\n            className=\"uppercase text-white tracking-wider text-sm rounded-md bg-teal-600 hover:bg-teal-700 px-6 py-2\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n      <div>\n        <div className=\"relative mx-auto text-gray-600\">\n          <input\n            className=\"border-2 border-gray-300 bg-white h-10 px-5 pr-16 rounded-lg text-sm focus:outline-none\"\n            type=\"search\"\n            name=\"searchTerm\"\n            placeholder=\"Search\"\n            value={filter?.searchTerm ?? \"\"}\n            onChange={(evt) => {\n              const value = evt.target.value;\n\n              const newValue = {\n                ...filter,\n                [evt.target.name]: value.length === 0 ? null : value,\n              };\n\n              onChange(newValue);\n            }}\n          />\n          <button type=\"submit\" className=\"absolute right-0 top-0 mt-3 mr-4\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n              className=\"h-4 w-4\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface TableProps {\n  data: AppointmentConnection | undefined;\n  filter: AppointmentSearchInput | undefined;\n  onSelect: (appointment: Appointment) => void;\n  onNext: () => void;\n  onPrev: () => void;\n}\n\nconst AppointmentsTable: React.FC<TableProps> = ({\n  data,\n  onNext,\n  onPrev,\n  onSelect,\n}) => {\n  return (\n    <div className=\"flex flex-col mt-4\">\n      <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n        <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n          <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead>\n                <tr>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Patient\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Phone Number\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Provider\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Visit Type\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Payment\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {data?.edges.map((e) => (\n                  <tr\n                    key={e?.node.id}\n                    className=\"hover:bg-gray-100 cursor-pointer\"\n                    onClick={() => e?.node && onSelect(e?.node)}\n                  >\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"flex-shrink-0 h-10 w-10\">\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                            className=\"h-10 w-10 text-gray-600\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth={2}\n                              d=\"M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                            />\n                          </svg>\n                        </div>\n                        <div className=\"ml-4\">\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {`${e?.node.patient?.firstName} ${e?.node.patient?.lastName}`}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {e?.node.patient?.id}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {e?.node.patient?.phoneNo}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">\n                        {e?.node.userId}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {e?.node.room?.title}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {e?.node.visitType?.title}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {\"November\"}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={classNames(\n                          \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\",\n                          {\n                            \"bg-yellow-100 text-yellow-800\":\n                              e?.node.appointmentStatus?.title ===\n                                \"Scheduled online\" || \"Scheduled\",\n                          },\n                          {\n                            \"bg-green-100 text-green-800\":\n                              e?.node.appointmentStatus?.title === \"Checked In\",\n                          },\n                          {\n                            \"bg-red-100 text-red-800\":\n                              e?.node.appointmentStatus?.title ===\n                              \"Checked Out\",\n                          }\n                        )}\n                      >\n                        {e?.node.appointmentStatus?.title}\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <TablePagination\n              totalCount={data?.totalCount ?? 0}\n              onNext={onNext}\n              onPrevious={onPrev}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/_context/AppointmentContext.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientRegistrationDocumentsForm.tsx",["1209"],"import React from \"react\";\nimport { FileUploader, FileUploaderComponent } from \"./FileUploaderComponent\";\nimport { Spinner } from \"./spinner\";\nimport classnames from \"classnames\";\n\ninterface Props {\n  register: any;\n  paperRecord: \"Yes\" | \"No\";\n  setPaperRecord: (value: \"Yes\" | \"No\") => void;\n  documents: Array<FileUploader>;\n  setDocuments: (value: Array<FileUploader>) => void;\n  onDocumentDelete: (index: number) => void;\n  paperRecordDocument: Array<FileUploader>;\n  setPaperRecordDocument: (value: Array<FileUploader>) => void;\n  onPaperRecordDocumentDelete: (index: number) => void;\n}\n\nexport const PatientRegistrationDocumentsForm: React.FC<Props> = ({\n  register,\n  paperRecord,\n  setPaperRecord,\n  documents,\n  setDocuments,\n  onDocumentDelete,\n  paperRecordDocument,\n  setPaperRecordDocument,\n  onPaperRecordDocumentDelete,\n}) => {\n  return (\n    <div className=\"md:grid md:grid-cols-3 md:gap-6\">\n      <div className=\"md:col-span-1\">\n        <div className=\"px-4 sm:px-0\">\n          <h3 className=\"text-lg font-medium leading-6 text-gray-900\">\n            Documents\n          </h3>\n        </div>\n      </div>\n      <div className=\"mt-5 md:mt-0 md:col-span-2\">\n        <div className=\"shadow overflow-hidden sm:rounded-md\">\n          <div className=\"px-4 py-5 bg-white sm:p-6\">\n            <div className=\"grid grid-cols-6 gap-6\">\n              <div className=\"col-span-6 sm:col-span-3\">\n                <label\n                  htmlFor=\"paperRecord\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Paper Record\n                </label>\n                <select\n                  required\n                  name=\"paperRecord\"\n                  value={paperRecord}\n                  onChange={(evt) =>\n                    setPaperRecord(evt.target.value === \"Yes\" ? \"Yes\" : \"No\")\n                  }\n                  className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                >\n                  <option value={\"Yes\"}>Yes</option>\n                  <option value={\"No\"}>No</option>\n                </select>\n              </div>\n              <div\n                className={classnames(\"col-span-6 sm:col-span-3\", {\n                  invisible: paperRecord === \"No\",\n                })}\n              >\n                <label\n                  htmlFor=\"cardNo\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Card Number\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"cardNo\"\n                  required={paperRecord === \"Yes\"}\n                  ref={register({ required: paperRecord === \"Yes\" })}\n                  className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n                />\n              </div>\n              <div\n                className=\"col-span-6 sm:col-span-3\"\n                hidden={paperRecord === \"No\"}\n              >\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  Paper document\n                </label>\n                <FileUploaderComponent\n                  multiSelect={false}\n                  values={paperRecordDocument}\n                  accept={\"document\"}\n                  onChange={setPaperRecordDocument}\n                  onDelete={onPaperRecordDocumentDelete}\n                />\n              </div>\n              <div className=\"col-span-6 sm:col-span-3\">\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  Other Documents\n                </label>\n                <FileUploaderComponent\n                  multiSelect={true}\n                  values={documents}\n                  onChange={setDocuments}\n                  onDelete={onDocumentDelete}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientRegistrationDemographicForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PatientRegistrationContactInfoForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChatList.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/stat_card/index.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/PreanestheticPage.tsx",["1210","1211"],"import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  FileUpload,\n  MutationDeletePreanestheticDocumentArgs,\n  MutationSaveSurgicalProcedureArgs,\n  MutationUpdateSurgeryFitnessArgs,\n  PatientChart,\n  SurgicalProcedureInput,\n} from \"../../models/models\";\nimport classnames from \"classnames\";\nimport IndexedDb from \"../../_db\";\nimport { formatDate } from \"../../util\";\nimport { format, parseISO } from \"date-fns\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport {\n  FileUploader,\n  FileUploaderComponent,\n} from \"../../components/FileUploaderComponent\";\nimport { AppointmentContext } from \"../../_context/AppointmentContext\";\n\nconst SAVE_SURGICAL_PROCEDURE = gql`\n  mutation SaveSurgicalProcedure($input: SurgicalProcedureInput!) {\n    saveSurgicalProcedure(input: $input) {\n      id\n    }\n  }\n`;\n\nconst UPDATE_SURGERY_FITNESS = gql`\n  mutation UpdateSurgeryFitness($id: ID!, $fit: Boolean!) {\n    updateSurgeryFitness(id: $id, fit: $fit) {\n      id\n    }\n  }\n`;\n\nconst DELETE_PREANESTHETIC_DOCUMENT = gql`\n  mutation DeletePreanestheticDocument(\n    $surgicalProcedureId: ID!\n    $fileId: ID!\n  ) {\n    deletePreanestheticDocument(\n      surgicalProcedureId: $surgicalProcedureId\n      fileId: $fileId\n    )\n  }\n`;\n\ninterface Props {\n  patientChart: PatientChart | undefined;\n}\n\nexport const PreanestheticPage: React.FC<Props> = ({ patientChart }) => {\n  const notifDispatch = useNotificationDispatch();\n\n  const { register, watch, reset } = useForm<SurgicalProcedureInput>();\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  const defaultPreanestheticDocuments: Array<FileUploader> =\n    patientChart?.surgicalProcedure.preanestheticDocuments.map((e: any) => ({\n      id: e?.id,\n      fileUrl: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/files/${e?.fileName}_${e?.hash}.${e?.extension}`,\n      name: e?.fileName ?? \"\",\n      size: e?.size,\n      createdAt: e?.createdAt,\n      contentType: e?.contentType ?? \"\",\n    })) ?? [];\n\n  const [preanestheticDocuments, setPreanestheticDocuments] = useState<\n    Array<FileUploader>\n  >(defaultPreanestheticDocuments);\n\n  const [saveSurgicalProcedure] = useMutation<\n    any,\n    MutationSaveSurgicalProcedureArgs\n  >(SAVE_SURGICAL_PROCEDURE, {\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [fitForSurgery, setFitForSurgery] = useState<boolean>(\n    patientChart?.surgicalProcedure.fitForSurgery ?? false\n  );\n\n  useEffect(() => {\n    if (patientChart?.surgicalProcedure.id) {\n      updateSurgeryFitness({\n        variables: {\n          id: patientChart?.surgicalProcedure.id,\n          fit: fitForSurgery,\n        },\n      });\n    }\n  }, [fitForSurgery]);\n\n  const [updateSurgeryFitness] = useMutation<\n    any,\n    MutationUpdateSurgeryFitnessArgs\n  >(UPDATE_SURGERY_FITNESS, {\n    onCompleted() {},\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [deletePreanestheticDocument] = useMutation<\n    any,\n    MutationDeletePreanestheticDocumentArgs\n  >(DELETE_PREANESTHETIC_DOCUMENT, {\n    onCompleted() {},\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    const surgicalProcedure = patientChart?.surgicalProcedure;\n    if (surgicalProcedure !== undefined) {\n      reset({\n        respiratory: surgicalProcedure.respiratory,\n        cardiovascular: surgicalProcedure.cardiovascular,\n        abdomen: surgicalProcedure.abdomen,\n        gus: surgicalProcedure.gus,\n        ismss: surgicalProcedure.ismss,\n        cns: surgicalProcedure.cns,\n        preanestheticAllergies: surgicalProcedure.preanestheticAllergies,\n        preanestheticAllergiesNote:\n          surgicalProcedure.preanestheticAllergiesNote,\n        physicalBloodPressure: surgicalProcedure.physicalBloodPressure,\n        physicalPr: surgicalProcedure.physicalPr,\n        physicalRr: surgicalProcedure.physicalRr,\n        physicalSaO2: surgicalProcedure.physicalSaO2,\n        physicalTemperature: surgicalProcedure.physicalTemperature,\n        physicalWeight: surgicalProcedure.physicalWeight,\n        physicalHeent: surgicalProcedure.physicalHeent,\n        physicalArtificalDenture: surgicalProcedure.physicalArtificalDenture,\n        physicalArtificalDentureNote:\n          surgicalProcedure.physicalArtificalDentureNote,\n        physicalLgs: surgicalProcedure.physicalLgs,\n        physicalChest: surgicalProcedure.physicalChest,\n        physicalCvs: surgicalProcedure.physicalCvs,\n        physicalAbdomen: surgicalProcedure.physicalAbdomen,\n        physicalGus: surgicalProcedure.physicalGus,\n        physicalIs: surgicalProcedure.physicalIs,\n        physicalMss: surgicalProcedure.physicalMss,\n        physicalCns: surgicalProcedure.physicalCns,\n        cbcActive: surgicalProcedure.cbcActive,\n        cbcResults: surgicalProcedure.cbcResults,\n        cbcDate: surgicalProcedure.cbcDate\n          ? format(parseISO(surgicalProcedure.cbcDate), \"yyyy-MM-dd\")\n          : undefined,\n        wbcActive: surgicalProcedure.wbcActive,\n        wbcResults: surgicalProcedure.wbcResults,\n        wbcDate: surgicalProcedure.wbcDate\n          ? format(parseISO(surgicalProcedure.wbcDate), \"yyyy-MM-dd\")\n          : undefined,\n        hgbhctActive: surgicalProcedure.hgbhctActive,\n        hgbhctResults: surgicalProcedure.hgbhctResults,\n        hgbhctDate: surgicalProcedure.hgbhctDate\n          ? format(parseISO(surgicalProcedure.hgbhctDate), \"yyyy-MM-dd\")\n          : undefined,\n        pltActive: surgicalProcedure.pltActive,\n        pltResults: surgicalProcedure.pltResults,\n        pltDate: surgicalProcedure.pltDate\n          ? format(parseISO(surgicalProcedure.pltDate), \"yyyy-MM-dd\")\n          : undefined,\n        coagulationPtActive: surgicalProcedure.coagulationPtActive,\n        coagulationPtResults: surgicalProcedure.coagulationPtResults,\n        coagulationPtDate: surgicalProcedure.coagulationPtDate\n          ? format(parseISO(surgicalProcedure.coagulationPtDate), \"yyyy-MM-dd\")\n          : undefined,\n        coagulationPttActive: surgicalProcedure.coagulationPttActive,\n        coagulationPttResults: surgicalProcedure.coagulationPttResults,\n        coagulationPttDate: surgicalProcedure.coagulationPttDate\n          ? format(parseISO(surgicalProcedure.coagulationPttDate), \"yyyy-MM-dd\")\n          : undefined,\n        coagulationInrActive: surgicalProcedure.coagulationInrActive,\n        coagulationInrResults: surgicalProcedure.coagulationInrResults,\n        coagulationInrDate: surgicalProcedure.coagulationInrDate\n          ? format(parseISO(surgicalProcedure.coagulationInrDate), \"yyyy-MM-dd\")\n          : undefined,\n        serumAlbuminActive: surgicalProcedure.serumAlbuminActive,\n        serumAlbuminResults: surgicalProcedure.serumAlbuminResults,\n        serumAlbuminDate: surgicalProcedure.serumAlbuminDate\n          ? format(parseISO(surgicalProcedure.serumAlbuminDate), \"yyyy-MM-dd\")\n          : undefined,\n        totalProteinActive: surgicalProcedure.totalProteinActive,\n        totalProteinResults: surgicalProcedure.totalProteinResults,\n        totalProteinDate: surgicalProcedure.totalProteinDate\n          ? format(parseISO(surgicalProcedure.totalProteinDate), \"yyyy-MM-dd\")\n          : undefined,\n        bilirubinTotalActive: surgicalProcedure.bilirubinTotalActive,\n        bilirubinTotalResults: surgicalProcedure.bilirubinTotalResults,\n        bilirubinTotalDate: surgicalProcedure.bilirubinTotalDate\n          ? format(parseISO(surgicalProcedure.bilirubinTotalDate), \"yyyy-MM-dd\")\n          : undefined,\n        bilirubinDirectActive: surgicalProcedure.bilirubinDirectActive,\n        bilirubinDirectResults: surgicalProcedure.bilirubinDirectResults,\n        bilirubinDirectDate: surgicalProcedure.bilirubinDirectDate\n          ? format(\n              parseISO(surgicalProcedure.bilirubinDirectDate),\n              \"yyyy-MM-dd\"\n            )\n          : undefined,\n        astsgotActive: surgicalProcedure.astsgotActive,\n        astsgotResults: surgicalProcedure.astsgotResults,\n        astsgotDate: surgicalProcedure.astsgotDate\n          ? format(parseISO(surgicalProcedure.astsgotDate), \"yyyy-MM-dd\")\n          : undefined,\n        altsgptActive: surgicalProcedure.altsgptActive,\n        altsgptResults: surgicalProcedure.altsgptResults,\n        altsgptDate: surgicalProcedure.altsgptDate\n          ? format(parseISO(surgicalProcedure.altsgptDate), \"yyyy-MM-dd\")\n          : undefined,\n        alpActive: surgicalProcedure.alpActive,\n        alpResults: surgicalProcedure.alpResults,\n        alpDate: surgicalProcedure.alpDate\n          ? format(parseISO(surgicalProcedure.alpDate), \"yyyy-MM-dd\")\n          : undefined,\n        renalCrActive: surgicalProcedure.renalCrActive,\n        renalCrResults: surgicalProcedure.renalCrResults,\n        renalCrDate: surgicalProcedure.renalCrDate\n          ? format(parseISO(surgicalProcedure.renalCrDate), \"yyyy-MM-dd\")\n          : undefined,\n        renalBunActive: surgicalProcedure.renalBunActive,\n        renalBunResults: surgicalProcedure.renalBunResults,\n        renalBunDate: surgicalProcedure.renalBunDate\n          ? format(parseISO(surgicalProcedure.renalBunDate), \"yyyy-MM-dd\")\n          : undefined,\n        thyroidFreeT3Active: surgicalProcedure.thyroidFreeT3Active,\n        thyroidFreeT3Results: surgicalProcedure.thyroidFreeT3Results,\n        thyroidFreeT3Date: surgicalProcedure.thyroidFreeT3Date\n          ? format(parseISO(surgicalProcedure.thyroidFreeT3Date), \"yyyy-MM-dd\")\n          : undefined,\n        thyroidTotalT4Active: surgicalProcedure.thyroidTotalT4Active,\n        thyroidTotalT4Results: surgicalProcedure.thyroidTotalT4Results,\n        thyroidTotalT4Date: surgicalProcedure.thyroidTotalT4Date\n          ? format(parseISO(surgicalProcedure.thyroidTotalT4Date), \"yyyy-MM-dd\")\n          : undefined,\n        thyroidTshActive: surgicalProcedure.thyroidTshActive,\n        thyroidTshResults: surgicalProcedure.thyroidTshResults,\n        thyroidTshDate: surgicalProcedure.thyroidTshDate\n          ? format(parseISO(surgicalProcedure.thyroidTshDate), \"yyyy-MM-dd\")\n          : undefined,\n        electrolytesNaPlusActive: surgicalProcedure.electrolytesNaPlusActive,\n        electrolytesNaPlusResults: surgicalProcedure.electrolytesNaPlusResults,\n        electrolytesNaPlusDate: surgicalProcedure.electrolytesNaPlusDate\n          ? format(\n              parseISO(surgicalProcedure.electrolytesNaPlusDate),\n              \"yyyy-MM-dd\"\n            )\n          : undefined,\n        electrolytesKPlusActive: surgicalProcedure.electrolytesKPlusActive,\n        electrolytesKPlusResults: surgicalProcedure.electrolytesKPlusResults,\n        electrolytesKPlusDate: surgicalProcedure.electrolytesKPlusDate\n          ? format(\n              parseISO(surgicalProcedure.electrolytesKPlusDate),\n              \"yyyy-MM-dd\"\n            )\n          : undefined,\n        electrolytesClMinusActive: surgicalProcedure.electrolytesClMinusActive,\n        electrolytesClMinusResults:\n          surgicalProcedure.electrolytesClMinusResults,\n        electrolytesClMinusDate: surgicalProcedure.electrolytesClMinusDate\n          ? format(\n              parseISO(surgicalProcedure.electrolytesClMinusDate),\n              \"yyyy-MM-dd\"\n            )\n          : undefined,\n        electrolytesCa2PlusActive: surgicalProcedure.electrolytesCa2PlusActive,\n        electrolytesCa2PlusResults:\n          surgicalProcedure.electrolytesCa2PlusResults,\n        electrolytesCa2PlusDate: surgicalProcedure.electrolytesCa2PlusDate\n          ? format(\n              parseISO(surgicalProcedure.electrolytesCa2PlusDate),\n              \"yyyy-MM-dd\"\n            )\n          : undefined,\n        electrolytesMg2PlusActive: surgicalProcedure.electrolytesMg2PlusActive,\n        electrolytesMg2PlusResults:\n          surgicalProcedure.electrolytesMg2PlusResults,\n        electrolytesMg2PlusDate: surgicalProcedure.electrolytesMg2PlusDate\n          ? format(\n              parseISO(surgicalProcedure.electrolytesMg2PlusDate),\n              \"yyyy-MM-dd\"\n            )\n          : undefined,\n        electrolytesPMinusActive: surgicalProcedure.electrolytesPMinusActive,\n        electrolytesPMinusResults: surgicalProcedure.electrolytesPMinusResults,\n        electrolytesPMinusDate: surgicalProcedure.electrolytesPMinusDate\n          ? format(\n              parseISO(surgicalProcedure.electrolytesPMinusDate),\n              \"yyyy-MM-dd\"\n            )\n          : undefined,\n        asa1: surgicalProcedure.asa1,\n        asa2: surgicalProcedure.asa2,\n        asa3: surgicalProcedure.asa3,\n        asa4: surgicalProcedure.asa4,\n        asa5: surgicalProcedure.asa5,\n        opv1: surgicalProcedure.opv1,\n        opv2: surgicalProcedure.opv2,\n        opv3: surgicalProcedure.opv3,\n        opv4: surgicalProcedure.opv4,\n        bleedingTendancy: surgicalProcedure.bleedingTendancy,\n        bleedingTendancyNote: surgicalProcedure.bleedingTendancyNote,\n        dm: surgicalProcedure.dm,\n        dmNote: surgicalProcedure.dmNote,\n        hypertension: surgicalProcedure.hypertension,\n        hypertensionNote: surgicalProcedure.hypertensionNote,\n        cardiac: surgicalProcedure.cardiac,\n        cardiacNote: surgicalProcedure.cardiacNote,\n        preanestheticAsthma: surgicalProcedure.preanestheticAsthma,\n        preanestheticAsthmaNote: surgicalProcedure.preanestheticAsthmaNote,\n        rvi: surgicalProcedure.rvi,\n        rviNote: surgicalProcedure.rviNote,\n        renal: surgicalProcedure.renal,\n        renalNote: surgicalProcedure.renalNote,\n        fitForSurgery: surgicalProcedure.fitForSurgery,\n        fitForSurgeryNote: surgicalProcedure.fitForSurgeryNote,\n      });\n    }\n  }, [patientChart?.surgicalProcedure]);\n\n  const data = watch();\n  useEffect(() => {\n    if (patientChart?.id) {\n      const runIndexDb = async () => {\n        const surgicalProcedure: any = {\n          ...data,\n          patientChartId: patientChart?.id.toString(),\n\n          cbcDate: data.cbcDate ? formatDate(data.cbcDate) : undefined,\n          wbcDate: data.wbcDate ? formatDate(data.wbcDate) : undefined,\n          hgbhctDate: data.hgbhctDate ? formatDate(data.hgbhctDate) : undefined,\n          pltDate: data.pltDate ? formatDate(data.pltDate) : undefined,\n          coagulationPtDate: data.coagulationPtDate\n            ? formatDate(data.coagulationPtDate)\n            : undefined,\n          coagulationPttDate: data.coagulationPttDate\n            ? formatDate(data.coagulationPttDate)\n            : undefined,\n          coagulationInrDate: data.coagulationInrDate\n            ? formatDate(data.coagulationInrDate)\n            : undefined,\n          serumAlbuminDate: data.serumAlbuminDate\n            ? formatDate(data.serumAlbuminDate)\n            : undefined,\n          totalProteinDate: data.totalProteinDate\n            ? formatDate(data.totalProteinDate)\n            : undefined,\n          bilirubinTotalDate: data.bilirubinTotalDate\n            ? formatDate(data.bilirubinTotalDate)\n            : undefined,\n          bilirubinDirectDate: data.bilirubinDirectDate\n            ? formatDate(data.bilirubinDirectDate)\n            : undefined,\n          astsgotDate: data.astsgotDate\n            ? formatDate(data.astsgotDate)\n            : undefined,\n          altsgptDate: data.altsgptDate\n            ? formatDate(data.altsgptDate)\n            : undefined,\n          alpDate: data.alpDate ? formatDate(data.alpDate) : undefined,\n          renalCrDate: data.renalCrDate\n            ? formatDate(data.renalCrDate)\n            : undefined,\n          renalBunDate: data.renalBunDate\n            ? formatDate(data.renalBunDate)\n            : undefined,\n          thyroidFreeT3Date: data.thyroidFreeT3Date\n            ? formatDate(data.thyroidFreeT3Date)\n            : undefined,\n          thyroidTotalT4Date: data.thyroidTotalT4Date\n            ? formatDate(data.thyroidTotalT4Date)\n            : undefined,\n          thyroidTshDate: data.thyroidTshDate\n            ? formatDate(data.thyroidTshDate)\n            : undefined,\n          electrolytesNaPlusDate: data.electrolytesNaPlusDate\n            ? formatDate(data.electrolytesNaPlusDate)\n            : undefined,\n          electrolytesKPlusDate: data.electrolytesKPlusDate\n            ? formatDate(data.electrolytesKPlusDate)\n            : undefined,\n          electrolytesClMinusDate: data.electrolytesClMinusDate\n            ? formatDate(data.electrolytesClMinusDate)\n            : undefined,\n          electrolytesCa2PlusDate: data.electrolytesCa2PlusDate\n            ? formatDate(data.electrolytesCa2PlusDate)\n            : undefined,\n          electrolytesMg2PlusDate: data.electrolytesMg2PlusDate\n            ? formatDate(data.electrolytesMg2PlusDate)\n            : undefined,\n          electrolytesPMinusDate: data.electrolytesPMinusDate\n            ? formatDate(data.electrolytesPMinusDate)\n            : undefined,\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(\n            surgicalProcedure,\n            \"surgical_procedure\",\n            patientChart.id\n          )\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChart?.id]);\n\n  const handlePreanestheticDocumentsChange = (change: Array<FileUploader>) => {\n    setPreanestheticDocuments(change);\n\n    const files: Array<FileUpload> = change\n      .filter((e) => e.fileObject !== undefined)\n      .map((e) => ({\n        file: e.fileObject,\n        name: e.name,\n      }));\n\n    if (patientChart?.id) {\n      saveSurgicalProcedure({\n        variables: {\n          input: {\n            patientChartId: patientChart?.id,\n            preanestheticDocuments: files,\n          },\n        },\n      });\n    }\n  };\n\n  const handlePreanestheticDocumentDelete = (index: number) => {\n    const file = preanestheticDocuments.find((_, i) => i === index);\n    setPreanestheticDocuments(\n      preanestheticDocuments.filter((_, i) => i !== index)\n    );\n\n    if (file?.id !== undefined && patientChart?.surgicalProcedure.id) {\n      deletePreanestheticDocument({\n        variables: {\n          surgicalProcedureId: patientChart?.surgicalProcedure.id,\n          fileId: file.id,\n        },\n      });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto bg-gray-50 rounded shadow-lg p-5\">\n      <div className=\"text-2xl text-gray-600 font-semibold\">{`${patientChart?.surgicalProcedure.surgicalProcedureType.title} Preanesthetic Evaluation`}</div>\n      <hr className=\"mt-5\" />\n\n      <div className=\"mt-5\">\n        <label className=\"block text-sm font-medium text-gray-700\">\n          Documents\n        </label>\n        <FileUploaderComponent\n          multiSelect={true}\n          values={preanestheticDocuments}\n          onChange={handlePreanestheticDocumentsChange}\n          onDelete={handlePreanestheticDocumentDelete}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">History</div>\n        <hr className=\"mt-2\" />\n\n        <div className=\"text-gray-600 grid grid-cols-3 gap-y-3 w-full mt-2\">\n          <div className=\"font-semibold col-span-1\">Resparatory</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"respiratory\"\n              ref={register}\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Cardiovascular</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"cardiovascular\"\n              ref={register}\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Abdomen</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"abdomen\"\n              ref={register}\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">GUS</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"gus\"\n              ref={register}\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">IS/MSS</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"ismss\"\n              ref={register}\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">CNS</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"cns\"\n              ref={register}\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Allergies</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"preanestheticAllergies\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Yes</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"preanestheticAllergiesNote\"\n              disabled={!data.preanestheticAllergies}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                {\n                  \"bg-gray-200 placeholder-gray-400\":\n                    !data.preanestheticAllergies,\n                }\n              )}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">\n          Chronic Illnesses\n        </div>\n        <hr className=\"mt-2\" />\n\n        <div className=\"text-gray-600 grid grid-cols-3 gap-y-3 w-full mt-2\">\n          <div className=\"font-semibold col-span-1\">Bleeding Tendency</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"bleedingTendancy\" ref={register} />\n              <span className=\"ml-2\">Yes</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"bleedingTendancyNote\"\n              disabled={!data.bleedingTendancy}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                {\n                  \"bg-gray-200 placeholder-gray-400\": !data.bleedingTendancy,\n                }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">DM</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"dm\" ref={register} />\n              <span className=\"ml-2\">Yes</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"dmNote\"\n              disabled={!data.dm}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                {\n                  \"bg-gray-200 placeholder-gray-400\": !data.dm,\n                }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Hypertension</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"hypertension\" ref={register} />\n              <span className=\"ml-2\">Yes</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"hypertensionNote\"\n              disabled={!data.hypertension}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                {\n                  \"bg-gray-200 placeholder-gray-400\": !data.hypertension,\n                }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Cardiac</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"cardiac\" ref={register} />\n              <span className=\"ml-2\">Yes</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"cardiacNote\"\n              disabled={!data.cardiac}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                {\n                  \"bg-gray-200 placeholder-gray-400\": !data.cardiac,\n                }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Asthma</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"preanestheticAsthma\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Yes</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"preanestheticAsthmaNote\"\n              disabled={!data.preanestheticAsthma}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                {\n                  \"bg-gray-200 placeholder-gray-400\": !data.preanestheticAsthma,\n                }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">RVI</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"rvi\" ref={register} />\n              <span className=\"ml-2\">Yes</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"rviNote\"\n              disabled={!data.rvi}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                {\n                  \"bg-gray-200 placeholder-gray-400\": !data.rvi,\n                }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Renal</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"renal\" ref={register} />\n              <span className=\"ml-2\">Yes</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"renalNote\"\n              disabled={!data.renal}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                {\n                  \"bg-gray-200 placeholder-gray-400\": !data.renal,\n                }\n              )}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-x-4\">\n        <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n          <div className=\"text-xl text-gray-600 font-semibold\">ASA</div>\n          <hr className=\"mt-2\" />\n\n          <div className=\"text-gray-600 grid grid-cols-3 gap-y-3 w-full mt-2\">\n            <div className=\"font-semibold col-span-1\">ASA I</div>\n            <div className=\"col-span-1\">\n              <label className=\"inline-flex items-center\">\n                <input type=\"checkbox\" name=\"asa1\" ref={register} />\n                <span className=\"ml-2\">Yes</span>\n              </label>\n            </div>\n            <div className=\"col-span-1\"></div>\n\n            <div className=\"font-semibold col-span-1\">ASA II</div>\n            <div className=\"col-span-1\">\n              <label className=\"inline-flex items-center\">\n                <input type=\"checkbox\" name=\"asa2\" ref={register} />\n                <span className=\"ml-2\">Yes</span>\n              </label>\n            </div>\n            <div className=\"col-span-1\"></div>\n\n            <div className=\"font-semibold col-span-1\">ASA III</div>\n            <div className=\"col-span-1\">\n              <label className=\"inline-flex items-center\">\n                <input type=\"checkbox\" name=\"asa3\" ref={register} />\n                <span className=\"ml-2\">Yes</span>\n              </label>\n            </div>\n            <div className=\"col-span-1\"></div>\n\n            <div className=\"font-semibold col-span-1\">ASA IV</div>\n            <div className=\"col-span-1\">\n              <label className=\"inline-flex items-center\">\n                <input type=\"checkbox\" name=\"asa4\" ref={register} />\n                <span className=\"ml-2\">Yes</span>\n              </label>\n            </div>\n            <div className=\"col-span-1\"></div>\n\n            <div className=\"font-semibold col-span-1\">ASA V</div>\n            <div className=\"col-span-1\">\n              <label className=\"inline-flex items-center\">\n                <input type=\"checkbox\" name=\"asa5\" ref={register} />\n                <span className=\"ml-2\">Yes</span>\n              </label>\n            </div>\n            <div className=\"col-span-1\"></div>\n          </div>\n        </div>\n\n        <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n          <div className=\"text-xl text-gray-600 font-semibold\">Mallapati</div>\n          <hr className=\"mt-2\" />\n\n          <div className=\"text-gray-600 grid grid-cols-3 gap-y-3 w-full mt-2\">\n            <div className=\"font-semibold col-span-1\">OPV I</div>\n            <div className=\"col-span-1\">\n              <label className=\"inline-flex items-center\">\n                <input type=\"checkbox\" name=\"opv1\" ref={register} />\n                <span className=\"ml-2\">Yes</span>\n              </label>\n            </div>\n            <div className=\"col-span-1\"></div>\n\n            <div className=\"font-semibold col-span-1\">OPV II</div>\n            <div className=\"col-span-1\">\n              <label className=\"inline-flex items-center\">\n                <input type=\"checkbox\" name=\"opv2\" ref={register} />\n                <span className=\"ml-2\">Yes</span>\n              </label>\n            </div>\n            <div className=\"col-span-1\"></div>\n\n            <div className=\"font-semibold col-span-1\">OPV III</div>\n            <div className=\"col-span-1\">\n              <label className=\"inline-flex items-center\">\n                <input type=\"checkbox\" name=\"opv3\" ref={register} />\n                <span className=\"ml-2\">Yes</span>\n              </label>\n            </div>\n            <div className=\"col-span-1\"></div>\n\n            <div className=\"font-semibold col-span-1\">OPV IV</div>\n            <div className=\"col-span-1\">\n              <label className=\"inline-flex items-center\">\n                <input type=\"checkbox\" name=\"opv4\" ref={register} />\n                <span className=\"ml-2\">Yes</span>\n              </label>\n            </div>\n            <div className=\"col-span-1\"></div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">\n          Physical Examination\n        </div>\n        <hr className=\"mt-2\" />\n\n        <div className=\"text-gray-600 grid grid-cols-3 gap-y-3 w-full mt-2\">\n          <div className=\"font-semibold col-span-1\">Blood Pressure</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalBloodPressure\"\n              placeholder=\"mmhg\"\n              ref={register}\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">PR</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalPr\"\n              placeholder=\"bpm\"\n              ref={register}\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">RR</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalRr\"\n              placeholder=\"RR\"\n              ref={register}\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <span>S</span>\n            <sub>a</sub>O<sub>2</sub>\n          </div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalSaO2\"\n              ref={register}\n              placeholder=\"%\"\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            T<sup>°</sup>\n          </div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalTemperature\"\n              ref={register}\n              placeholder=\"C°\"\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Weight</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalWeight\"\n              ref={register}\n              placeholder=\"Kg\"\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">HEENT</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalHeent\"\n              ref={register}\n              placeholder=\"HEENT\"\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Artifical Denture</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"physicalArtificalDenture\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Yes</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"physicalArtificalDentureNote\"\n              disabled={!data.physicalArtificalDenture}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                {\n                  \"bg-gray-200 placeholder-gray-400\":\n                    !data.physicalArtificalDenture,\n                }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">LGS</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalLgs\"\n              ref={register}\n              placeholder=\"LGS\"\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Chest</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalChest\"\n              ref={register}\n              placeholder=\"Chest\"\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">CVS</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalCvs\"\n              ref={register}\n              placeholder=\"CVS\"\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Abdomen</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalAbdomen\"\n              ref={register}\n              placeholder=\"Abdomen\"\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">GUS</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalGus\"\n              ref={register}\n              placeholder=\"GUS\"\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">IS</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalIs\"\n              ref={register}\n              placeholder=\"IS\"\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">MSS</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalMss\"\n              ref={register}\n              placeholder=\"MSS\"\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">CNS</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"physicalCns\"\n              ref={register}\n              placeholder=\"CNS\"\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">\n          Investigations Summary\n        </div>\n        <hr className=\"mt-2\" />\n\n        <div className=\"text-gray-600 grid grid-cols-3 gap-y-3 gap-x-5 w-full mt-2\">\n          <div className=\"col-span-1\"></div>\n          <div className=\"col-span-1 text-center\">Results</div>\n          <div className=\"col-span-1 text-center\">Date</div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"cbcActive\" ref={register} />\n              <span className=\"ml-2\">CBC</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"cbcResults\"\n              disabled={!data.cbcActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.cbcActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"cbcDate\"\n              disabled={!data.cbcActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.cbcActive }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" ref={register} name=\"wbcActive\" />\n              <span className=\"ml-2\">WBC</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"wbcResults\"\n              disabled={!data.wbcActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.wbcActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"wbcDate\"\n              disabled={!data.wbcActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.wbcActive }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"hgbhctActive\" ref={register} />\n              <span className=\"ml-2\">HGB/HCT</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"hgbhctResults\"\n              disabled={!data.hgbhctActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.hgbhctActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"hgbhctDate\"\n              disabled={!data.hgbhctActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.hgbhctActive }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"pltActive\" ref={register} />\n              <span className=\"ml-2\">PLT</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"pltResults\"\n              disabled={!data.pltActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.pltActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"pltDate\"\n              disabled={!data.pltActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.pltActive }\n              )}\n            />\n          </div>\n        </div>\n\n        <div className=\"text-gray-800 font-light text-sm mt-5\">\n          Liver Function Tests\n        </div>\n\n        <div className=\"text-gray-600 grid grid-cols-3 gap-y-3 gap-x-5 w-full mt-1\">\n          <div className=\"col-span-1 font-semibold\">Coagulation Profile</div>\n          <div className=\"col-span-1 text-center\"></div>\n          <div className=\"col-span-1 text-center\"></div>\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center ml-5\">\n              <input\n                type=\"checkbox\"\n                name=\"coagulationPtActive\"\n                ref={register}\n              />\n              <span className=\"ml-2\">PT</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"coagulationPtResults\"\n              disabled={!data.coagulationPtActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.coagulationPtActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"coagulationPtDate\"\n              disabled={!data.coagulationPtActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.coagulationPtActive }\n              )}\n            />\n          </div>\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center ml-5\">\n              <input\n                type=\"checkbox\"\n                name=\"coagulationPttActive\"\n                ref={register}\n              />\n              <span className=\"ml-2\">PTT</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"coagulationPttResults\"\n              disabled={!data.coagulationPttActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.coagulationPttActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"coagulationPttDate\"\n              disabled={!data.coagulationPttActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.coagulationPttActive }\n              )}\n            />\n          </div>\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center ml-5\">\n              <input\n                type=\"checkbox\"\n                name=\"coagulationInrActive\"\n                ref={register}\n              />\n              <span className=\"ml-2\">INR</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"coagulationInrResults\"\n              disabled={!data.coagulationInrActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.coagulationInrActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"coagulationInrDate\"\n              disabled={!data.coagulationInrActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.coagulationInrActive }\n              )}\n            />\n          </div>\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"serumAlbuminActive\" ref={register} />\n              <span className=\"ml-2\">Serum Albumin</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"serumAlbuminResults\"\n              disabled={!data.serumAlbuminActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.serumAlbuminActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"serumAlbuminDate\"\n              disabled={!data.serumAlbuminActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.serumAlbuminActive }\n              )}\n            />\n          </div>\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"totalProteinActive\" ref={register} />\n              <span className=\"ml-2\">Total Protein</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"totalProteinResults\"\n              disabled={!data.totalProteinActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.totalProteinActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"totalProteinDate\"\n              disabled={!data.totalProteinActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.totalProteinActive }\n              )}\n            />\n          </div>\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"bilirubinTotalActive\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Bilirubin (Total)</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"bilirubinTotalResults\"\n              disabled={!data.bilirubinTotalActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.bilirubinTotalActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"bilirubinTotalDate\"\n              disabled={!data.bilirubinTotalActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.bilirubinTotalActive }\n              )}\n            />\n          </div>\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"bilirubinDirectActive\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Bilirubin (Direct)</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"bilirubinDirectResults\"\n              disabled={!data.bilirubinDirectActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.bilirubinDirectActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"bilirubinDirectDate\"\n              disabled={!data.bilirubinDirectActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.bilirubinDirectActive }\n              )}\n            />\n          </div>\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"astsgotActive\" ref={register} />\n              <span className=\"ml-2\">AST/SGOT</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"astsgotResults\"\n              disabled={!data.astsgotActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.astsgotActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"astsgotDate\"\n              disabled={!data.astsgotActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.astsgotActive }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"altsgptActive\" ref={register} />\n              <span className=\"ml-2\">ALT/SGPT</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"altsgptResults\"\n              disabled={!data.altsgptActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.altsgptActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"altsgptDate\"\n              disabled={!data.altsgptActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.altsgptActive }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"alpActive\" ref={register} />\n              <span className=\"ml-2\">ALP</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"alpResults\"\n              disabled={!data.alpActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.alpActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"alpDate\"\n              disabled={!data.alpActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.alpActive }\n              )}\n            />\n          </div>\n        </div>\n\n        <div className=\"text-gray-800 font-light text-sm mt-5\">\n          Renal Function Tests\n        </div>\n\n        <div className=\"text-gray-600 grid grid-cols-3 gap-y-3 gap-x-5 w-full mt-1\">\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"renalCrActive\" ref={register} />\n              <span className=\"ml-2\">Cr</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"renalCrResults\"\n              disabled={!data.renalCrActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.renalCrActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"renalCrDate\"\n              disabled={!data.renalCrActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.renalCrActive }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"renalBunActive\" ref={register} />\n              <span className=\"ml-2\">BUN</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"renalBunResults\"\n              disabled={!data.renalBunActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.renalBunActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"renalBunDate\"\n              disabled={!data.renalBunActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.renalBunActive }\n              )}\n            />\n          </div>\n        </div>\n\n        <div className=\"text-gray-800 font-light text-sm mt-5\">\n          Thyroid Function Tests\n        </div>\n\n        <div className=\"text-gray-600 grid grid-cols-3 gap-y-3 gap-x-5 w-full mt-1\">\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"thyroidFreeT3Active\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Free T3</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"thyroidFreeT3Results\"\n              disabled={!data.thyroidFreeT3Active}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.thyroidFreeT3Active }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"thyroidFreeT3Date\"\n              disabled={!data.thyroidFreeT3Active}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.thyroidFreeT3Active }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"thyroidTotalT4Active\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Total T4</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"thyroidTotalT4Results\"\n              disabled={!data.thyroidTotalT4Active}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.thyroidTotalT4Active }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"thyroidTotalT4Date\"\n              disabled={!data.thyroidTotalT4Active}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.thyroidTotalT4Active }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input type=\"checkbox\" name=\"thyroidTshActive\" ref={register} />\n              <span className=\"ml-2\">TSH</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"thyroidTshResults\"\n              disabled={!data.thyroidTshActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.thyroidTshActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"thyroidTshDate\"\n              disabled={!data.thyroidTshActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.thyroidTshActive }\n              )}\n            />\n          </div>\n        </div>\n\n        <div className=\"text-gray-800 font-light text-sm mt-5\">\n          Electrolytes\n        </div>\n\n        <div className=\"text-gray-600 grid grid-cols-3 gap-y-3 gap-x-5 w-full mt-1\">\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"electrolytesNaPlusActive\"\n                ref={register}\n              />\n              <span className=\"ml-2\">\n                Na<sup>+</sup>\n              </span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"electrolytesNaPlusResults\"\n              disabled={!data.electrolytesNaPlusActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.electrolytesNaPlusActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"electrolytesNaPlusDate\"\n              disabled={!data.electrolytesNaPlusActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.electrolytesNaPlusActive }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"electrolytesKPlusActive\"\n                ref={register}\n              />\n              <span className=\"ml-2\">\n                K<sup>+</sup>\n              </span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"electrolytesKPlusResults\"\n              disabled={!data.electrolytesKPlusActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.electrolytesKPlusActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"electrolytesKPlusDate\"\n              disabled={!data.electrolytesKPlusActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.electrolytesKPlusActive }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"electrolytesClMinusActive\"\n                ref={register}\n              />\n              <span className=\"ml-2\">\n                CL<sup>-</sup>\n              </span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"electrolytesClMinusResults\"\n              disabled={!data.electrolytesClMinusActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.electrolytesClMinusActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"electrolytesClMinusDate\"\n              disabled={!data.electrolytesClMinusActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.electrolytesClMinusActive }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"electrolytesCa2PlusActive\"\n                ref={register}\n              />\n              <span className=\"ml-2\">\n                Ca<sup>2+</sup>\n              </span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"electrolytesCa2PlusResults\"\n              disabled={!data.electrolytesCa2PlusActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.electrolytesCa2PlusActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"electrolytesCa2PlusDate\"\n              disabled={!data.electrolytesCa2PlusActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.electrolytesCa2PlusActive }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"electrolytesMg2PlusActive\"\n                ref={register}\n              />\n              <span className=\"ml-2\">\n                Mg<sup>2+</sup>\n              </span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"electrolytesMg2PlusResults\"\n              disabled={!data.electrolytesMg2PlusActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.electrolytesMg2PlusActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"electrolytesMg2PlusDate\"\n              disabled={!data.electrolytesMg2PlusActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.electrolytesMg2PlusActive }\n              )}\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"electrolytesPMinusActive\"\n                ref={register}\n              />\n              <span className=\"ml-2\">\n                P<sup>-</sup>\n              </span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"text\"\n              name=\"electrolytesPMinusResults\"\n              disabled={!data.electrolytesPMinusActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.electrolytesPMinusActive }\n              )}\n            />\n          </div>\n          <div className=\"col-span-1\">\n            <input\n              type=\"date\"\n              name=\"electrolytesPMinusDate\"\n              disabled={!data.electrolytesPMinusActive}\n              ref={register}\n              className={classnames(\n                \"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\",\n                { \"bg-gray-200\": !data.electrolytesPMinusActive }\n              )}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">Fitness</div>\n        <hr className=\"mt-2\" />\n\n        <div className=\"mt-2\">\n          <label className=\"inline-flex items-center\">\n            <input\n              type=\"radio\"\n              name=\"fitForSurgery\"\n              checked={fitForSurgery}\n              onChange={(evt) => setFitForSurgery(true)}\n            />\n            <span className=\"ml-2\">Fit</span>\n          </label>\n          <label className=\"inline-flex items-center ml-5\">\n            <input\n              type=\"radio\"\n              name=\"fitForSurgery\"\n              checked={!fitForSurgery}\n              onChange={(evt) => setFitForSurgery(false)}\n            />\n            <span className=\"ml-2\">Unfit</span>\n          </label>\n        </div>\n\n        <div className=\"mt-4 text-gray-600\">\n          <textarea\n            name=\"fitForSurgeryNote\"\n            rows={4}\n            ref={register}\n            className=\"mt-1 p-1 pl-4 block w-full sm:text-md border border-gray-300 rounded-md\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/FollowUpPage.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/MedicationSideInfo.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/VisionSideInfo.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChatListItem.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ProgressNoteComponent.tsx",["1212"],"import { gql, useQuery } from \"@apollo/client\";\nimport { format, parseISO } from \"date-fns\";\nimport React from \"react\";\nimport { HistoryPage } from \"../pages/Appointment/HistoryPage\";\nimport { MedicationTable } from \"../components/MedicationTable\";\nimport {\n  Appointment,\n  Query,\n  QueryGetProgressNotesArgs,\n  QuerySearchMedicalPrescriptionsArgs,\n} from \"../models/models\";\n\nexport const MEDICATION_PRESCRIPTIONS = gql`\n  query SearchMedicalPrescriptions(\n    $page: PaginationInput!\n    $filter: MedicalPrescriptionFilter\n  ) {\n    searchMedicalPrescriptions(page: $page, filter: $filter) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          medication\n          sig\n          refill\n          generic\n          substitutionAllowed\n          directionToPatient\n          prescribedDate\n          history\n          status\n        }\n      }\n    }\n  }\n`;\n\nconst PROGRESS_NOTES = gql`\n  query ProgressNotes($id: ID!) {\n    getProgressNotes(id: $id) {\n      appointments {\n        id\n        providerName\n        checkInTime\n        patient {\n          id\n          firstName\n          lastName\n        }\n        visitType {\n          id\n          title\n        }\n        patientChart {\n          id\n          summaryNote\n          locked\n          diagnoses {\n            id\n            title\n            differential\n            location\n          }\n          visualAcuity {\n            id\n            rightDistanceUncorrected\n            leftDistanceUncorrected\n            rightDistancePinhole\n            leftDistancePinhole\n            rightDistanceCorrected\n            leftDistanceCorrected\n            rightNearUncorrected\n            leftNearUncorrected\n            rightNearPinhole\n            leftNearPinhole\n            rightNearCorrected\n            leftNearCorrected\n          }\n          iop {\n            id\n            rightApplanation\n            leftApplanation\n            rightTonopen\n            leftTonopen\n            rightDigital\n            leftDigital\n            rightNoncontact\n            leftNoncontact\n          }\n          medicalPrescriptionOrder {\n            id\n            medicalPrescriptions {\n              id\n              medication\n              sig\n              refill\n              generic\n              substitutionAllowed\n              directionToPatient\n              prescribedDate\n              history\n              status\n            }\n          }\n          labOrder {\n            id\n            labs {\n              id\n              labTypeTitle\n            }\n          }\n          diagnosticProcedureOrder {\n            id\n            diagnosticProcedures {\n              id\n              diagnosticProcedureTypeTitle\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const ProgressNoteComponent: React.FC<{\n  appointment: Appointment;\n  onAppointmentClick: (appointment: Appointment) => void;\n}> = ({ appointment, onAppointmentClick }) => {\n  const medicationPrescriptionsQuery = useQuery<\n    Query,\n    QuerySearchMedicalPrescriptionsArgs\n  >(MEDICATION_PRESCRIPTIONS, {\n    variables: {\n      page: { page: 0, size: 20 },\n      filter: { patientId: appointment?.patient.id, status: \"Active\" },\n    },\n  });\n\n  const progressNotesQuery = useQuery<Query, QueryGetProgressNotesArgs>(\n    PROGRESS_NOTES,\n    {\n      variables: {\n        id: appointment.patient.id,\n      },\n    }\n  );\n\n  return (\n    <div>\n      <HistoryPage\n        isEdit={false}\n        appointment={appointment}\n        onSaveChange={() => {}}\n      />\n\n      <div className=\"mt-3\">\n        <p className=\"text-xl text-gray-600 font-semibold\">\n          Active medications\n        </p>\n\n        <hr className=\"mt-4\" />\n\n        {medicationPrescriptionsQuery.data?.searchMedicalPrescriptions &&\n        medicationPrescriptionsQuery.data?.searchMedicalPrescriptions.edges\n          .length > 0 ? (\n          <MedicationTable\n            readOnly\n            items={medicationPrescriptionsQuery.data?.searchMedicalPrescriptions.edges.map(\n              (e) => e?.node\n            )}\n            onPrint={() => {}}\n          />\n        ) : (\n          <div className=\"text-center text-gray-500 mt-5\">Nothing here yet</div>\n        )}\n      </div>\n\n      <div>\n        {progressNotesQuery.data?.getProgressNotes.appointments.map(\n          (e) =>\n            e && (\n              <div key={e?.id} className=\"mt-8\">\n                <ProgressAppointmentComponent\n                  appointment={e}\n                  onAppointmentClick={onAppointmentClick}\n                />\n              </div>\n            )\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst ProgressAppointmentComponent: React.FC<{\n  appointment: Appointment;\n  onAppointmentClick: (appointment: Appointment) => void;\n}> = ({ appointment, onAppointmentClick }) => {\n  const hasVisionDistance =\n    appointment.patientChart.visualAcuity.rightDistanceUncorrected ||\n    appointment.patientChart.visualAcuity.leftDistanceUncorrected ||\n    appointment.patientChart.visualAcuity.rightDistancePinhole ||\n    appointment.patientChart.visualAcuity.leftDistancePinhole ||\n    appointment.patientChart.visualAcuity.rightDistanceCorrected ||\n    appointment.patientChart.visualAcuity.leftDistanceCorrected;\n\n  const hasVisionNear =\n    appointment.patientChart.visualAcuity.rightNearUncorrected ||\n    appointment.patientChart.visualAcuity.leftNearUncorrected ||\n    appointment.patientChart.visualAcuity.rightNearPinhole ||\n    appointment.patientChart.visualAcuity.leftNearPinhole ||\n    appointment.patientChart.visualAcuity.rightNearCorrected ||\n    appointment.patientChart.visualAcuity.leftNearCorrected;\n\n  const hasIopApplanation =\n    appointment.patientChart.iop.rightApplanation ||\n    appointment.patientChart.iop.leftApplanation;\n\n  const hasIopTonopen =\n    appointment.patientChart.iop.rightTonopen ||\n    appointment.patientChart.iop.leftTonopen;\n\n  const hasIopDigital =\n    appointment.patientChart.iop.rightDigital ||\n    appointment.patientChart.iop.leftDigital;\n\n  const hasIopNoncontact =\n    appointment.patientChart.iop.rightNoncontact ||\n    appointment.patientChart.iop.leftNoncontact;\n\n  const hasLabOrders =\n    (appointment.patientChart.labOrder?.labs.length ?? 0) > 0;\n  const hasDiagnosticOrders =\n    (appointment.patientChart.diagnosticProcedureOrder?.diagnosticProcedures\n      .length ?? 0) > 0;\n\n  const handleAppointmentClick = (\n    evt: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n  ) => {\n    evt.preventDefault();\n    onAppointmentClick(appointment);\n  };\n\n  return (\n    <div>\n      <div className=\"flex items-center space-x-2\">\n        <a\n          href=\"#\"\n          onClick={handleAppointmentClick}\n          className=\"text-xl text-teal-600 underline cursor-pointer font-semibold\"\n        >\n          {`${format(parseISO(appointment.checkInTime), \"MMM d, y\")} | ${\n            appointment.visitType.title\n          } | Dr. ${appointment.providerName}`}\n        </a>\n        {appointment.patientChart.locked && (\n          <span className=\"material-icons text-gray-600\">locked</span>\n        )}\n      </div>\n\n      <hr className=\"mt-4 mb-4\" />\n\n      {(hasVisionDistance || hasVisionNear) && (\n        <div className=\"text-sm mt-2\">\n          <p className=\"text-base font-semibold\">Visual Acuity</p>\n\n          <div className=\"mt-1 pl-3\">\n            {hasVisionDistance && (\n              <div>\n                <p className=\"\">Distance</p>\n                <ul className=\"list-inside list-disc pl-3\">\n                  {appointment.patientChart.visualAcuity\n                    .rightDistanceUncorrected && (\n                    <li>{`Uncorrected (OD): ${appointment.patientChart.visualAcuity.rightDistanceUncorrected}`}</li>\n                  )}\n\n                  {appointment.patientChart.visualAcuity\n                    .leftDistanceUncorrected && (\n                    <li>{`Uncorrected (OS): ${appointment.patientChart.visualAcuity.leftDistanceUncorrected}`}</li>\n                  )}\n\n                  {appointment.patientChart.visualAcuity\n                    .rightDistanceCorrected && (\n                    <li>{`Corrected (OD): ${appointment.patientChart.visualAcuity.rightDistanceCorrected}`}</li>\n                  )}\n\n                  {appointment.patientChart.visualAcuity\n                    .leftDistanceCorrected && (\n                    <li>{`Corrected (OS): ${appointment.patientChart.visualAcuity.leftDistanceCorrected}`}</li>\n                  )}\n\n                  {appointment.patientChart.visualAcuity\n                    .rightDistancePinhole && (\n                    <li>{`Pinhole (OD): ${appointment.patientChart.visualAcuity.rightDistancePinhole}`}</li>\n                  )}\n\n                  {appointment.patientChart.visualAcuity\n                    .leftDistancePinhole && (\n                    <li>{`Pinhole (OS): ${appointment.patientChart.visualAcuity.leftDistancePinhole}`}</li>\n                  )}\n                </ul>\n              </div>\n            )}\n\n            {hasVisionNear && (\n              <div>\n                <p className=\"\">Near</p>\n                <ul className=\"list-inside list-disc pl-3\">\n                  {appointment.patientChart.visualAcuity\n                    .rightNearUncorrected && (\n                    <li>{`Uncorrected (OD): ${appointment.patientChart.visualAcuity.rightNearUncorrected}`}</li>\n                  )}\n\n                  {appointment.patientChart.visualAcuity\n                    .leftNearUncorrected && (\n                    <li>{`Uncorrected (OS): ${appointment.patientChart.visualAcuity.leftNearUncorrected}`}</li>\n                  )}\n\n                  {appointment.patientChart.visualAcuity.rightNearCorrected && (\n                    <li>{`Corrected (OD): ${appointment.patientChart.visualAcuity.rightNearCorrected}`}</li>\n                  )}\n\n                  {appointment.patientChart.visualAcuity.leftNearCorrected && (\n                    <li>{`Corrected (OS): ${appointment.patientChart.visualAcuity.leftNearCorrected}`}</li>\n                  )}\n\n                  {appointment.patientChart.visualAcuity.rightNearPinhole && (\n                    <li>{`Pinhole (OD): ${appointment.patientChart.visualAcuity.rightNearPinhole}`}</li>\n                  )}\n\n                  {appointment.patientChart.visualAcuity.leftNearPinhole && (\n                    <li>{`Pinhole (OS): ${appointment.patientChart.visualAcuity.leftNearPinhole}`}</li>\n                  )}\n                </ul>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {(hasIopApplanation ||\n        hasIopTonopen ||\n        hasIopDigital ||\n        hasIopNoncontact) && (\n        <div className=\"text-sm mt-2\">\n          <p className=\"text-base font-semibold\">IOP</p>\n\n          {hasIopApplanation && (\n            <div className=\"mt-1 pl-3\">\n              <p className=\"\">Applanation</p>\n              <ul className=\"list-inside list-disc pl-3\">\n                {appointment.patientChart.iop.rightApplanation && (\n                  <li>{`OD: ${appointment.patientChart.iop.rightApplanation}`}</li>\n                )}\n\n                {appointment.patientChart.iop.leftApplanation && (\n                  <li>{`OS: ${appointment.patientChart.iop.leftApplanation}`}</li>\n                )}\n              </ul>\n            </div>\n          )}\n\n          {hasIopTonopen && (\n            <div className=\"mt-1 pl-3\">\n              <p className=\"\">Tonopen</p>\n              <ul className=\"list-inside list-disc pl-3\">\n                {appointment.patientChart.iop.rightTonopen && (\n                  <li>{`OD: ${appointment.patientChart.iop.rightTonopen}`}</li>\n                )}\n\n                {appointment.patientChart.iop.leftTonopen && (\n                  <li>{`OS: ${appointment.patientChart.iop.leftTonopen}`}</li>\n                )}\n              </ul>\n            </div>\n          )}\n\n          {hasIopDigital && (\n            <div className=\"mt-1 pl-3\">\n              <p className=\"\">Digital</p>\n              <ul className=\"list-inside list-disc pl-3\">\n                {appointment.patientChart.iop.rightDigital && (\n                  <li>{`OD: ${appointment.patientChart.iop.rightDigital}`}</li>\n                )}\n\n                {appointment.patientChart.iop.leftDigital && (\n                  <li>{`OS: ${appointment.patientChart.iop.leftDigital}`}</li>\n                )}\n              </ul>\n            </div>\n          )}\n\n          {hasIopNoncontact && (\n            <div className=\"mt-1 pl-3\">\n              <p className=\"\">Non-Contact</p>\n              <ul className=\"list-inside list-disc pl-3\">\n                {appointment.patientChart.iop.rightNoncontact && (\n                  <li>{`OD: ${appointment.patientChart.iop.rightNoncontact}`}</li>\n                )}\n\n                {appointment.patientChart.iop.leftNoncontact && (\n                  <li>{`OS: ${appointment.patientChart.iop.leftNoncontact}`}</li>\n                )}\n              </ul>\n            </div>\n          )}\n        </div>\n      )}\n\n      {appointment.patientChart.diagnoses.filter(\n        (e) => e?.differential === false\n      ).length > 0 && (\n        <div className=\"text-sm mt-2\">\n          <p className=\"text-base font-semibold\">Diagnosis</p>\n          <div className=\"mt-1 pl-3\">\n            <ul className=\"list-inside list-disc pl-3\">\n              {appointment.patientChart.diagnoses\n                .filter((e) => e?.differential === false)\n                .map((e) => (\n                  <li key={e?.id}>{`${e?.title}, ${e?.location}`}</li>\n                ))}\n            </ul>\n          </div>\n        </div>\n      )}\n\n      {(hasDiagnosticOrders || hasLabOrders) && (\n        <div className=\"text-sm mt-2\">\n          <p className=\"text-base font-semibold\">Plan</p>\n          <div className=\"mt-1 pl-3\">\n            <ul className=\"list-inside list-disc pl-3\">\n              {hasDiagnosticOrders && (\n                <li>{`Diagnostic procedures ordered: ${appointment.patientChart.diagnosticProcedureOrder?.diagnosticProcedures\n                  .map((e) => e.diagnosticProcedureTypeTitle)\n                  .join(\", \")}`}</li>\n              )}\n\n              {hasLabOrders && (\n                <li>{`Labs ordered: ${appointment.patientChart.labOrder?.labs\n                  .map((e) => e.labTypeTitle)\n                  .join(\", \")}`}</li>\n              )}\n            </ul>\n          </div>\n        </div>\n      )}\n\n      {(appointment.patientChart.medicalPrescriptionOrder?.medicalPrescriptions\n        .length ?? 0) > 0 && (\n        <div className=\"text-sm mt-2\">\n          <p className=\"text-base font-semibold\">Prescriptions</p>\n          <div className=\"mt-1 pl-3\">\n            <ul className=\"list-inside list-disc pl-3\">\n              {appointment.patientChart.medicalPrescriptionOrder?.medicalPrescriptions.map(\n                (e) => (\n                  <li key={e?.id}>{`${e?.medication}, ${e?.sig}`}</li>\n                )\n              )}\n            </ul>\n          </div>\n        </div>\n      )}\n\n      <div className=\"text-sm mt-4\">{appointment.patientChart.summaryNote}</div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/TreatmentObjectivePage.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChatBubble.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/SummaryPage.tsx",["1213"],"import React, { useState, useRef, useEffect } from \"react\";\nimport { Page } from \"react-pdf\";\nimport { Document } from \"react-pdf/dist/esm/entry.webpack\";\nimport { useParams } from \"react-router-dom\";\nimport { SizeMe } from \"react-sizeme\";\nimport circleImage from \"../../img/circle.png\";\n// @ts-ignore\nimport { SketchField, Tools } from \"react-sketch\";\nimport { useForm } from \"react-hook-form\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useNotificationDispatch } from \"../../notification\";\n\nimport classnames from \"classnames\";\nimport {\n  Appointment,\n  PatientChartUpdateInput,\n  MutationUpdatePatientChartArgs,\n  Query,\n  QueryAmendmentsArgs,\n} from \"../../models/models\";\nimport { AppointmentContext } from \"../../_context/AppointmentContext\";\nimport IndexedDb from \"../../_db\";\nimport { format, parseISO } from \"date-fns\";\nimport { useBottomSheetDispatch } from \"../../bottomsheet\";\nimport { AddAmendmentForm } from \"../../components/AddAmendmentForm\";\n\nconst UPDATE_PATIENT_CHART = gql`\n  mutation UpdatePatientChart($input: PatientChartUpdateInput!) {\n    updatePatientChart(input: $input) {\n      id\n      rightSummarySketch\n      leftSummarySketch\n    }\n  }\n`;\n\nconst GET_AMENDMENTS = gql`\n  query GetAmendments($filter: AmendmentFilter) {\n    amendments(filter: $filter) {\n      id\n      note\n      createdAt\n    }\n  }\n`;\n\nexport const SummaryPage: React.FC<{\n  appointment: Appointment | undefined;\n  onSaveChange: (saving: boolean) => void;\n}> = ({ appointment, onSaveChange }) => {\n  const bottomSheetDispatch = useBottomSheetDispatch();\n\n  const { appointmentId } = useParams<{ appointmentId: string }>();\n\n  const { data, refetch } = useQuery<Query, QueryAmendmentsArgs>(\n    GET_AMENDMENTS,\n    {\n      variables: {\n        filter: {\n          patientChartId: appointment?.patientChart.id,\n        },\n      },\n    }\n  );\n\n  const notifDispatch = useNotificationDispatch();\n\n  const [timer, setTimer] = useState<any>(null);\n\n  const [selectedColor] = useState(\"#000000\");\n  const [selectedLineWeight] = useState(3);\n\n  const rightSummarySketch = useRef<any>(null);\n  const leftSummarySketch = useRef<any>(null);\n\n  const [selectedDocument, setSelectedDocument] = useState<\n    \"summary\" | \"medical\"\n  >(\"summary\");\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  const { register, getValues, setValue, watch } =\n    useForm<PatientChartUpdateInput>();\n\n  useEffect(() => {\n    if (appointment !== undefined) {\n      setValue(\"id\", appointment.patientChart.id);\n      setValue(\"summaryNote\", appointment.patientChart.summaryNote);\n      setValue(\"leftSummarySketch\", appointment.patientChart.leftSummarySketch);\n      setValue(\n        \"rightSummarySketch\",\n        appointment.patientChart.rightSummarySketch\n      );\n    }\n  }, [appointment]);\n\n  const [updatePatientChart] = useMutation<any, MutationUpdatePatientChartArgs>(\n    UPDATE_PATIENT_CHART,\n    {\n      onCompleted() {\n        onSaveChange(false);\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onSave = (data: PatientChartUpdateInput) => {\n    onSaveChange(true);\n    updatePatientChart({ variables: { input: data } });\n  };\n\n  const patientChartForm = watch();\n\n  useEffect(() => {\n    if (appointment?.patientChart.id) {\n      const runIndexDb = async () => {\n        const patientChart: any = {\n          ...patientChartForm,\n          patientChartId: appointment?.patientChart.id.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(\n            patientChart,\n            \"patient_chart\",\n            appointment?.patientChart.id\n          )\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [patientChartForm, appointment?.patientChart.id]);\n\n  const handleSketchChange = () => {\n    if (patientChartLocked[0]) {\n      return;\n    }\n\n    clearTimeout(timer);\n\n    setTimer(\n      setTimeout(() => {\n        if (appointment?.patientChart.id) {\n          const currentValues = getValues();\n          currentValues.id = appointment.patientChart.id;\n\n          if (rightSummarySketch.current !== null) {\n            currentValues.rightSummarySketch = JSON.stringify(\n              rightSummarySketch.current.toJSON()\n            );\n          }\n\n          if (leftSummarySketch.current !== null) {\n            currentValues.leftSummarySketch = JSON.stringify(\n              leftSummarySketch.current.toJSON()\n            );\n          }\n\n          onSave(currentValues);\n        }\n      }, 2000)\n    );\n  };\n\n  const handleSelectedDocumentChange = (value: \"summary\" | \"medical\") => {\n    if (selectedDocument === \"summary\" && value !== \"summary\") {\n      setSelectedDocument(\"medical\");\n    } else {\n      setSelectedDocument(\"summary\");\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      {patientChartLocked[0] && (\n        <div className=\"mt-2 bg-yellow-50 border-4 border-yellow-400\">\n          <div className=\"bg-yellow-400 p-1\">\n            <div className=\"flex text-sm items-center space-x-2\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                />\n              </svg>\n              <span>This patient chart has been locked</span>\n            </div>\n          </div>\n          <div className=\"p-4\">\n            <p>You may add amendments</p>\n          </div>\n        </div>\n      )}\n      {patientChartLocked[0] && (\n        <div className=\"bg-white px-5 py-5 shadow-md rounded-sm mt-5\">\n          <div className=\"flex justify-between items-center\">\n            <p className=\"text-2xl tracking-wider text-gray-800 font-light\">\n              Amendments\n            </p>\n            <button\n              className=\"border border-teal-800 text-teal-800 px-3 py-1 rounded-lg flex space-x-1 items-center\"\n              onClick={() => {\n                bottomSheetDispatch({\n                  type: \"show\",\n                  snapPoint: 0,\n                  children: (\n                    <AddAmendmentForm\n                      patientChartId={appointment?.patientChart.id}\n                      onSuccess={() => {\n                        refetch();\n                        notifDispatch({\n                          type: \"show\",\n                          notifTitle: \"Success\",\n                          notifSubTitle: \"Amendement added\",\n                          variant: \"success\",\n                        });\n                        bottomSheetDispatch({ type: \"hide\" });\n                      }}\n                      onCancel={() => bottomSheetDispatch({ type: \"hide\" })}\n                    />\n                  ),\n                });\n              }}\n            >\n              <div className=\"material-icons\">add</div>\n              <p>Add Amendment</p>\n            </button>\n          </div>\n\n          {data?.amendments.length === 0 && (\n            <div className=\"bg-gray-100 mt-5 h-32 flex rounded-sm shadow-inner\">\n              <div className=\"m-auto flex space-x-1 text-gray-500\">\n                <div className=\"material-icons\">inbox</div>\n                <p className=\"text-center\">Nothing here yet</p>\n              </div>\n            </div>\n          )}\n\n          {(data?.amendments.length ?? 0) > 0 && (\n            <div className=\"mt-4\">\n              <table className=\"table-auto divide-y divide-gray-200 mt-4 w-full shadow-lg rounded-lg\">\n                <thead className=\"bg-teal-700\">\n                  <tr>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                    >\n                      Note\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n                    >\n                      Date\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {data?.amendments.map((e) => (\n                    <tr key={e?.id}>\n                      <td className=\"px-6 py-4 text-sm text-gray-900\">\n                        {e?.note}\n                      </td>\n                      <td className=\"px-6 py-4 text-sm text-gray-900\">\n                        {format(parseISO(e?.createdAt), \"MMM d, y\")}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      )}\n      <div className=\"bg-white px-5 py-5 shadow-md rounded-sm mt-4\">\n        <p className=\"text-2xl tracking-wider text-gray-800 font-light\">\n          Summary\n        </p>\n        <div className=\"mt-2\">\n          <div className=\"grid grid-cols-2 justify-items-center mt-10\">\n            <div className=\"col-span-1\">OD</div>\n            <div className=\"col-span-1\">OS</div>\n            <div className=\"col-span-1\">\n              <div className=\"relative\">\n                <div className=\"static top-0 left-0\">\n                  <img\n                    className=\"w-60 h-52\"\n                    src={circleImage}\n                    alt=\"Right Retina\"\n                  />\n                </div>\n                <div className=\"absolute top-0 left-0\">\n                  <SketchField\n                    ref={rightSummarySketch}\n                    tool={Tools.Pencil}\n                    width=\"15rem\"\n                    height=\"13rem\"\n                    lineColor={selectedColor}\n                    lineWidth={selectedLineWeight}\n                    value={appointment?.patientChart.rightSummarySketch}\n                    onChange={handleSketchChange}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-1\">\n              <div className=\"relative\">\n                <div className=\"static top-0 left-0\">\n                  <img\n                    className=\"w-60 h-52\"\n                    src={circleImage}\n                    alt=\"Right Retina\"\n                  />\n                </div>\n                <div className=\"absolute top-0 left-0\">\n                  <SketchField\n                    ref={leftSummarySketch}\n                    tool={Tools.Pencil}\n                    width=\"15rem\"\n                    height=\"13rem\"\n                    lineColor={selectedColor}\n                    lineWidth={selectedLineWeight}\n                    value={appointment?.patientChart.leftSummarySketch}\n                    onChange={handleSketchChange}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-1\">\n              <button\n                className=\"text-gray-500 text-sm\"\n                onClick={() => {\n                  setValue(\"rightSummarySketch\", \"\");\n                  rightSummarySketch.current.clear();\n                }}\n                disabled={patientChartLocked[0]}\n              >\n                Clear\n              </button>\n            </div>\n            <div className=\"col-span-1\">\n              <button\n                className=\"text-gray-500 text-sm\"\n                disabled={patientChartLocked[0]}\n                onClick={() => {\n                  setValue(\"leftSummarySketch\", \"\");\n                  leftSummarySketch.current.clear();\n                }}\n              >\n                Clear\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"mt-2\">\n          <p className=\"text-xl tracking-wider text-gray-800 font-light\">\n            Note\n          </p>\n          <textarea\n            rows={10}\n            ref={register}\n            name=\"summaryNote\"\n            className=\"mt-3 p-4 block w-full sm:text-md bg-gray-50 border border-gray-200 rounded-md\"\n            disabled={patientChartLocked[0]}\n          />\n        </div>\n      </div>\n      <div className=\"w-full bg-white rounded-sm p-4 shadow-md mt-3\">\n        <div className=\"flex justify-between\">\n          <div className=\"flex space-x-4 items-center\">\n            <div className=\"flex-initial\">\n              <button\n                className={classnames(\n                  \"text-sm tracking-wide subpixel-antialiased px-2 py-2 rounded-lg flex items-center space-x-2\",\n                  {\n                    \"text-white bg-teal-800 shadow-lg\":\n                      selectedDocument === \"summary\",\n                    \"text-teal-800 bg-white hover:bg-teal-700 hover:text-white\":\n                      selectedDocument === \"medical\",\n                  }\n                )}\n                onClick={() => handleSelectedDocumentChange(\"summary\")}\n              >\n                <span className=\"material-icons\">description</span>\n                <div>Summary Report</div>\n              </button>\n            </div>\n            <div className=\"flex-initial\">\n              <button\n                className={classnames(\n                  \"text-sm tracking-wide subpixel-antialiased px-2 py-2 rounded-lg flex items-center space-x-2\",\n                  {\n                    \"text-white bg-teal-800 shadow-lg\":\n                      selectedDocument === \"medical\",\n                    \"text-teal-800 bg-white hover:bg-teal-700 hover:text-white\":\n                      selectedDocument === \"summary\",\n                  }\n                )}\n                onClick={() => handleSelectedDocumentChange(\"medical\")}\n              >\n                <span className=\"material-icons\">card_membership</span>\n                <div>Medical Certificate</div>\n              </button>\n            </div>\n          </div>\n          <div>\n            <button\n              onClick={() => {\n                if (selectedDocument === \"summary\") {\n                  window.open(\n                    `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/pdf_appointment_summary?appointmentId=${appointmentId}`\n                  );\n                } else {\n                  window.open(\n                    `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/pdf_medical_certificate?appointmentId=${appointmentId}`\n                  );\n                }\n              }}\n              className=\"text-sm tracking-wide text-teal-800 hover:bg-teal-700 hover:text-white subpixel-antialiased px-2 py-2 rounded-lg flex items-center space-x-2\"\n            >\n              <span className=\"material-icons\">print</span>\n              <div>Print</div>\n            </button>\n          </div>\n        </div>\n      </div>\n      {selectedDocument === \"summary\" && (\n        <SummaryReport appointmentId={appointmentId} />\n      )}\n\n      {selectedDocument === \"medical\" && appointment?.patientChart.id && (\n        <MedicalCertificate\n          appointmentId={appointmentId}\n          patientChartId={appointment?.patientChart.id}\n          medicalRecommendation={appointment.patientChart.medicalRecommendation}\n          sickLeave={appointment.patientChart.sickLeave}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction SummaryReport({ appointmentId }: { appointmentId: string }) {\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [isDocumentFocused, setIsDocumentFocused] = useState(false);\n\n  const onDocumentLoadSuccess = (pdf: any) => {\n    setNumPages(pdf.numPages);\n  };\n\n  return (\n    <SizeMe>\n      {({ size }) => (\n        <div className=\"flex-1 flex items-center justify-center mt-3\">\n          <div className=\"relative\">\n            <div\n              onMouseEnter={() => setIsDocumentFocused(true)}\n              onMouseLeave={() => setIsDocumentFocused(false)}\n            >\n              <Document\n                className=\"shadow-lg\"\n                file={`${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/pdf_appointment_summary?appointmentId=${appointmentId}`}\n                onLoadSuccess={onDocumentLoadSuccess}\n              >\n                <Page width={size.width ?? 950} pageNumber={pageNumber} />\n              </Document>\n            </div>\n            <div\n              hidden={!isDocumentFocused}\n              className=\"absolute bottom-10 inset-x-0\"\n              onMouseEnter={() => setIsDocumentFocused(true)}\n              onMouseLeave={() => setIsDocumentFocused(false)}\n            >\n              <div className=\"flex justify-between\">\n                <div></div>\n                <div>\n                  <div className=\"bg-white px-3 py-3 shadow-2xl rounded-md\">\n                    <div className=\"flex items-center space-x-5\">\n                      <button\n                        type=\"button\"\n                        disabled={pageNumber === 1}\n                        onClick={() => setPageNumber(pageNumber - 1)}\n                      >\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"w-4 text-gray-500\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </button>\n                      <p className=\"italic\">\n                        {pageNumber} of {numPages}\n                      </p>\n                      <button\n                        type=\"button\"\n                        disabled={pageNumber === numPages}\n                        onClick={() => setPageNumber(pageNumber + 1)}\n                      >\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                          className=\"w-4 text-gray-500\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                <div></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </SizeMe>\n  );\n}\n\nfunction MedicalCertificate({\n  appointmentId,\n  patientChartId,\n  medicalRecommendation,\n  sickLeave,\n}: {\n  appointmentId: string;\n  patientChartId: string;\n  medicalRecommendation: string | undefined | null;\n  sickLeave: string | undefined | null;\n}) {\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [isDocumentFocused, setIsDocumentFocused] = useState(false);\n  const { register, getValues } = useForm<PatientChartUpdateInput>({\n    defaultValues: {\n      medicalRecommendation,\n      sickLeave,\n    },\n  });\n\n  const notifDispatch = useNotificationDispatch();\n  const [file] = useState<string>(\n    `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/pdf_medical_certificate?appointmentId=${appointmentId}`\n  );\n\n  const [updatePatientChart] = useMutation<any, MutationUpdatePatientChartArgs>(\n    UPDATE_PATIENT_CHART,\n    {\n      onCompleted() {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Medical certificate updated successfully\",\n          variant: \"success\",\n        });\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const onDocumentLoadSuccess = (pdf: any) => {\n    setNumPages(pdf.numPages);\n  };\n\n  const handleUpdateClick = () => {\n    const values = getValues();\n\n    updatePatientChart({\n      variables: {\n        input: {\n          id: patientChartId,\n          medicalRecommendation: values.medicalRecommendation,\n          sickLeave: values.sickLeave,\n        },\n      },\n    });\n  };\n\n  return (\n    <div className=\"mt-3\">\n      <div>\n        <div className=\"flex space-x-3 bg-white p-3\">\n          <div className=\"flex-1\">\n            <label\n              htmlFor=\"medicalRecommendation\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Recommendation\n            </label>\n            <textarea\n              rows={2}\n              placeholder=\"Recommendation\"\n              name=\"medicalRecommendation\"\n              ref={register}\n              className=\"p-1 mt-1 pl-4 block w-full sm:text-md bg-gray-50 border rounded-md\"\n            />\n          </div>\n          <div className=\"flex-1\">\n            <label\n              htmlFor=\"sickLeave\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Sick Leave\n            </label>\n            <textarea\n              rows={2}\n              placeholder=\"Sick leave\"\n              name=\"sickLeave\"\n              ref={register}\n              className=\"p-1 mt-1 pl-4 block w-full sm:text-md bg-gray-50 border rounded-md\"\n            />\n          </div>\n        </div>\n        <div>\n          <button\n            type=\"button\"\n            className=\"inline-flex justify-center w-full py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-b-md  text-white bg-gray-600 hover:bg-gray-700 focus:outline-none\"\n            onClick={handleUpdateClick}\n          >\n            <span className=\"ml-2\">Update</span>\n          </button>\n        </div>\n      </div>\n      <SizeMe>\n        {({ size }) => (\n          <div className=\"flex-1 flex items-center justify-center mt-3\">\n            <div className=\"relative\">\n              <div\n                onMouseEnter={() => setIsDocumentFocused(true)}\n                onMouseLeave={() => setIsDocumentFocused(false)}\n              >\n                <Document\n                  className=\"shadow-lg\"\n                  file={file}\n                  onLoadSuccess={onDocumentLoadSuccess}\n                >\n                  <Page width={size.width ?? 950} pageNumber={pageNumber} />\n                </Document>\n              </div>\n              <div\n                hidden={!isDocumentFocused}\n                className=\"absolute bottom-10 inset-x-0\"\n                onMouseEnter={() => setIsDocumentFocused(true)}\n                onMouseLeave={() => setIsDocumentFocused(false)}\n              >\n                <div className=\"flex justify-between\">\n                  <div></div>\n                  <div>\n                    <div className=\"bg-white px-3 py-3 shadow-2xl rounded-md\">\n                      <div className=\"flex items-center space-x-5\">\n                        <button\n                          type=\"button\"\n                          disabled={pageNumber === 1}\n                          onClick={() => setPageNumber(pageNumber - 1)}\n                        >\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"currentColor\"\n                            className=\"w-4 text-gray-500\"\n                          >\n                            <path\n                              fillRule=\"evenodd\"\n                              d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\"\n                              clipRule=\"evenodd\"\n                            />\n                          </svg>\n                        </button>\n                        <p className=\"italic\">\n                          {pageNumber} of {numPages}\n                        </p>\n                        <button\n                          type=\"button\"\n                          disabled={pageNumber === numPages}\n                          onClick={() => setPageNumber(pageNumber + 1)}\n                        >\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"currentColor\"\n                            className=\"w-4 text-gray-500\"\n                          >\n                            <path\n                              fillRule=\"evenodd\"\n                              d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\"\n                              clipRule=\"evenodd\"\n                            />\n                          </svg>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                  <div></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </SizeMe>\n    </div>\n  );\n}\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/IntraOpPage.tsx",["1214"],"import React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { PatientChart, SurgicalProcedureInput } from \"../../models/models\";\nimport { AppointmentContext } from \"../../_context/AppointmentContext\";\nimport IndexedDb from \"../../_db\";\n\ninterface Props {\n  patientChart: PatientChart | undefined;\n}\n\nexport const IntraOpPage: React.FC<Props> = ({ patientChart }) => {\n  const { register, watch, reset } = useForm<SurgicalProcedureInput>({});\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    const surgicalProcedure = patientChart?.surgicalProcedure;\n    if (surgicalProcedure !== undefined) {\n      reset({\n        assistantName: surgicalProcedure.assistantName,\n        performOnEye: surgicalProcedure.performOnEye,\n        la: surgicalProcedure.la,\n        ga: surgicalProcedure.ga,\n        retrobulbar: surgicalProcedure.retrobulbar,\n        peribulbar: surgicalProcedure.peribulbar,\n        topical: surgicalProcedure.topical,\n        conjFlapLimbal: surgicalProcedure.conjFlapLimbal,\n        conjFlapFornix: surgicalProcedure.conjFlapFornix,\n        sectionLimbal: surgicalProcedure.sectionLimbal,\n        sectionCorneral: surgicalProcedure.sectionCorneral,\n        sectionScleralTunnel: surgicalProcedure.sectionScleralTunnel,\n        capsulotomyLinear: surgicalProcedure.capsulotomyLinear,\n        capsulotomyCanOpener: surgicalProcedure.capsulotomyCanOpener,\n        capsulotomyCcc: surgicalProcedure.capsulotomyCcc,\n        iolPlacementBag: surgicalProcedure.iolPlacementBag,\n        iolSulcus: surgicalProcedure.iolSulcus,\n        iolBagSulcus: surgicalProcedure.iolBagSulcus,\n        irodectpmyNone: surgicalProcedure.irodectpmyNone,\n        irodectpmyPl: surgicalProcedure.irodectpmyPl,\n        irodectpmySl: surgicalProcedure.irodectpmySl,\n        sphincterectomy: surgicalProcedure.sphincterectomy,\n        lensExtractionIcce: surgicalProcedure.lensExtractionIcce,\n        lensExtractionEcce: surgicalProcedure.lensExtractionEcce,\n        lensExtractionPhaco: surgicalProcedure.lensExtractionPhaco,\n        sutureNone: surgicalProcedure.sutureNone,\n        sutureContinuous: surgicalProcedure.sutureContinuous,\n        sutureInterrupted: surgicalProcedure.sutureInterrupted,\n        drapes: surgicalProcedure.drapes,\n        ringer: surgicalProcedure.ringer,\n        bss: surgicalProcedure.bss,\n        air: surgicalProcedure.air,\n        hpmc: surgicalProcedure.hpmc,\n        healon: surgicalProcedure.healon,\n        pilo: surgicalProcedure.pilo,\n        adrenalin: surgicalProcedure.adrenalin,\n        antibiotic: surgicalProcedure.antibiotic,\n        steroid: surgicalProcedure.steroid,\n        suture80: surgicalProcedure.suture80,\n        suture90: surgicalProcedure.suture90,\n        suture100: surgicalProcedure.suture100,\n        irrigatingSolution: surgicalProcedure.irrigatingSolution,\n        visco: surgicalProcedure.visco,\n        interacameral: surgicalProcedure.interacameral,\n        subconj: surgicalProcedure.subconj,\n        suture: surgicalProcedure.suture,\n        silk: surgicalProcedure.silk,\n        nylon: surgicalProcedure.nylon,\n        pcTear: surgicalProcedure.pcTear,\n        vitreousLoss: surgicalProcedure.vitreousLoss,\n        descematesStrip: surgicalProcedure.descematesStrip,\n        endothelialDamage: surgicalProcedure.endothelialDamage,\n        nucluesDrop: surgicalProcedure.nucluesDrop,\n        iridoDialysis: surgicalProcedure.iridoDialysis,\n        irisDamage: surgicalProcedure.irisDamage,\n        retainedCortex: surgicalProcedure.retainedCortex,\n        hyphema: surgicalProcedure.hyphema,\n        complicationsOthers: surgicalProcedure.complicationsOthers,\n        complicationsNote: surgicalProcedure.complicationsNote,\n        vitrectomy: surgicalProcedure.vitrectomy,\n        typeOfIolAc: surgicalProcedure.typeOfIolAc,\n        typeOfIolPc: surgicalProcedure.typeOfIolPc,\n        typeOfIol: surgicalProcedure.typeOfIol,\n        iolModel: surgicalProcedure.iolModel,\n        company: surgicalProcedure.company,\n        aclol: surgicalProcedure.aclol,\n        aclolPlanned: surgicalProcedure.aclolPlanned,\n        aclolUnplanned: surgicalProcedure.aclolUnplanned,\n        unplanned: surgicalProcedure.unplanned,\n        additionalNotes: surgicalProcedure.additionalNotes,\n        specialInstructions: surgicalProcedure.specialInstructions,\n        treatment: surgicalProcedure.treatment,\n      });\n    }\n  }, [patientChart?.surgicalProcedure]);\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChart?.id) {\n      const runIndexDb = async () => {\n        const surgicalProcedure: any = {\n          ...data,\n          patientChartId: patientChart?.id.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(\n            surgicalProcedure,\n            \"surgical_procedure\",\n            patientChart.id\n          )\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChart?.id]);\n\n  return (\n    <div className=\"container mx-auto bg-gray-50 rounded shadow-lg p-5\">\n      <div className=\"text-2xl text-gray-600 font-semibold\">{`${patientChart?.surgicalProcedure.surgicalProcedureType.title} Intra-op`}</div>\n\n      <hr className=\"mt-5\" />\n\n      <div className=\"mt-4\">\n        <label\n          htmlFor=\"assistantName\"\n          className=\"block text-sm font-medium text-gray-700\"\n        >\n          Assistant Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"assistantName\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"mt-1 p-1 pl-4 block w-full sm:text-md border-gray-300 border rounded-md\"\n        />\n      </div>\n\n      <div className=\"mt-4\">\n        <label\n          htmlFor=\"performOnEye\"\n          className=\"block text-sm font-medium text-gray-700\"\n        >\n          Operated eye\n        </label>\n        <select\n          id=\"performOnEye\"\n          name=\"performOnEye\"\n          ref={register}\n          disabled\n          className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n        >\n          <option value={\"OU\"}>OU</option>\n          <option value={\"OD\"}>OD</option>\n          <option value={\"OS\"}>OS</option>\n        </select>\n      </div>\n\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">\n          Anesthesia Details\n        </div>\n\n        <hr className=\"mt-2\" />\n\n        <div className=\"text-gray-600\">\n          <div className=\"mt-2\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"la\"\n                ref={register}\n              />\n              <span className=\"ml-2\">LA</span>\n            </label>\n            <label className=\"inline-flex items-center ml-4\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"ga\"\n                ref={register}\n              />\n              <span className=\"ml-2\">GA</span>\n            </label>\n          </div>\n\n          <div className=\"mt-4\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"retrobulbar\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Retrobulbar</span>\n            </label>\n            <label className=\"inline-flex items-center ml-4\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"peribulbar\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Peribulbar</span>\n            </label>\n            <label className=\"inline-flex items-center ml-4\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"topical\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Topical</span>\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">\n          Surgery Details\n        </div>\n\n        <hr className=\"mt-2\" />\n\n        <div className=\"text-gray-600 grid grid-cols-5 gap-y-2 w-4/5 mt-2\">\n          <div className=\"font-semibold col-span-1\">Conj flap</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"conjFlapLimbal\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Limbal</span>\n            </label>\n          </div>\n          <div className=\"col-span-3\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"conjFlapFornix\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Fornix</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Section</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"sectionLimbal\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Limbal</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"sectionCorneral\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Corneral</span>\n            </label>\n          </div>\n          <div className=\"col-span-2\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"sectionScleralTunnel\"\n                ref={register}\n                disabled={patientChartLocked[0]}\n              />\n              <span className=\"ml-2\">Scleral tunnel</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Capsulotomy</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"capsulotomyLinear\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Linear</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"capsulotomyCanOpener\"\n                ref={register}\n                disabled={patientChartLocked[0]}\n              />\n              <span className=\"ml-2\">Can opener</span>\n            </label>\n          </div>\n          <div className=\"col-span-2\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"capsulotomyCcc\"\n                ref={register}\n              />\n              <span className=\"ml-2\">CCC</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">IOL Placement</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"iolPlacementBag\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Bag</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"iolSulcus\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Sulcus</span>\n            </label>\n          </div>\n          <div className=\"col-span-2\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"iolBagSulcus\"\n                ref={register}\n              />\n              <span className=\"ml-2\">bag-sulcus</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Irodectpmy</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"irodectpmyNone\"\n                ref={register}\n              />\n              <span className=\"ml-2\">None</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"irodectpmyPl\"\n                ref={register}\n              />\n              <span className=\"ml-2\">pl</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"irodectpmySl\"\n                ref={register}\n              />\n              <span className=\"ml-2\">sl</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"sphincterectomy\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Sphincterectomy</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Lens Extraction</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"lensExtractionIcce\"\n                ref={register}\n              />\n              <span className=\"ml-2\">ICCE</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"lensExtractionEcce\"\n                ref={register}\n              />\n              <span className=\"ml-2\">ECCE</span>\n            </label>\n          </div>\n          <div className=\"col-span-2\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"lensExtractionPhaco\"\n                ref={register}\n                disabled={patientChartLocked[0]}\n              />\n              <span className=\"ml-2\">phaco</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Suture</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"sutureNone\"\n                ref={register}\n              />\n              <span className=\"ml-2\">None</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"sutureContinuous\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Continuous</span>\n            </label>\n          </div>\n          <div className=\"col-span-2\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"sutureInterrupted\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Interrupted</span>\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">Supplies used</div>\n\n        <hr className=\"mt-2\" />\n\n        <div className=\"text-gray-600 grid grid-cols-4 gap-y-2 w-4/5 mt-2\">\n          <div className=\"col-span-4\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"drapes\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Drapes</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Irrigation solution</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"ringer\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Ringer</span>\n            </label>\n          </div>\n          <div className=\"col-span-2\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"bss\"\n                ref={register}\n              />\n              <span className=\"ml-2\">BSS</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Visco</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"air\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Air</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"hpmc\"\n                ref={register}\n              />\n              <span className=\"ml-2\">HPMC</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"healon\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Healon</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Intracameral</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"pilo\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Pilo</span>\n            </label>\n          </div>\n          <div className=\"col-span-2\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"adrenalin\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Adrenalin</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Subconj</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"antibiotic\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Antibiotic</span>\n            </label>\n          </div>\n          <div className=\"col-span-2\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"steroid\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Steroid</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Suture</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"suture80\"\n                ref={register}\n              />\n              <span className=\"ml-2\">8-0</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"suture90\"\n                ref={register}\n              />\n              <span className=\"ml-2\">9-0</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"suture100\"\n                ref={register}\n              />\n              <span className=\"ml-2\">10-0</span>\n            </label>\n          </div>\n\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"silk\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Silk</span>\n            </label>\n          </div>\n          <div className=\"col-span-3\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"nylon\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Nylon</span>\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">\n          Intra-operative Complications\n        </div>\n\n        <hr className=\"mt-2\" />\n\n        <div className=\"text-gray-600 grid grid-cols-2 gap-y-2 w-1/2 mt-2\">\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"pcTear\"\n                ref={register}\n              />\n              <span className=\"ml-2\">PC Tear</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"iridoDialysis\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Iridio-dialysis</span>\n            </label>\n          </div>\n\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"vitreousLoss\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Vitreous Loss</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"irisDamage\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Iris damage</span>\n            </label>\n          </div>\n\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"descematesStrip\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Descemete's strip</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"retainedCortex\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Retained cortex</span>\n            </label>\n          </div>\n\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"endothelialDamage\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Endothelial damage</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"hyphema\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Hyphema</span>\n            </label>\n          </div>\n\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"nucluesDrop\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Nuclues drop</span>\n            </label>\n          </div>\n\n          <div className=\"col-span-2\">\n            <textarea\n              name=\"complicationsOthers\"\n              placeholder=\"Others\"\n              rows={4}\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"mt-1 p-1 pl-4 block w-full sm:text-md  border border-gray-300 rounded-md\"\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">Vitrectomy</div>\n\n        <hr className=\"mt-2\" />\n\n        <div className=\"mt-4\">\n          <select\n            id=\"vitrectomy\"\n            name=\"vitrectomy\"\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n          >\n            <option value={\"\"}></option>\n            <option value={\"Automated\"}>Automated</option>\n            <option value={\"Wick\"}>Wick</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">IOP</div>\n\n        <hr className=\"mt-2\" />\n\n        <div className=\"text-gray-600 grid grid-cols-3 gap-y-2 w-4/5 mt-2\">\n          <div className=\"font-semibold col-span-1\">Type of IOL</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"typeOfIolAc\"\n                ref={register}\n              />\n              <span className=\"ml-2\">AC</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"typeOfIolPc\"\n                ref={register}\n              />\n              <span className=\"ml-2\">PC</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">ACLOL</div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"aclolPlanned\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Planned</span>\n            </label>\n          </div>\n          <div className=\"col-span-1\">\n            <label className=\"inline-flex items-center\">\n              <input\n                type=\"checkbox\"\n                disabled={patientChartLocked[0]}\n                name=\"aclolUnplanned\"\n                ref={register}\n              />\n              <span className=\"ml-2\">Unplanned</span>\n            </label>\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Model</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"iolModel\"\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n\n          <div className=\"font-semibold col-span-1\">Company</div>\n          <div className=\"col-span-2\">\n            <input\n              type=\"text\"\n              name=\"company\"\n              ref={register}\n              disabled={patientChartLocked[0]}\n              className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">\n          Additional Surgical Notes\n        </div>\n\n        <hr className=\"mt-2\" />\n\n        <div className=\"mt-2 text-gray-600\">\n          <textarea\n            name=\"additionalNotes\"\n            rows={4}\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"mt-1 p-1 pl-4 block w-full sm:text-md border border-gray-300 rounded-md\"\n          />\n        </div>\n      </div>\n\n      <div className=\"mt-4 shadow-md bg-white rounded-md p-4\">\n        <div className=\"text-xl text-gray-600 font-semibold\">\n          Special Instructions\n        </div>\n\n        <hr className=\"mt-2\" />\n\n        <div className=\"mt-2 text-gray-600\">\n          <textarea\n            name=\"specialInstructions\"\n            rows={4}\n            ref={register}\n            disabled={patientChartLocked[0]}\n            className=\"mt-1 p-1 pl-4 block w-full sm:text-md border border-gray-300 rounded-md\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/SurgeryPage.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ChatAvatar.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/PrescriptionPage.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/DifferentialDiagnosis.tsx",["1215","1216","1217","1218","1219"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport { AUTO_SAVE_INTERVAL } from \"../..\";\nimport { DiagnosisList } from \"../../components/DiagnosisList\";\nimport {\n  MutationDeletePatientDiagnosisArgs,\n  MutationSavePatientDiagnosisArgs,\n  MutationUpdatePatientChartArgs,\n  PatientChart,\n  PatientChartUpdateInput,\n  Query,\n  QueryPatientDiagnosesArgs,\n} from \"../../models/models\";\nimport { AppointmentContext } from \"../../_context/AppointmentContext\";\nimport IndexedDb from \"../../_db\";\n\nconst PATIENT_DIAGNOSES = gql`\n  query PatientDiagnoses(\n    $page: PaginationInput!\n    $filter: PatientDiagnosisFilter\n  ) {\n    patientDiagnoses(page: $page, filter: $filter) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          title\n          location\n        }\n      }\n    }\n  }\n`;\n\nconst SAVE_PATIENT_DIAGNOSIS = gql`\n  mutation SavePatientDiagnosis($input: PatientDiagnosisInput!) {\n    savePatientDiagnosis(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_PATIENT_DIAGNOSIS = gql`\n  mutation DeletePatientDiagnosis($id: ID!) {\n    deletePatientDiagnosis(id: $id)\n  }\n`;\n\nconst UPDATE_PATIENT_CHART = gql`\n  mutation UpdatePatientChart($input: PatientChartUpdateInput!) {\n    updatePatientChart(input: $input) {\n      id\n    }\n  }\n`;\n\nexport const DifferentialDiagnosis: React.FC<{\n  patientChart: PatientChart | undefined;\n  onSaveChange: (saving: boolean) => void;\n}> = ({ patientChart, onSaveChange }) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, watch, setValue } = useForm<PatientChartUpdateInput>({\n    defaultValues: {\n      id: patientChart?.id,\n      differentialDiagnosisNote: patientChart?.differentialDiagnosisNote,\n    },\n  });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    if (patientChart?.differentialDiagnosisNote) {\n      setValue(\n        \"differentialDiagnosisNote\",\n        patientChart.differentialDiagnosisNote\n      );\n    }\n  }, [patientChart?.differentialDiagnosisNote]);\n\n  const [timer, setTimer] = useState<any>(null);\n\n  const patientDiagnosisQuery = useQuery<Query, QueryPatientDiagnosesArgs>(\n    PATIENT_DIAGNOSES,\n    {\n      variables: {\n        page: { page: 0, size: 100 },\n        filter: {\n          patientChartId: patientChart?.id,\n          differential: true,\n        },\n      },\n    }\n  );\n\n  const [savePatientDiagnosis] = useMutation<\n    any,\n    MutationSavePatientDiagnosisArgs\n  >(SAVE_PATIENT_DIAGNOSIS, {\n    onCompleted(data) {\n      onSaveChange(false);\n\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Success\",\n        notifSubTitle: \"Differential diagnosis saved successfully\",\n        variant: \"success\",\n      });\n\n      patientDiagnosisQuery.refetch();\n    },\n    onError(error) {\n      onSaveChange(false);\n\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [updatePatientChart] = useMutation<any, MutationUpdatePatientChartArgs>(\n    UPDATE_PATIENT_CHART,\n    {\n      onCompleted() {\n        onSaveChange(false);\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deletePatientDiagnosis] = useMutation<\n    any,\n    MutationDeletePatientDiagnosisArgs\n  >(DELETE_PATIENT_DIAGNOSIS, {\n    onCompleted(data) {\n      onSaveChange(false);\n\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Success\",\n        notifSubTitle: \"Differential Diagnosis deleted successfully\",\n        variant: \"success\",\n      });\n\n      patientDiagnosisQuery.refetch();\n    },\n    onError(error) {\n      onSaveChange(false);\n\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const handleDiagnosisClick = (title: string, location: string) => {\n    if (patientChart?.id !== undefined) {\n      onSaveChange(true);\n      savePatientDiagnosis({\n        variables: {\n          input: {\n            title,\n            patientChartId: patientChart.id,\n            location: location,\n            differential: true,\n          },\n        },\n      });\n    }\n  };\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChart?.id) {\n      const runIndexDb = async () => {\n        const chart: any = {\n          ...data,\n          patientChartId: patientChart?.id.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(chart, \"patient_chart\", patientChart?.id)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChart?.id]);\n\n  return (\n    <div>\n      <div className=\"flex space-x-6\">\n        <div className=\"w-1/3\">\n          <DiagnosisList onItemClick={handleDiagnosisClick} />\n        </div>\n        <div className=\"flex-1\">\n          <div className=\"grid grid-rows-2 h-full gap-y-5\">\n            <div className=\"row-span-1 h-full bg-gray-50 rounded shadow-lg p-5\">\n              <p className=\"text-2xl text-gray-600 font-bold\">\n                Differential Diagnosis\n              </p>\n\n              <hr className=\"mt-4 mb-4\" />\n\n              {patientDiagnosisQuery.data?.patientDiagnoses.edges.length ===\n                0 && (\n                <div className=\"bg-gray-100 mt-5 flex h-44 rounded-sm shadow-inner\">\n                  <div className=\"m-auto flex space-x-1 text-gray-500\">\n                    <div className=\"material-icons\">inbox</div>\n                    <p className=\"text-center\">Nothing here yet</p>\n                  </div>\n                </div>\n              )}\n\n              <ul className=\"overflow-auto\">\n                {patientDiagnosisQuery.data?.patientDiagnoses.edges.map(\n                  (e, i) => (\n                    <li\n                      key={e?.node.id}\n                      className=\"flex justify-between py-4 px-2\"\n                    >\n                      <div className=\"flex space-x-3\">\n                        <span className=\"material-icons text-teal-800\">\n                          check_circle\n                        </span>{\" \"}\n                        <div>\n                          <p className=\"font-semibold text-gray-700\">\n                            {e?.node.title}\n                          </p>\n                          <p className=\"text-gray-500 text-sm\">\n                            {e?.node.location}\n                          </p>\n                        </div>\n                      </div>\n\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <button\n                            type=\"button\"\n                            disabled={patientChartLocked[0]}\n                            className=\"material-icons text-gray-700\"\n                            onClick={() => {\n                              if (e?.node.id !== undefined) {\n                                onSaveChange(true);\n\n                                deletePatientDiagnosis({\n                                  variables: { id: e?.node.id },\n                                });\n                              }\n                            }}\n                          >\n                            delete\n                          </button>\n                        </div>\n                      </div>\n                    </li>\n                  )\n                )}\n              </ul>\n            </div>\n            <div className=\"row-span-1 h-full bg-gray-50 rounded shadow-lg p-5\">\n              <p className=\"text-2xl text-gray-600 font-bold\">Note</p>\n\n              <hr className=\"mt-4 mb-4\" />\n\n              <textarea\n                name=\"differentialDiagnosisNote\"\n                rows={3}\n                ref={register}\n                disabled={patientChartLocked[0]}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md h-44 w-full\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/Diagnosis.tsx",["1220","1221","1222","1223","1224"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport { AUTO_SAVE_INTERVAL } from \"../..\";\nimport { DiagnosisList } from \"../../components/DiagnosisList\";\nimport {\n  PatientChart,\n  PatientChartUpdateInput,\n  QueryPatientDiagnosesArgs,\n  MutationSavePatientDiagnosisArgs,\n  MutationUpdatePatientChartArgs,\n  MutationDeletePatientDiagnosisArgs,\n  Query,\n} from \"../../models/models\";\nimport { AppointmentContext } from \"../../_context/AppointmentContext\";\nimport IndexedDb from \"../../_db\";\n\nconst PATIENT_DIAGNOSES = gql`\n  query PatientDiagnoses(\n    $page: PaginationInput!\n    $filter: PatientDiagnosisFilter\n  ) {\n    patientDiagnoses(page: $page, filter: $filter) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          title\n          location\n        }\n      }\n    }\n  }\n`;\n\nconst SAVE_PATIENT_DIAGNOSIS = gql`\n  mutation SavePatientDiagnosis($input: PatientDiagnosisInput!) {\n    savePatientDiagnosis(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_PATIENT_DIAGNOSIS = gql`\n  mutation DeletePatientDiagnosis($id: ID!) {\n    deletePatientDiagnosis(id: $id)\n  }\n`;\n\nexport const Diagnosis: React.FC<{\n  patientChart: PatientChart | undefined;\n  onSaveChange: (saving: boolean) => void;\n}> = ({ patientChart, onSaveChange }) => {\n  const notifDispatch = useNotificationDispatch();\n  const { register, watch, setValue } = useForm<PatientChartUpdateInput>({\n    defaultValues: {\n      id: patientChart?.id,\n      diagnosisNote: patientChart?.diagnosisNote,\n    },\n  });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    if (patientChart?.diagnosisNote) {\n      setValue(\"diagnosisNote\", patientChart.diagnosisNote);\n    }\n  }, [patientChart?.diagnosisNote]);\n\n  const [timer, setTimer] = useState<any>(null);\n\n  const patientDiagnosisQuery = useQuery<Query, QueryPatientDiagnosesArgs>(\n    PATIENT_DIAGNOSES,\n    {\n      variables: {\n        page: { page: 0, size: 100 },\n        filter: {\n          patientChartId: patientChart?.id,\n          differential: false,\n        },\n      },\n    }\n  );\n\n  const [savePatientDiagnosis] = useMutation<\n    any,\n    MutationSavePatientDiagnosisArgs\n  >(SAVE_PATIENT_DIAGNOSIS, {\n    onCompleted(data) {\n      onSaveChange(false);\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Success\",\n        notifSubTitle: \"Patient diagnosis saved successfully\",\n        variant: \"success\",\n      });\n\n      patientDiagnosisQuery.refetch();\n    },\n    onError(error) {\n      onSaveChange(false);\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [deletePatientDiagnosis] = useMutation<\n    any,\n    MutationDeletePatientDiagnosisArgs\n  >(DELETE_PATIENT_DIAGNOSIS, {\n    onCompleted(data) {\n      onSaveChange(false);\n\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Success\",\n        notifSubTitle: \"Patient Diagnosis deleted successfully\",\n        variant: \"success\",\n      });\n\n      patientDiagnosisQuery.refetch();\n    },\n    onError(error) {\n      onSaveChange(false);\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const handleDiagnosisClick = (title: string, location: string) => {\n    if (patientChart?.id !== undefined) {\n      onSaveChange(true);\n      savePatientDiagnosis({\n        variables: {\n          input: {\n            title,\n            patientChartId: patientChart.id,\n            location: location,\n            differential: false,\n          },\n        },\n      });\n    }\n  };\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChart?.id) {\n      const runIndexDb = async () => {\n        const chart: any = {\n          ...data,\n          patientChartId: patientChart?.id.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(chart, \"patient_chart\", patientChart?.id)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChart?.id]);\n\n  return (\n    <div>\n      <div className=\"flex space-x-6\">\n        <div className=\"w-1/3\">\n          <DiagnosisList onItemClick={handleDiagnosisClick} />\n        </div>\n        <div className=\"flex-1\">\n          <div className=\"grid grid-rows-2 h-full gap-y-5\">\n            <div className=\"row-span-1 h-full bg-gray-50 rounded shadow-lg p-5\">\n              <p className=\"text-2xl text-gray-600 font-bold\">\n                Patient Diagnosis\n              </p>\n\n              <hr className=\"mt-4 mb-4\" />\n\n              {patientDiagnosisQuery.data?.patientDiagnoses.edges.length ===\n                0 && (\n                <div className=\"bg-gray-100 mt-5 flex h-44 rounded-sm shadow-inner\">\n                  <div className=\"m-auto flex space-x-1 text-gray-500\">\n                    <div className=\"material-icons\">inbox</div>\n                    <p className=\"text-center\">Nothing here yet</p>\n                  </div>\n                </div>\n              )}\n\n              <ul className=\"overflow-auto\">\n                {patientDiagnosisQuery.data?.patientDiagnoses.edges.map(\n                  (e, i) => (\n                    <li\n                      key={e?.node.id}\n                      className=\"flex justify-between py-4 px-2\"\n                    >\n                      <div className=\"flex space-x-3\">\n                        <span className=\"material-icons text-teal-800\">\n                          check_circle\n                        </span>{\" \"}\n                        <div>\n                          <p className=\"font-semibold text-gray-700\">\n                            {e?.node.title}\n                          </p>\n                          <p className=\"text-gray-500 text-sm\">\n                            {e?.node.location}\n                          </p>\n                        </div>\n                      </div>\n\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <button\n                            type=\"button\"\n                            disabled={patientChartLocked[0]}\n                            className=\"material-icons text-gray-700\"\n                            onClick={() => {\n                              if (e?.node.id !== undefined) {\n                                deletePatientDiagnosis({\n                                  variables: { id: e?.node.id },\n                                });\n                              }\n                            }}\n                          >\n                            delete\n                          </button>\n                        </div>\n                      </div>\n                    </li>\n                  )\n                )}\n              </ul>\n            </div>\n            <div className=\"row-span-1 h-full bg-gray-50 rounded shadow-lg p-5\">\n              <p className=\"text-2xl text-gray-600 font-bold\">Note</p>\n\n              <hr className=\"mt-4 mb-4\" />\n\n              <textarea\n                name=\"diagnosisNote\"\n                rows={3}\n                ref={register}\n                disabled={patientChartLocked[0]}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md h-44 w-full\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/VitalSigns.tsx",["1225","1226"],"import {  useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport { IopForm } from \"../../components/IopForm\";\nimport { OtherVitalsForm } from \"../../components/OtherVitalsForm\";\nimport { VisualAcuityForm } from \"../../components/VisualAcuityForm\";\nimport {\n  Query,\n} from \"../../models/models\";\n\nexport const SAVE_VISUAL_ACUITY = gql`\n  mutation SaveVisualAcuity($input: VisualAcuityInput!) {\n    saveVisualAcuity(input: $input) {\n      id\n    }\n  }\n`;\n\nconst SAVE_IOP = gql`\n  mutation SaveIop($input: IopInput!) {\n    saveIop(input: $input) {\n      id\n    }\n  }\n`;\n\nexport const UPDATE_PATIENT_CHART = gql`\n  mutation SavePatientChart($input: PatientChartUpdateInput!) {\n    updatePatientChart(input: $input) {\n      id\n    }\n  }\n`;\n\nconst SAVE_AUTO_REFRACTION = gql`\n  mutation SaveAutoRefraction($input: AutoRefractionInput!) {\n    saveAutoRefraction(input: $input) {\n      id\n    }\n  }\n`;\n\nconst GET_VITAL_SIGNS = gql`\n  query GetVitalSigns($filter: VitalSignsFilter!, $id: ID!) {\n    patientChart(id: $id) {\n      id\n      bloodPressure\n    }\n\n    visualAcuity(filter: $filter) {\n      id\n      rightDistanceUncorrected\n      leftDistanceUncorrected\n      rightDistancePinhole\n      leftDistancePinhole\n      rightDistanceCorrected\n      leftDistanceCorrected\n      rightNearUncorrected\n      leftNearUncorrected\n      rightNearPinhole\n      leftNearPinhole\n      rightNearCorrected\n      leftNearCorrected\n    }\n\n    iop(filter: $filter) {\n      id\n      rightApplanation\n      leftApplanation\n      rightTonopen\n      leftTonopen\n      rightDigital\n      leftDigital\n      rightNoncontact\n      leftNoncontact\n    }\n  }\n`;\n\n\nexport const VitalSigns: React.FC<{\n  patientChartId: string | undefined;\n  onSaveChange: (saving: boolean) => void;\n}> = ({ patientChartId }) => {\n  const { data } = useQuery<Query, any>(GET_VITAL_SIGNS, {\n    variables: { filter: { patientChartId }, id: patientChartId },\n  });\n\n  return (\n    <div className=\"container mx-auto bg-gray-50 rounded shadow-lg p-5\">\n      <div className=\"text-2xl text-gray-600 font-semibold\">Vital Signs</div>\n\n      <hr className=\"mt-5\" />\n\n      <div className=\"grid grid-cols-6 gap-x-3 gap-y-7 mt-5\">\n        <div className=\"col-span-1\"></div>\n        <div className=\"col-span-5\">\n          <div className=\"grid grid-cols-5 gap-3 justify-items-center\">\n            <div></div>\n            <div className=\"col-span-2\">OD</div>\n            <div className=\"col-span-2\">OS</div>\n          </div>\n        </div>\n\n        <div className=\"col-span-1 justify-self-end text-gray-500 tracking-wide font-semibold\">\n          Visual Acuity\n        </div>\n        <div className=\"col-span-5 border-l border-green-500\">\n          <VisualAcuityForm\n            values={data?.visualAcuity}\n            patientChartId={patientChartId}\n          />\n        </div>\n\n        <div className=\"col-span-1 justify-self-end text-gray-500 tracking-wide font-semibold\">\n          IOP\n        </div>\n        <div className=\"col-span-5 border-l border-green-500\">\n          <IopForm values={data?.iop} patientChartId={patientChartId} />\n        </div>\n\n        <div className=\"col-span-1 justify-self-end text-gray-500 tracking-wide font-semibold\">\n          Other Vitals\n        </div>\n        <div className=\"col-span-5 border-l border-green-500\">\n          <OtherVitalsForm\n            patientChartId={patientChartId}\n            values={data?.patientChart}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/Examination.tsx",["1227","1228","1229","1230","1231"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport {\n  MutationSaveCoverTestArgs,\n  MutationSaveExternalExamArgs,\n  MutationSaveFunduscopyArgs,\n  MutationSaveOcularMotilityArgs,\n  MutationSaveOpticDiscArgs,\n  MutationSavePupilsArgs,\n  MutationSaveSlitLampExamArgs,\n  Query,\n  QueryExternalExamArgs,\n} from \"../../models/models\";\nimport { useNotificationDispatch } from \"../../notification\";\nimport { CoverTestComponent } from \"../../components/CoverTestComponent\";\nimport { ExternalExamComponent } from \"../../components/ExternalExamComponent\";\nimport { FunduscopyComponent } from \"../../components/FunduscopyComponent\";\nimport { OcularMotilityComponent } from \"../../components/OcularMotilityComponent\";\nimport { OpticDiscComponent } from \"../../components/OpticDiscComponent\";\nimport { PupilsComponent } from \"../../components/PupilsComponent\";\nimport { SlitLampExamComponent } from \"../../components/SlitLampExamComponent\";\n\nconst SAVE_EXTERNAL_EXAM = gql`\n  mutation SaveExternalExam($input: ExternalExamInput!) {\n    saveExternalExam(input: $input) {\n      id\n    }\n  }\n`;\n\nconst SAVE_COVER_TEST = gql`\n  mutation SaveCoverTest($input: CoverTestInput!) {\n    saveCoverTest(input: $input) {\n      id\n    }\n  }\n`;\n\nconst SAVE_FUNDUSCOPY = gql`\n  mutation SaveFunduscopy($input: FunduscopyInput!) {\n    saveFunduscopy(input: $input) {\n      id\n    }\n  }\n`;\n\nconst SAVE_OCULAR_MOTILITY = gql`\n  mutation SaveOcularMotility($input: OcularMotilityInput!) {\n    saveOcularMotility(input: $input) {\n      id\n    }\n  }\n`;\n\nconst SAVE_OPTIC_DISC = gql`\n  mutation SaveOpticDisc($input: OpticDiscInput!) {\n    saveOpticDisc(input: $input) {\n      id\n    }\n  }\n`;\n\nconst SAVE_PUPILS = gql`\n  mutation SavePupils($input: PupilsInput!) {\n    savePupils(input: $input) {\n      id\n    }\n  }\n`;\n\nconst SAVE_SLIT_LAMP_EXAM = gql`\n  mutation SaveSlitLampExam($input: SlitLampExamInput!) {\n    saveSlitLampExam(input: $input) {\n      id\n    }\n  }\n`;\n\nconst GET_EXAMINATIONS = gql`\n  query GetExaminations($filter: ExamFilter!) {\n    externalExam(filter: $filter) {\n      id\n      rightOrbits\n      leftOrbits\n      rightLids\n      leftLids\n      rightLacrimalSystem\n      leftLacrimalSystem\n      note\n    }\n\n    coverTest(filter: $filter) {\n      id\n      rightCoverTest\n      leftCoverTest\n      note\n    }\n\n    funduscopy(filter: $filter) {\n      id\n      rightRetina\n      leftRetina\n      leftRetinaSketch\n      rightRetinaSketch\n      note\n    }\n\n    ocularMotility(filter: $filter) {\n      id\n      rightOcularMotility\n      leftOcularMotility\n      rsr\n      rio\n      rlr\n      rmr\n      rir\n      rso\n      rightFlick\n      lsr\n      lio\n      llr\n      lmr\n      lir\n      lso\n      leftFlick\n      distance\n      near\n      note\n    }\n\n    opticDisc(filter: $filter) {\n      id\n      rightOpticDisc\n      leftOpticDisc\n      rightOpticDiscSketch\n      leftOpticDiscSketch\n      rightCdr\n      leftCdr\n      note\n    }\n\n    pupils(filter: $filter) {\n      id\n      rightPupils\n      leftPupils\n      note\n    }\n\n    slitLampExam(filter: $filter) {\n      id\n      rightConjunctiva\n      leftConjunctiva\n      rightCornea\n      leftCornea\n      rightCorneaSketch\n      leftCorneaSketch\n      leftSclera\n      rightSclera\n      rightAnteriorChamber\n      leftAnteriorChamber\n      rightIris\n      leftIris\n      rightLens\n      leftLens\n      rightLensSketch\n      leftLensSketch\n      rightVitreos\n      leftVitreos\n      note\n    }\n  }\n`;\n\nexport const Examination: React.FC<{\n  patientChartId: string | undefined;\n  onSaveChange: (saving: boolean) => void;\n}> = ({ patientChartId, onSaveChange }) => {\n  const notifDispatch = useNotificationDispatch();\n\n  const { data, error } = useQuery<Query, QueryExternalExamArgs>(\n    GET_EXAMINATIONS,\n    {\n      variables: { filter: { patientChartId } },\n    }\n  );\n\n  const [saveExternalExam] = useMutation<any, MutationSaveExternalExamArgs>(\n    SAVE_EXTERNAL_EXAM,\n    {\n      onCompleted() {\n        onSaveChange(false);\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [saveCoverTest] = useMutation<any, MutationSaveCoverTestArgs>(\n    SAVE_COVER_TEST,\n    {\n      onCompleted() {\n        onSaveChange(false);\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [saveFunduscopy] = useMutation<any, MutationSaveFunduscopyArgs>(\n    SAVE_FUNDUSCOPY,\n    {\n      onCompleted() {\n        onSaveChange(false);\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [saveOcularMotility] = useMutation<any, MutationSaveOcularMotilityArgs>(\n    SAVE_OCULAR_MOTILITY,\n    {\n      onCompleted() {\n        onSaveChange(false);\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [saveOpticDisc] = useMutation<any, MutationSaveOpticDiscArgs>(\n    SAVE_OPTIC_DISC,\n    {\n      onCompleted() {\n        onSaveChange(false);\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [savePupils] = useMutation<any, MutationSavePupilsArgs>(SAVE_PUPILS, {\n    onCompleted() {\n      onSaveChange(false);\n    },\n    onError(error) {\n      onSaveChange(false);\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [saveSlitLampExam] = useMutation<any, MutationSaveSlitLampExamArgs>(\n    SAVE_SLIT_LAMP_EXAM,\n    {\n      onCompleted() {\n        onSaveChange(false);\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  return (\n    <div className=\"container mx-auto bg-gray-50 rounded shadow-lg p-5\">\n      <div className=\"text-2xl text-gray-600 font-semibold\">Examination</div>\n\n      <hr className=\"mt-5\" />\n\n      <div className=\"grid grid-cols-6 gap-x-3 gap-y-7 mt-5\">\n        <div className=\"col-span-1\"></div>\n        <div className=\"col-span-5\">\n          <div className=\"grid grid-cols-5 gap-3 justify-items-center\">\n            <div></div>\n            <div className=\"col-span-2\">OD</div>\n            <div className=\"col-span-2\">OS</div>\n          </div>\n        </div>\n\n        <div className=\"col-span-1 justify-self-end text-gray-500 tracking-wide font-semibold\">\n          External Exam\n        </div>\n        <div className=\"col-span-5 border-l border-green-500\">\n          <ExternalExamComponent\n            values={data?.externalExam}\n            patientChartId={patientChartId}\n          />\n        </div>\n\n        <div className=\"col-span-1 justify-self-end text-gray-500 tracking-wide font-semibold\">\n          Ocular Motility\n        </div>\n        <div className=\"col-span-5 border-l border-green-500\">\n          <OcularMotilityComponent\n            values={data?.ocularMotility}\n            patientChartId={patientChartId}\n          />\n        </div>\n\n        <div className=\"col-span-1 justify-self-end text-gray-500 tracking-wide font-semibold\">\n          Cover Test\n        </div>\n        <div className=\"col-span-5 border-l border-green-500\">\n          <CoverTestComponent\n            values={data?.coverTest}\n            patientChartId={patientChartId}\n          />\n        </div>\n\n        <div className=\"col-span-1 justify-self-end text-gray-500 tracking-wide font-semibold\">\n          Pupils\n        </div>\n        <div className=\"col-span-5 border-l border-green-500\">\n          <PupilsComponent\n            values={data?.pupils}\n            patientChartId={patientChartId}\n          />\n        </div>\n\n        <div className=\"col-span-1 justify-self-end text-gray-500 tracking-wide font-semibold\">\n          Slit Lamp Exam\n        </div>\n        <div className=\"col-span-5 border-l border-green-500\">\n          <SlitLampExamComponent\n            values={data?.slitLampExam}\n            patientChartId={patientChartId}\n            onSave={(input) => {\n              onSaveChange(true);\n              saveSlitLampExam({ variables: { input } });\n            }}\n          />\n        </div>\n\n        <div className=\"col-span-1 justify-self-end text-gray-500 tracking-wide font-semibold\">\n          Funduscopy\n        </div>\n        <div className=\"col-span-5 border-l border-green-500\">\n          <FunduscopyComponent\n            values={data?.funduscopy}\n            patientChartId={patientChartId}\n            onSave={(input) => {\n              onSaveChange(true);\n              saveFunduscopy({ variables: { input } });\n            }}\n          />\n        </div>\n\n        <div className=\"col-span-1 justify-self-end text-gray-500 tracking-wide font-semibold\">\n          Optic Disc\n        </div>\n        <div className=\"col-span-5 border-l border-green-500\">\n          <OpticDiscComponent\n            values={data?.opticDisc}\n            patientChartId={patientChartId}\n            onSave={(input) => {\n              onSaveChange(true);\n              saveOpticDisc({ variables: { input } });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/pages/Appointment/ChiefComplaints.tsx",["1232","1233","1234","1235","1236","1237","1238"],"import { gql, useLazyQuery, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport classnames from \"classnames\";\nimport { useNotificationDispatch } from \"../../notification\";\n\nimport ReactLoading from \"react-loading\";\nimport { useForm } from \"react-hook-form\";\nimport { ChiefComplaintTypes } from \"../../components/ChiefComplaintTypes\";\nimport {\n  ChiefComplaint,\n  HpiComponentEdge,\n  Maybe,\n  MutationDeleteChiefComplaintArgs,\n  MutationSaveChiefComplaintArgs,\n  MutationUpdatePatientChartArgs,\n  PatientChart,\n  PatientChartUpdateInput,\n  Query,\n  QueryChiefComplaintsArgs,\n  QueryHpiComponentsArgs,\n  QueryHpiComponentTypesArgs,\n} from \"../../models/models\";\nimport { AppointmentContext } from \"../../_context/AppointmentContext\";\nimport IndexedDb from \"../../_db\";\n\nconst PATIENT_CHIEF_COMPLAINTS = gql`\n  query PatientChiefComplaints(\n    $page: PaginationInput!\n    $filter: ChiefComplaintFilter\n  ) {\n    chiefComplaints(page: $page, filter: $filter) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          title\n          hpiComponents {\n            id\n            title\n            hpiComponentTypeId\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst SAVE_CHIEF_COMPLAINT = gql`\n  mutation SavePatientChiefComplaint($input: ChiefComplaintInput!) {\n    savePatientChiefComplaint(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_CHIEF_COMPLAINT = gql`\n  mutation DeletePatientChiefComplaint($id: ID!) {\n    deletePatientChiefComplaint(id: $id)\n  }\n`;\n\nconst UPDATE_CHIEF_COMPLAINT = gql`\n  mutation UpdatePatientChiefComplaint($input: ChiefComplaintUpdateInput!) {\n    updateChiefComplaint(input: $input) {\n      id\n      title\n      hpiComponents {\n        id\n        title\n        hpiComponentTypeId\n      }\n    }\n  }\n`;\n\nconst GET_HPI_COMPONENT_TYPES = gql`\n  query HpiComponentTypes($page: PaginationInput!) {\n    hpiComponentTypes(page: $page) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n    }\n  }\n`;\n\nconst GET_HPI_COMPONENTS = gql`\n  query HpiComponents($page: PaginationInput!, $filter: HpiFilter) {\n    hpiComponents(page: $page, filter: $filter) {\n      totalCount\n      pageInfo {\n        totalPages\n      }\n      edges {\n        node {\n          id\n          title\n        }\n      }\n    }\n  }\n`;\n\nexport const ChiefComplaints: React.FC<{\n  patientChart: PatientChart | undefined;\n  onSaveChange: (saving: boolean) => void;\n}> = ({ patientChart, onSaveChange }) => {\n  const [hpiComponentState, setHpiComponentState] = useState<Array<any>>([]);\n  const notifDispatch = useNotificationDispatch();\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  const { register, getValues, watch, setValue } =\n    useForm<PatientChartUpdateInput>({\n      defaultValues: {\n        id: patientChart?.id,\n        chiefComplaintsNote: patientChart?.chiefComplaintsNote,\n      },\n    });\n\n  useEffect(() => {\n    if (patientChart?.chiefComplaintsNote) {\n      setValue(\"chiefComplaintsNote\", patientChart.chiefComplaintsNote);\n    }\n  }, [patientChart?.chiefComplaintsNote]);\n\n  const [timer, setTimer] = useState<any>(null);\n  const chiefComplaintQuery = useQuery<Query, QueryChiefComplaintsArgs>(\n    PATIENT_CHIEF_COMPLAINTS,\n    {\n      variables: {\n        page: { page: 0, size: 100 },\n        filter: { patientChartId: patientChart?.id },\n      },\n    }\n  );\n\n  const hpiComponentTypeQuery = useQuery<Query, QueryHpiComponentTypesArgs>(\n    GET_HPI_COMPONENT_TYPES,\n    {\n      variables: { page: { page: 0, size: 100 } },\n    }\n  );\n\n  const [saveChiefComplaint] = useMutation<any, MutationSaveChiefComplaintArgs>(\n    SAVE_CHIEF_COMPLAINT,\n    {\n      onCompleted(data) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Chief complaint saved successfully\",\n          variant: \"success\",\n        });\n\n        chiefComplaintQuery.refetch();\n      },\n      onError(error) {\n        onSaveChange(false);\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteChiefComplaint] = useMutation<\n    any,\n    MutationDeleteChiefComplaintArgs\n  >(DELETE_CHIEF_COMPLAINT, {\n    onCompleted(data) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Success\",\n        notifSubTitle: \"Chief complaint deleted successfully\",\n        variant: \"success\",\n      });\n\n      chiefComplaintQuery.refetch();\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [updateChiefComplaint] = useMutation<any, any>(UPDATE_CHIEF_COMPLAINT, {\n    update: (cache, mutationResult) => {\n      const chiefComplaint = mutationResult.data.updateChiefComplaint;\n\n      const data = cache.readQuery<Query, QueryChiefComplaintsArgs>({\n        query: PATIENT_CHIEF_COMPLAINTS,\n        variables: {\n          page: { page: 0, size: 100 },\n          filter: { patientChartId: patientChart?.id },\n        },\n      });\n\n      if (data !== null) {\n        cache.writeQuery({\n          query: PATIENT_CHIEF_COMPLAINTS,\n          variables: {\n            page: { page: 0, size: 100 },\n            filter: { patientChartId: patientChart?.id },\n          },\n          data: {\n            chiefComplaints: [...data.chiefComplaints.edges, chiefComplaint],\n          },\n        });\n      }\n    },\n    onError(error) {\n      onSaveChange(false);\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n    onCompleted(data) {\n      onSaveChange(false);\n    },\n  });\n\n\n  const handleChiefComplaintClick = (title: string) => {\n    if (patientChart?.id !== undefined) {\n      onSaveChange(true);\n\n      saveChiefComplaint({\n        variables: {\n          input: {\n            title,\n            patientChartId: patientChart?.id,\n            hpiComponentIds: [],\n          },\n        },\n      });\n    }\n  };\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChart?.id) {\n      const runIndexDb = async () => {\n        const chart: any = {\n          ...data,\n          patientChartId: patientChart?.id.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(chart, \"patient_chart\", patientChart?.id)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChart?.id]);\n\n  return (\n    <div>\n      <div className=\"flex space-x-6\">\n        <div className=\"w-1/3\">\n          <ChiefComplaintTypes onItemClick={handleChiefComplaintClick} />\n        </div>\n        <div className=\"flex-1\">\n          <div className=\"grid grid-rows-2 gap-y-5\">\n            <div className=\"row-span-1 bg-gray-50 rounded shadow-lg p-5\">\n              <p className=\"text-2xl text-gray-600 font-bold\">\n                History of Present Illness\n              </p>\n\n              <hr className=\"mt-4 mb-4\" />\n\n              {chiefComplaintQuery.data?.chiefComplaints.edges.length === 0 && (\n                <div className=\"bg-gray-100 mt-5 min-h-screen flex rounded-sm shadow-inner\">\n                  <div className=\"m-auto flex space-x-1 text-gray-500\">\n                    <div className=\"material-icons\">inbox</div>\n                    <p className=\"text-center\">Nothing here yet</p>\n                  </div>\n                </div>\n              )}\n\n              {chiefComplaintQuery.data?.chiefComplaints.edges.map((e, i) => {\n                const isEdit = hpiComponentState.find(\n                  (e) => e.index === i\n                )?.edit;\n                const isModified = hpiComponentState.find(\n                  (e) => e.index === i\n                )?.modified;\n\n                return (\n                  <div\n                    key={e?.node.id}\n                    className={classnames(\n                      \"rounded-lg shadow-lg border border-gray-100 py-3 px-3 bg-white\",\n                      { \"mt-5\": i !== 0 }\n                    )}\n                  >\n                    <div className=\"flex justify-between items-center\">\n                      <p className=\"text-2xl tracking-wider text-gray-800 font-light\">\n                        {e?.node.title}\n                      </p>\n                      <button\n                        className={classnames(\n                          \"border border-teal-600 px-3 py-1 rounded-lg flex space-x-1 items-center\",\n                          {\n                            \"text-teal-800\": !isModified,\n                            \"text-white bg-teal-800\": isModified,\n                          }\n                        )}\n                        disabled={patientChartLocked[0]}\n                        onClick={() => {\n                          if (isEdit) {\n                            var index = hpiComponentState.findIndex(\n                              (e) => e.index === i\n                            );\n\n                            setHpiComponentState([\n                              ...hpiComponentState.slice(0, index),\n                              Object.assign({}, hpiComponentState[index], {\n                                index: i,\n                                edit: false,\n                                modified: false,\n                              }),\n                              ...hpiComponentState.slice(index + 1),\n                            ]);\n                          } else {\n                            var index = hpiComponentState.findIndex(\n                              (e) => e.index === i\n                            );\n\n                            setHpiComponentState([\n                              ...hpiComponentState.slice(0, index),\n                              Object.assign({}, hpiComponentState[index], {\n                                index: i,\n                                edit: true,\n                                modified: false,\n                              }),\n                              ...hpiComponentState.slice(index + 1),\n                            ]);\n                          }\n                        }}\n                      >\n                        <div className=\"material-icons\">\n                          {isEdit ? \"list\" : \"edit\"}\n                        </div>\n                        <p>{isEdit ? \"List\" : \"Edit\"}</p>\n                      </button>\n                    </div>\n\n                    <div className=\"mt-5\">\n                      {isEdit && (\n                        <div>\n                          <HpiComponent\n                            values={e?.node}\n                            onChange={(\n                              values: Maybe<HpiComponentEdge>[] | undefined,\n                              hpiComponentTypeId: string | undefined\n                            ) => {\n                              if (\n                                e?.node.id !== undefined &&\n                                hpiComponentTypeId !== undefined &&\n                                values !== undefined\n                              ) {\n                                const patientHpiComponents =\n                                  e.node.hpiComponents\n                                    .filter(\n                                      (e) =>\n                                        e?.hpiComponentTypeId !==\n                                        hpiComponentTypeId\n                                    )\n                                    .map((e) => e?.id);\n\n                                const selectedHpiComponents = values.map(\n                                  (e) => e?.node.id\n                                );\n\n                                const hpiComponentIds = [\n                                  ...patientHpiComponents,\n                                  ...selectedHpiComponents,\n                                ];\n\n                                updateChiefComplaint({\n                                  variables: {\n                                    input: {\n                                      id: e?.node.id,\n                                      hpiComponentIds: hpiComponentIds,\n                                    },\n                                  },\n                                });\n                              }\n                            }}\n                          />\n\n                          <div className=\"text-center w-full p-1 text-sm bg-red-400 text-white rounded-b-md\">\n                            <button\n                              type=\"button\"\n                              onClick={() => {\n                                if (e?.node.id !== undefined) {\n                                  deleteChiefComplaint({\n                                    variables: { id: e?.node.id },\n                                  });\n                                }\n                              }}\n                              className=\"\"\n                            >\n                              Delete Chief Complaint\n                            </button>\n                          </div>\n                        </div>\n                      )}\n\n                      {isEdit !== true && e?.node.hpiComponents.length === 0 && (\n                        <div className=\"bg-gray-100 mt-5 h-32 flex rounded-sm shadow-inner\">\n                          <div className=\"m-auto flex space-x-1 text-gray-500\">\n                            <div className=\"material-icons\">inbox</div>\n                            <p className=\"text-center\">Nothing here yet</p>\n                          </div>\n                        </div>\n                      )}\n\n                      {isEdit !== true &&\n                        e?.node.hpiComponents &&\n                        e?.node.hpiComponents.length > 0 && (\n                          <ul>\n                            {hpiComponentTypeQuery.data?.hpiComponentTypes.edges\n                              .filter((t) => {\n                                const hpiComponentTypeIds =\n                                  e.node.hpiComponents.map(\n                                    (e) => e?.hpiComponentTypeId\n                                  );\n                                return hpiComponentTypeIds.includes(t?.node.id);\n                              })\n                              .map((t) => {\n                                const hpiComponents =\n                                  e?.node.hpiComponents.filter(\n                                    (e) => e?.hpiComponentTypeId === t?.node.id\n                                  );\n\n                                return (\n                                  <li className=\"mt-2 pb-2\" key={t?.node.id}>\n                                    <div className=\"flex space-x-3 items-center\">\n                                      <span className=\"material-icons md-16 text-teal-600\">\n                                        check_circle\n                                      </span>{\" \"}\n                                      <div>\n                                        <p className=\"text-gray-700 text-lg\">\n                                          {t?.node.title}\n                                        </p>\n                                      </div>\n                                    </div>\n\n                                    <ul className=\"ml-10 mt-1 list-inside list-disc\">\n                                      {hpiComponents.map((e) => (\n                                        <li\n                                          className=\"text-gray-800 font-light\"\n                                          key={e?.id}\n                                        >\n                                          {e?.title}\n                                        </li>\n                                      ))}\n                                    </ul>\n                                  </li>\n                                );\n                              })}\n                          </ul>\n                        )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n            <div className=\"row-span-1 h-full bg-gray-50 rounded shadow-lg p-5\">\n              <p className=\"text-2xl text-gray-600 font-bold\">Note</p>\n\n              <hr className=\"mt-4 mb-4\" />\n\n              <textarea\n                name=\"chiefComplaintsNote\"\n                rows={3}\n                ref={register}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md h-44 w-full\"\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface HpiComponentProps {\n  values: ChiefComplaint | undefined;\n  onChange: (\n    values: Maybe<HpiComponentEdge>[] | undefined,\n    hpiComponentTypeId: string | undefined\n  ) => void;\n}\n\nconst HpiComponent: React.FC<HpiComponentProps> = ({ values, onChange }) => {\n  const { register, getValues } = useForm<any>({\n    defaultValues: {\n      id: values?.id,\n      hpiComponentIds: values?.hpiComponents.map((e) => e?.id.toString()),\n    },\n  });\n\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [openIndex, setOpenIndex] = useState(-1);\n\n  const { data } = useQuery<Query, QueryHpiComponentTypesArgs>(\n    GET_HPI_COMPONENT_TYPES,\n    {\n      variables: { page: { page: 0, size: 100 } },\n    }\n  );\n\n  const hpiComponentLazyQuery = useLazyQuery<Query, QueryHpiComponentsArgs>(\n    GET_HPI_COMPONENTS\n  );\n\n  useEffect(() => {\n    let isMounted = true;\n\n    if (openIndex !== -1 && data !== undefined && isMounted) {\n      const hpiComponentType = data.hpiComponentTypes.edges[openIndex];\n\n      hpiComponentLazyQuery[0]({\n        variables: {\n          page: { page: 0, size: 100 },\n          filter: { hpiComponentTypeId: hpiComponentType?.node.id },\n        },\n      });\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [openIndex, data]);\n\n  const handleOpen = (index: number) => {\n    setOpenIndex(index);\n  };\n\n  return (\n    <div className=\"p-1 bg-gray-50 shadow-inner rounded-lg\">\n      <form>\n        {data?.hpiComponentTypes.edges.map((hpiComponentType, i) => (\n          <div\n            key={i}\n            className={classnames({\n              \"border-b\": i !== data?.hpiComponentTypes.edges.length - 1,\n            })}\n          >\n            <div\n              className={classnames({\n                \"border-l-2 border-transparent\": i !== openIndex,\n                \"border-l-2 bg-gray-100 border-teal-500\": i === openIndex,\n              })}\n            >\n              <div className=\"flex justify-between p-3 cursor-pointer select-none\">\n                <div>\n                  <div\n                    className={classnames({\n                      \"text-gray-700\": i !== openIndex,\n                      \"text-teal-500\": i === openIndex,\n                    })}\n                  >\n                    {hpiComponentType?.node.title}\n                  </div>\n                  {i === openIndex && (\n                    <div className=\"mt-3 ml-4\">\n                      {hpiComponentLazyQuery[1].loading ? (\n                        <ReactLoading\n                          type=\"spin\"\n                          color=\"teal\"\n                          height=\"40%\"\n                          width=\"40%\"\n                        />\n                      ) : (\n                        <div>\n                          <input\n                            type=\"search\"\n                            className=\"w-full p-2 bg-gray-100 text-gray-500 text-sm border-none\"\n                            placeholder=\"Search\"\n                            onChange={(evt) => setSearchValue(evt.target.value)}\n                          />\n\n                          {hpiComponentLazyQuery[1].data?.hpiComponents?.edges\n                            .filter((e) =>\n                              e?.node.title\n                                .toLocaleLowerCase()\n                                .includes(searchValue.toLocaleLowerCase())\n                            )\n                            .map((hpiComponent) => (\n                              <div key={hpiComponent?.node.id} className=\"p-2\">\n                                <input\n                                  type=\"checkbox\"\n                                  id={hpiComponent?.node.id}\n                                  name=\"hpiComponentIds\"\n                                  value={hpiComponent?.node.id}\n                                  ref={register}\n                                  onChange={() => {\n                                    const hpiComponents =\n                                      hpiComponentLazyQuery[1].data?.hpiComponents.edges.filter(\n                                        (e) =>\n                                          getValues(\n                                            \"hpiComponentIds\"\n                                          )?.includes(e?.node.id.toString())\n                                      );\n\n                                    onChange(\n                                      hpiComponents,\n                                      hpiComponentType?.node.id\n                                    );\n                                  }}\n                                />\n                                <label\n                                  className=\"ml-3 text-gray-800 font-light\"\n                                  htmlFor=\"hpiComponentIds\"\n                                >\n                                  {hpiComponent?.node.title}\n                                </label>\n                              </div>\n                            ))}\n                        </div>\n                      )}\n                    </div>\n                  )}{\" \"}\n                </div>\n                <div\n                  className={classnames(\n                    \"rounded-full border w-7 h-7 flex items-center justify-center\",\n                    {\n                      \"border-gray-300\": i !== openIndex,\n                      \"border-teal-500 bg-teal-500\": i === openIndex,\n                    }\n                  )}\n                  onClick={() => {\n                    setSearchValue(\"\");\n                    if (i === openIndex) {\n                      handleOpen(-1);\n                    } else {\n                      handleOpen(i);\n                    }\n                  }}\n                >\n                  {i === openIndex ? (\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                      className=\"w-5 text-white\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M5 15l7-7 7 7\"\n                      />\n                    </svg>\n                  ) : (\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                      className={\"w-5 text-gray-400\"}\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M19 9l-7 7-7-7\"\n                      />\n                    </svg>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </form>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/spinner/index.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrderFollowUpForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrderReferralForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/MedicationTable.tsx",["1239","1240","1241"],"import React, { Fragment } from \"react\";\nimport { format, parseISO } from \"date-fns\";\nimport {\n  Maybe,\n  MedicalPrescriptionEdge,\n  MedicalPrescription,\n} from \"../models/models\";\nimport { Menu } from \"@headlessui/react\";\nimport { PrinterIcon, PencilIcon } from \"@heroicons/react/outline\";\nimport MenuComponent from \"./MenuComponent\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\ninterface Props {\n  items: Array<any> | null | undefined;\n  onUpdate?: (item: MedicalPrescription, value: string) => void;\n  onEdit?: (item: MedicalPrescription) => void;\n  onPrint: (item: MedicalPrescription) => void;\n  readOnly?: boolean;\n}\n\nexport const MedicationTable: React.FC<Props> = ({\n  items,\n  onUpdate,\n  onEdit,\n  onPrint,\n  readOnly = false,\n}) => {\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  return (\n    <table className=\"table-auto divide-y divide-gray-200 mt-4 w-full shadow-lg rounded-lg\">\n      <thead className=\"bg-teal-700\">\n        <tr>\n          <th\n            scope=\"col\"\n            className=\"px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n          >\n            Medication\n          </th>\n          {readOnly && (\n            <th\n              scope=\"col\"\n              className=\"px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n            >\n              Sig\n            </th>\n          )}\n          <th\n            scope=\"col\"\n            className=\"px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n          >\n            Date\n          </th>\n          <th\n            scope=\"col\"\n            className=\"px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n          >\n            Refill\n          </th>\n          <th\n            scope=\"col\"\n            className=\"px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n          >\n            Status\n          </th>\n          {!readOnly && (\n            <th\n              scope=\"col\"\n              className=\"px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider\"\n            >\n              Action\n            </th>\n          )}\n        </tr>\n      </thead>\n      <tbody className=\"bg-white divide-y divide-gray-200\">\n        {items?.length === 0 && (\n          <tr>\n            <td colSpan={5} rowSpan={5}>\n              <div className=\"bg-gray-100 flex h-32 shadow-inner\">\n                <div className=\"m-auto flex space-x-1 text-gray-500\">\n                  <div className=\"material-icons\">inbox</div>\n                  <p className=\"text-center\">Nothing here yet</p>\n                </div>\n              </div>\n            </td>\n          </tr>\n        )}\n        {items?.map((e) => (\n          <tr key={e?.id}>\n            <td className=\"px-6 py-4 text-sm text-gray-900\">{e?.medication}</td>\n            {readOnly && (\n              <td className=\"px-6 py-4 text-sm text-gray-900\">{e?.sig}</td>\n            )}\n            <td className=\"px-6 py-4 text-sm text-gray-900\">\n              {format(parseISO(e?.prescribedDate), \"MMM d, y\")}\n            </td>\n            <td className=\"px-6 py-4 text-sm text-gray-900\">{e?.refill}</td>\n            {readOnly && (\n              <td className=\"px-6 py-4 text-sm text-gray-900\">{e?.status}</td>\n            )}\n            {!readOnly && (\n              <td className=\"px-6 py-4 text-sm text-gray-900\">\n                <select\n                  value={e?.status}\n                  disabled={patientChartLocked[0]}\n                  onChange={(evt) => {\n                    if (e?.id !== undefined && onUpdate) {\n                      onUpdate(e, evt.target.value);\n                    }\n                  }}\n                  name=\"status\"\n                  className=\"text-sm border-none\"\n                >\n                  <option value={\"Active\"}>Active</option>\n                  <option value={\"Inactive\"}>Inactive</option>\n                </select>\n              </td>\n            )}\n            {!readOnly && (\n              <td className=\"px-6 py-4 text-sm text-gray-900\">\n                <MenuComponent\n                  title={\"Options\"}\n                  menus={\n                    <div className=\"px-1 py-1\">\n                      <Menu.Item>\n                        {({ active }) => (\n                          <button\n                            className={`${\n                              active\n                                ? \"bg-teal-500 text-white\"\n                                : \"text-gray-900\"\n                            } group flex rounded-md items-center w-full px-2 py-2 text-sm`}\n                            onClick={() => e && onEdit && onEdit(e)}\n                            disabled={patientChartLocked[0]}\n                          >\n                            <PencilIcon\n                              className=\"w-5 h-5 mr-2 text-teal-700\"\n                              aria-hidden=\"true\"\n                            />\n                            Edit\n                          </button>\n                        )}\n                      </Menu.Item>\n                      <Menu.Item>\n                        {({ active }) => (\n                          <button\n                            className={`${\n                              active\n                                ? \"bg-teal-500 text-white\"\n                                : \"text-gray-900\"\n                            } group flex rounded-md items-center w-full px-2 py-2 text-sm`}\n                            onClick={() => e && onPrint(e)}\n                          >\n                            <PrinterIcon\n                              className=\"w-5 h-5 mr-2 text-teal-700\"\n                              aria-hidden=\"true\"\n                            />\n                            Print\n                          </button>\n                        )}\n                      </Menu.Item>\n                    </div>\n                  }\n                />\n              </td>\n            )}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SurgicalProcedureTypes.tsx",["1242"],"import { gql, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { TablePagination } from \"../components/table_pagination\";\nimport {\n  PaginationInput,\n  Query,\n  QuerySurgicalProcedureTypesArgs,\n  SurgicalProcedureType,\n} from \"../models/models\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\nconst SURGICAL_PROCEDURE_TYPES = gql`\n  query SurgicalProcedureTypes($page: PaginationInput!, $searchTerm: String) {\n    surgicalProcedureTypes(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          billings {\n            id\n            item\n            code\n            price\n          }\n          supplies {\n            id\n            title\n            billings {\n              id\n              item\n              code\n              price\n            }\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nexport const SurgicalProcedureTypes: React.FC<{\n  onItemClick: (item: SurgicalProcedureType) => void;\n}> = ({ onItemClick }) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const { data, refetch } = useQuery<Query, QuerySurgicalProcedureTypesArgs>(\n    SURGICAL_PROCEDURE_TYPES,\n    {\n      variables: { page: paginationInput, searchTerm },\n    }\n  );\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput, searchTerm]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.surgicalProcedureTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleItemClick = (item: SurgicalProcedureType) => {\n    onItemClick(item);\n  };\n\n  return (\n    <div className=\"overflow-hidden rounded-lg shadow-xl\">\n      <table className=\"w-full\">\n        <thead>\n          <tr>\n            <th\n              scope=\"col\"\n              colSpan={2}\n              className=\"px-4 py-2 bg-teal-700 text-left text-xs text-gray-50 uppercase tracking-wider\"\n            >\n              Surgical procedures list\n            </th>\n          </tr>\n          <tr>\n            <th colSpan={2}>\n              <input\n                type=\"search\"\n                name=\"search\"\n                placeholder=\"Search\"\n                className=\"block w-full sm:text-md border-none\"\n                onChange={(evt) => setSearchTerm(evt.target.value.trim())}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200 p-1\">\n          {data?.surgicalProcedureTypes.edges.map((e) => (\n            <tr\n              key={e?.node.id}\n              onClick={() =>\n                !patientChartLocked[0] && e?.node && handleItemClick(e?.node)\n              }\n              className=\"hover:bg-gray-100 border-t cursor-pointer\"\n            >\n              <td className=\"px-6 py-5 text-sm text-gray-900\">\n                {e?.node.title}\n              </td>\n              <td className=\"p-2\">\n                <span className=\"material-icons\">keyboard_arrow_right</span>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <TablePagination\n        totalCount={data?.surgicalProcedureTypes.totalCount ?? 0}\n        onNext={handleNextClick}\n        onPrevious={handlePreviousClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrderSurgicalProcedureForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrderLabForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/DiagnosisList.tsx",["1243","1244","1245"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { TablePagination } from \"../components/table_pagination\";\nimport {\n  Diagnosis,\n  MutationDeleteFavoriteDiagnosisArgs,\n  MutationSaveFavoriteDiagnosisArgs,\n  PaginationInput,\n  Query,\n  QueryDiagnosesArgs,\n} from \"../models/models\";\nimport {\n  BookmarkIcon as BookmarkSolidIcon,\n  StarIcon as StarSolidIcon,\n  ChevronRightIcon,\n} from \"@heroicons/react/solid\";\nimport {\n  BookmarkIcon as BookmarkOutlineIcon,\n  StarIcon as StarOutlineIcon,\n} from \"@heroicons/react/outline\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\nconst GET_DATA = gql`\n  query GetData(\n    $page: PaginationInput!\n    $searchTerm: String!\n    $favorites: Boolean\n  ) {\n    diagnoses(page: $page, searchTerm: $searchTerm, favorites: $favorites) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n    favoriteDiagnosis {\n      id\n      diagnosisId\n    }\n  }\n`;\n\nconst SAVE_FAVORITE_DIAGNOSIS = gql`\n  mutation SaveFavoriteDiagnosis($diagnosisId: ID!) {\n    saveFavoriteDiagnosis(diagnosisId: $diagnosisId) {\n      id\n    }\n  }\n`;\n\nconst DELETE_FAVORITE_DIAGNOSIS = gql`\n  mutation DeleteFavoriteDiagnosis($id: ID!) {\n    deleteFavoriteDiagnosis(id: $id)\n  }\n`;\n\nexport const DiagnosisList: React.FC<{\n  onItemClick: (title: string, location: string) => void;\n}> = ({ onItemClick }) => {\n  const notifDispatch = useNotificationDispatch();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 15,\n  });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput, searchTerm]);\n\n  const [diagnosisLocation, setDiagnosisLocation] = useState<Array<any>>([]);\n\n  const [showFavorites, setShowFavorites] = useState<boolean>(true);\n\n  const { data, refetch } = useQuery<Query, QueryDiagnosesArgs>(GET_DATA, {\n    variables: {\n      page: paginationInput,\n      searchTerm: searchTerm,\n      favorites: showFavorites,\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [showFavorites]);\n\n  const [favoriteIds, setFavoriteIds] = useState<Array<any>>([]);\n  useEffect(() => {\n    if (data) {\n      const ids = data.favoriteDiagnosis.map((e) => e?.diagnosisId) ?? [];\n      setFavoriteIds(ids);\n    }\n  }, [data]);\n\n  const [saveFavoriteDiagnosis] = useMutation<\n    any,\n    MutationSaveFavoriteDiagnosisArgs\n  >(SAVE_FAVORITE_DIAGNOSIS, {\n    onCompleted(data) {\n      refetch();\n    },\n    update: (cache, mutationResult) => {\n      const diagnosis = mutationResult.data.saveFavoriteDiagnosis;\n\n      const data = cache.readQuery<Query>({\n        query: GET_DATA,\n      });\n\n      if (data !== null) {\n        cache.writeQuery({\n          query: GET_DATA,\n          data: {\n            favoriteDiagnosis: [...data.favoriteDiagnosis, diagnosis],\n          },\n        });\n      }\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [deleteFavoriteDiagnosis] = useMutation<\n    any,\n    MutationDeleteFavoriteDiagnosisArgs\n  >(DELETE_FAVORITE_DIAGNOSIS, {\n    onCompleted(data) {\n      refetch();\n    },\n    update: (cache, mutationResult) => {\n      const favoriteDiagnosisId = mutationResult.data.deleteFavoriteDiagnosis;\n\n      const data = cache.readQuery<Query>({\n        query: GET_DATA,\n      });\n\n      if (data !== null) {\n        const favoriteDiagnosis = data.favoriteDiagnosis.filter(\n          (e) => e?.id !== favoriteDiagnosisId\n        );\n\n        cache.writeQuery({\n          query: GET_DATA,\n          data: {\n            favoriteDiagnosis: favoriteDiagnosis,\n          },\n        });\n      }\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const handleNextClick = () => {\n    const totalPages = data?.diagnoses.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleItemClick = (diagnosis: Diagnosis | undefined) => {\n    if (diagnosis !== undefined) {\n      const location = diagnosisLocation.find(\n        (i) => i.diagnosisId === diagnosis.id\n      )?.location;\n\n      onItemClick(diagnosis.title, location ?? \"OU\");\n    }\n  };\n\n  const handleFavoriteClick = (item: Diagnosis | undefined) => {\n    if (item) {\n      if (favoriteIds.includes(item.id)) {\n        const favoriteDiagnosisId = data?.favoriteDiagnosis.find(\n          (e) => e?.diagnosisId === item.id\n        )?.id;\n\n        if (favoriteDiagnosisId)\n          deleteFavoriteDiagnosis({\n            variables: { id: favoriteDiagnosisId },\n          });\n      } else {\n        saveFavoriteDiagnosis({\n          variables: { diagnosisId: item.id },\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"overflow-x-scroll rounded-lg shadow-xl\">\n      <table className=\"w-full\">\n        <thead>\n          <tr>\n            <th\n              scope=\"col\"\n              colSpan={4}\n              className=\"px-4 py-2 bg-teal-700 text-left text-xs text-gray-50 uppercase tracking-wider\"\n            >\n              <div className=\"flex justify-between items-center\">\n                <p>Diagnosis list</p>\n                <div>\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowFavorites(!showFavorites)}\n                  >\n                    {showFavorites ? (\n                      <BookmarkSolidIcon className=\"h-5 w-5 text-white\" />\n                    ) : (\n                      <BookmarkOutlineIcon className=\"h-5 w-5 text-white\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n            </th>\n          </tr>\n          <tr>\n            <th colSpan={4}>\n              <input\n                type=\"search\"\n                name=\"search\"\n                id=\"diagnosis-search\"\n                placeholder=\"Search\"\n                className=\"w-full sm:text-md border-none\"\n                onChange={(evt) => setSearchTerm(evt.target.value.trim())}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200 p-2\">\n          {data?.diagnoses.edges.map((e) => (\n            <tr\n              key={e?.node.id}\n              className=\"hover:bg-gray-100 border-t cursor-pointer\"\n            >\n              <td className=\"pl-4 pt-1\">\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    !patientChartLocked[0] && handleFavoriteClick(e?.node)\n                  }\n                >\n                  {favoriteIds.includes(e?.node.id) ? (\n                    <StarSolidIcon className=\"h-5 w-5 text-teal-500\" />\n                  ) : (\n                    <StarOutlineIcon className=\"h-5 w-5 text-gray-500\" />\n                  )}\n                </button>\n              </td>\n              <td className=\"pl-4 text-sm font-light text-gray-900\">\n                {e?.node.title}\n              </td>\n              <td className=\"px-4 py-5 text-sm text-gray-900\">\n                <select\n                  name=\"location\"\n                  disabled={patientChartLocked[0]}\n                  className=\"border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                  onChange={(evt) => {\n                    const locationIndex = diagnosisLocation.findIndex(\n                      (i) => i.diagnosisId === e?.node.id\n                    );\n\n                    if (locationIndex === -1) {\n                      setDiagnosisLocation([\n                        { diagnosisId: e?.node.id, location: evt.target.value },\n                        ...diagnosisLocation,\n                      ]);\n                    } else {\n                      setDiagnosisLocation([\n                        ...diagnosisLocation.slice(0, locationIndex),\n                        Object.assign({}, diagnosisLocation[locationIndex], {\n                          location: evt.target.value,\n                        }),\n                      ]);\n                    }\n                  }}\n                >\n                  <option value={\"OU\"}>OU</option>\n                  <option value={\"OD\"}>OD</option>\n                  <option value={\"OS\"}>OS</option>\n                </select>\n              </td>\n              <td className=\"px-3\">\n                <span\n                  onClick={() =>\n                    !patientChartLocked[0] && handleItemClick(e?.node)\n                  }\n                  className=\"material-icons text-teal-700 transform hover:scale-110\"\n                >\n                  keyboard_arrow_right\n                </span>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <TablePagination\n        totalCount={data?.diagnoses.totalCount ?? 0}\n        onNext={handleNextClick}\n        onPrevious={handlePreviousClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OrderDiagnosticProcedureForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SlitLampExamComponent.tsx",["1246","1247"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { AUTO_SAVE_INTERVAL } from \"..\";\n\nimport corneaImage from \"./cornea.png\";\nimport irisImage from \"./iris.png\";\n\n// @ts-ignore\nimport { SketchField, Tools } from \"react-sketch\";\n\nimport { SketchTool } from \"../components/SketchTool\";\nimport { SlitLampExam, SlitLampExamInput } from \"../models/models\";\nimport AutocompleteInput from \"./AutocompleteInput\";\nimport IndexedDb from \"../_db\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\ninterface Props {\n  patientChartId: string | undefined;\n  values: SlitLampExam | undefined;\n  onSave: (input: SlitLampExamInput) => void;\n}\n\nexport const SlitLampExamComponent: React.FC<Props> = ({\n  values,\n  patientChartId,\n  onSave,\n}) => {\n  const [timer, setTimer] = useState<any>(null);\n  const { register, watch, reset, getValues, setValue, control } =\n    useForm<SlitLampExamInput>({\n      defaultValues: {\n        patientChartId: patientChartId,\n      },\n    });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  const rightCorneaSketch = useRef<any>(null);\n  const leftCorneaSketch = useRef<any>(null);\n\n  const rightLensSketch = useRef<any>(null);\n  const leftLensSketch = useRef<any>(null);\n\n  const [selectedColor, setSelectedColor] = useState(\"#000000\");\n  const [selectedLineWeight, setSelectedLineWeight] = useState(3);\n  const [showSketchTool, setShowSketchTool] = useState(false);\n\n  useEffect(() => {\n    if (values !== undefined) {\n      reset({\n        rightConjunctiva: values.rightConjunctiva ?? \"\",\n        leftConjunctiva: values.leftConjunctiva ?? \"\",\n        rightCornea: values.rightCornea ?? \"\",\n        leftCornea: values.leftCornea ?? \"\",\n        rightCorneaSketch: values.rightCorneaSketch ?? \"\",\n        leftCorneaSketch: values.leftCorneaSketch ?? \"\",\n        rightSclera: values.rightSclera ?? \"\",\n        leftSclera: values.leftSclera ?? \"\",\n        rightAnteriorChamber: values.rightAnteriorChamber ?? \"\",\n        leftAnteriorChamber: values.leftAnteriorChamber ?? \"\",\n        rightIris: values.rightIris ?? \"\",\n        leftIris: values.leftIris ?? \"\",\n        rightLens: values.rightLens ?? \"\",\n        leftLens: values.leftLens ?? \"\",\n        rightLensSketch: values.rightLensSketch ?? \"\",\n        leftLensSketch: values.leftLensSketch ?? \"\",\n        rightVitreos: values.rightVitreos ?? \"\",\n        leftVitreos: values.leftVitreos ?? \"\",\n        note: values.note ?? \"\",\n      });\n    }\n  }, [values]);\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChartId) {\n      const runIndexDb = async () => {\n        const slitLampExam: any = {\n          ...data,\n          patientChartId: patientChartId.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(slitLampExam, \"slit_lamp_exam\", patientChartId)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChartId]);\n\n  const handleSketchChange = () => {\n    clearTimeout(timer);\n\n    setTimer(\n      setTimeout(() => {\n        if (patientChartId !== undefined) {\n          const currentValues = getValues();\n\n          if (rightCorneaSketch.current !== null) {\n            currentValues.rightCorneaSketch = JSON.stringify(\n              rightCorneaSketch.current.toJSON()\n            );\n          }\n\n          if (leftCorneaSketch.current !== null) {\n            currentValues.leftCorneaSketch = JSON.stringify(\n              leftCorneaSketch.current.toJSON()\n            );\n          }\n\n          if (rightLensSketch.current !== null) {\n            currentValues.rightLensSketch = JSON.stringify(\n              rightLensSketch.current.toJSON()\n            );\n          }\n\n          if (leftLensSketch.current !== null) {\n            currentValues.leftLensSketch = JSON.stringify(\n              leftLensSketch.current.toJSON()\n            );\n          }\n\n          currentValues.patientChartId = patientChartId;\n\n          onSave(currentValues);\n        }\n      }, 2000)\n    );\n  };\n\n  return (\n    <div className=\"grid grid-cols-5 gap-y-6 gap-x-6 justify-items-stretch\">\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Conjuctiva</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightConjunctiva\"\n          uri=\"right_conjunctiva\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftConjunctiva\"\n          uri=\"left_conjunctiva\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-items-stretch text-center\">\n        <button\n          type=\"button\"\n          className=\"material-icons text-teal-700\"\n          onClick={() => setShowSketchTool(!showSketchTool)}\n        >\n          settings\n        </button>\n        <div className=\"relative z-20\" hidden={!showSketchTool}>\n          <div className=\"absolute right-0\">\n            <SketchTool\n              selectedColor={selectedColor}\n              selectedLineWeight={selectedLineWeight}\n              onColorChange={setSelectedColor}\n              onLineWeightChange={setSelectedLineWeight}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-span-2 justify-self-center\">\n        <div className=\"relative\">\n          <div className=\"static top-0 left-0\">\n            <img className=\"w-60 h-44\" src={corneaImage} alt=\"Right Cornea\" />\n          </div>\n          <div className=\"absolute top-0 left-0\">\n            <SketchField\n              ref={rightCorneaSketch}\n              tool={Tools.Pencil}\n              width=\"15rem\"\n              height=\"11rem\"\n              lineColor={selectedColor}\n              lineWidth={selectedLineWeight}\n              value={data?.rightCorneaSketch}\n              disabled={patientChartLocked[0]}\n              onChange={() => !patientChartLocked[0] && handleSketchChange()}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <div className=\"relative\">\n          <div className=\"static top-0 left-0\">\n            <img className=\"w-60 h-44\" src={corneaImage} alt=\"Left Cornea\" />\n          </div>\n          <div className=\"absolute top-0 left-0\">\n            <SketchField\n              ref={leftCorneaSketch}\n              tool={Tools.Pencil}\n              width=\"15rem\"\n              height=\"11rem\"\n              lineColor={selectedColor}\n              lineWidth={selectedLineWeight}\n              value={values?.leftCorneaSketch}\n              disabled={patientChartLocked[0]}\n              onChange={() => !patientChartLocked[0] && handleSketchChange()}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-span-1\">\n        <p className=\"text-gray-600 tracking-wide\"></p>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <button\n          className=\"text-gray-500 text-sm\"\n          onClick={() => {\n            setValue(\"rightCorneaSketch\", \"\");\n            rightCorneaSketch.current.clear();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <button\n          className=\"text-gray-500 text-sm\"\n          onClick={() => {\n            setValue(\"leftCorneaSketch\", \"\");\n            leftCorneaSketch.current.clear();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Cornea</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightCornea\"\n          uri=\"right_cornea\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftCornea\"\n          uri=\"left_cornea\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Sclera</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightSclera\"\n          uri=\"right_sclera\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftSclera\"\n          uri=\"left_sclera\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Anterior Chamber</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightAnteriorChamber\"\n          uri=\"right_anterior_chamber\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftAnteriorChamber\"\n          uri=\"left_anterior_chamber\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Iris</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightIris\"\n          uri=\"right_iris\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftIris\"\n          uri=\"left_iris\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <button\n          type=\"button\"\n          className=\"material-icons text-teal-700\"\n          onClick={() => setShowSketchTool(!showSketchTool)}\n        >\n          settings\n        </button>\n        <div className=\"relative z-20\" hidden={!showSketchTool}>\n          <div className=\"absolute right-0\">\n            <SketchTool\n              selectedColor={selectedColor}\n              selectedLineWeight={selectedLineWeight}\n              onColorChange={setSelectedColor}\n              onLineWeightChange={setSelectedLineWeight}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <div className=\"relative\">\n          <div className=\"static top-0 left-0\">\n            <img className=\"h-44 w-56\" src={irisImage} alt=\"Right Lens\" />\n          </div>\n          <div className=\"absolute top-0 left-0\">\n            <SketchField\n              ref={rightLensSketch}\n              tool={Tools.Pencil}\n              width=\"14rem\"\n              height=\"11rem\"\n              lineColor={selectedColor}\n              lineWidth={selectedLineWeight}\n              value={values?.rightLensSketch}\n              onChange={() => !patientChartLocked[0] && handleSketchChange()}\n              disabled={patientChartLocked[0]}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <div className=\"relative\">\n          <div className=\"static top-0 left-0\">\n            <img className=\"w-56 h-44\" src={irisImage} alt=\"Left Lens\" />\n          </div>\n          <div className=\"absolute top-0 left-0\">\n            <SketchField\n              ref={leftLensSketch}\n              tool={Tools.Pencil}\n              width=\"14rem\"\n              height=\"11rem\"\n              lineColor={selectedColor}\n              lineWidth={selectedLineWeight}\n              value={values?.leftLensSketch}\n              onChange={() => !patientChartLocked[0] && handleSketchChange()}\n              disabled={patientChartLocked[0]}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-span-1\">\n        <p className=\"text-gray-600 tracking-wide\"></p>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <button\n          className=\"text-gray-500 text-sm\"\n          onClick={() => {\n            setValue(\"rightLensSketch\", \"\");\n            rightLensSketch.current.clear();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <button\n          className=\"text-gray-500 text-sm\"\n          onClick={() => {\n            setValue(\"leftLensSketch\", \"\");\n            leftLensSketch.current.clear();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Lens</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightLens\"\n          uri=\"right_lens\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftLens\"\n          uri=\"left_lens\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Vitreos</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightVitreos\"\n          uri=\"right_vitreos\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftVitreos\"\n          uri=\"left_vitreos\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-500 tracking-wide\">Note</p>\n      </div>\n      <div className=\"col-span-4\">\n        <textarea\n          name=\"note\"\n          ref={register}\n          rows={3}\n          className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n        />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/PupilsComponent.tsx",["1248","1249"],"import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport IndexedDb from \"../_db\";\nimport { Pupils, PupilsInput } from \"../models/models\";\nimport AutocompleteInput from \"./AutocompleteInput\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\ninterface Props {\n  patientChartId: string | undefined;\n  values: Pupils | undefined;\n}\n\nexport const PupilsComponent: React.FC<Props> = ({\n  values,\n  patientChartId,\n}) => {\n  const { register, reset, watch, control, setValue } = useForm<PupilsInput>({\n    defaultValues: {\n      patientChartId: patientChartId,\n    },\n  });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    if (values !== undefined) {\n      reset({\n        rightPupils: values.rightPupils ?? \"\",\n        leftPupils: values.leftPupils ?? \"\",\n        note: values.note ?? \"\",\n      });\n    }\n  }, [values]);\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChartId) {\n      const runIndexDb = async () => {\n        const pupils: any = {\n          ...data,\n          patientChartId: patientChartId.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(pupils, \"pupils\", patientChartId)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChartId]);\n\n  return (\n    <div className=\"grid grid-cols-5 gap-y-6 gap-x-6 justify-items-stretch\">\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Pupils</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightPupils\"\n          uri=\"right_pupils\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftPupils\"\n          uri=\"left_pupils\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Note</p>\n      </div>\n      <div className=\"col-span-4\">\n        <textarea\n          name=\"note\"\n          ref={register}\n          rows={3}\n          disabled={patientChartLocked[0]}\n          className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md  w-full\"\n        />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OpticDiscComponent.tsx",["1250","1251"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { AUTO_SAVE_INTERVAL } from \"..\";\n\nimport circleImage from \"../img/circle.png\";\n\n// @ts-ignore\nimport { SketchField, Tools } from \"react-sketch\";\n\nimport { SketchTool } from \"../components/SketchTool\";\nimport { OpticDisc, OpticDiscInput } from \"../models/models\";\nimport AutocompleteInput from \"./AutocompleteInput\";\nimport IndexedDb from \"../_db\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\ninterface Props {\n  patientChartId: string | undefined;\n  values: OpticDisc | undefined;\n  onSave: (input: OpticDiscInput) => void;\n}\n\nconst cdrValues = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0];\n\nexport const OpticDiscComponent: React.FC<Props> = ({\n  values,\n  patientChartId,\n  onSave,\n}) => {\n  const [timer, setTimer] = useState<any>(null);\n  const { register, watch, reset, getValues, setValue, control } =\n    useForm<OpticDiscInput>({\n      defaultValues: {\n        patientChartId: patientChartId,\n      },\n    });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  const rightOpticDiscSketch = useRef<any>(null);\n  const leftOpticDiscSketch = useRef<any>(null);\n\n  const [selectedColor, setSelectedColor] = useState(\"#000000\");\n  const [selectedLineWeight, setSelectedLineWeight] = useState(3);\n  const [showSketchTool, setShowSketchTool] = useState(false);\n\n  useEffect(() => {\n    if (values !== undefined) {\n      reset({\n        rightCdr: values.rightCdr ?? \"\",\n        leftCdr: values.leftCdr ?? \"\",\n        rightOpticDisc: values.rightOpticDisc ?? \"\",\n        leftOpticDisc: values.leftOpticDisc ?? \"\",\n        rightOpticDiscSketch: values.rightOpticDiscSketch,\n        leftOpticDiscSketch: values.leftOpticDiscSketch,\n        note: values.note ?? \"\",\n      });\n    }\n  }, [values]);\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChartId) {\n      const runIndexDb = async () => {\n        const opticDisc: any = {\n          ...data,\n          patientChartId: patientChartId.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(opticDisc, \"optic_disc\", patientChartId)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChartId]);\n\n  const handleSketchChange = () => {\n    clearTimeout(timer);\n\n    setTimer(\n      setTimeout(() => {\n        if (patientChartId !== undefined) {\n          const currentValues = getValues();\n\n          if (rightOpticDiscSketch.current !== null) {\n            currentValues.rightOpticDiscSketch = JSON.stringify(\n              rightOpticDiscSketch.current.toJSON()\n            );\n          }\n\n          if (leftOpticDiscSketch.current !== null) {\n            currentValues.leftOpticDiscSketch = JSON.stringify(\n              leftOpticDiscSketch.current.toJSON()\n            );\n          }\n\n          currentValues.patientChartId = patientChartId;\n\n          onSave(currentValues);\n        }\n      }, 2000)\n    );\n  };\n\n  return (\n    <div className=\"grid grid-cols-5 gap-y-6 gap-x-6 justify-items-stretch\">\n      <div className=\"col-span-1 justify-items-stretch text-center\">\n        <button\n          type=\"button\"\n          className=\"material-icons text-teal-700\"\n          onClick={() => setShowSketchTool(!showSketchTool)}\n        >\n          settings\n        </button>\n        <div className=\"relative z-20\" hidden={!showSketchTool}>\n          <div className=\"absolute right-0\">\n            <SketchTool\n              selectedColor={selectedColor}\n              selectedLineWeight={selectedLineWeight}\n              onColorChange={setSelectedColor}\n              onLineWeightChange={setSelectedLineWeight}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-span-2 justify-self-center\">\n        <div className=\"relative\">\n          <div className=\"static top-0 left-0\">\n            <img className=\"w-60 h-52\" src={circleImage} alt=\"Right Retina\" />\n          </div>\n          <div className=\"absolute top-0 left-0\">\n            <SketchField\n              ref={rightOpticDiscSketch}\n              tool={Tools.Pencil}\n              width=\"15rem\"\n              height=\"13rem\"\n              lineColor={selectedColor}\n              lineWidth={selectedLineWeight}\n              value={data?.rightOpticDiscSketch}\n              onChange={() => !patientChartLocked[0] && handleSketchChange()}\n              disabled={patientChartLocked[0]}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <div className=\"relative\">\n          <div className=\"static top-0 left-0\">\n            <img className=\"w-60 h-52\" src={circleImage} alt=\"Left Retina\" />\n          </div>\n          <div className=\"absolute top-0 left-0\">\n            <SketchField\n              ref={leftOpticDiscSketch}\n              tool={Tools.Pencil}\n              width=\"15rem\"\n              height=\"13rem\"\n              lineColor={selectedColor}\n              lineWidth={selectedLineWeight}\n              value={values?.leftOpticDiscSketch}\n              onChange={() => !patientChartLocked[0] && handleSketchChange()}\n              disabled={patientChartLocked[0]}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-span-1\">\n        <p className=\"text-gray-600 tracking-wide\"></p>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <button\n          className=\"text-gray-500 text-sm\"\n          onClick={() => {\n            setValue(\"rightOpticDiscSketch\", \"\");\n            rightOpticDiscSketch.current.clear();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <button\n          className=\"text-gray-500 text-sm\"\n          onClick={() => {\n            setValue(\"leftOpticDiscSketch\", \"\");\n            leftOpticDiscSketch.current.clear();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">CDR</p>\n      </div>\n      <div className=\"col-span-2\">\n        <select\n          name=\"rightCdr\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n        >\n          {cdrValues.map((e) => (\n            <option key={e} value={e}>\n              {e}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"col-span-2\">\n        <select\n          name=\"leftCdr\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n        >\n          {cdrValues.map((e) => (\n            <option key={e} value={e}>\n              {e}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Optic Disc</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightOpticDisc\"\n          uri=\"right_optic_disc\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftOpticDisc\"\n          uri=\"left_optic_disc\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-500 tracking-wide\">Note</p>\n      </div>\n      <div className=\"col-span-4\">\n        <textarea\n          name=\"note\"\n          ref={register}\n          rows={3}\n          disabled={patientChartLocked[0]}\n          className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n        />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/FunduscopyComponent.tsx",["1252"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport circleImage from \"../img/circle.png\";\n\n// @ts-ignore\nimport { SketchField, Tools } from \"react-sketch\";\n\nimport { SketchTool } from \"../components/SketchTool\";\nimport { Funduscopy, FunduscopyInput } from \"../models/models\";\nimport AutocompleteInput from \"./AutocompleteInput\";\nimport IndexedDb from \"../_db\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\ninterface Props {\n  patientChartId: string | undefined;\n  values: Funduscopy | undefined;\n  onSave: (input: FunduscopyInput) => void;\n}\n\nexport const FunduscopyComponent: React.FC<Props> = ({\n  values,\n  patientChartId,\n  onSave,\n}) => {\n  const [timer, setTimer] = useState<any>(null);\n  const { register, watch, reset, getValues, setValue, control } =\n    useForm<FunduscopyInput>({\n      defaultValues: {\n        patientChartId: patientChartId,\n      },\n    });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  const rightRetinaSketch = useRef<any>(null);\n  const leftRetinaSketch = useRef<any>(null);\n\n  const [selectedColor, setSelectedColor] = useState(\"#000000\");\n  const [selectedLineWeight, setSelectedLineWeight] = useState(3);\n  const [showSketchTool, setShowSketchTool] = useState(false);\n\n  useEffect(() => {\n    if (values !== undefined) {\n      reset({\n        rightRetina: values.rightRetina ?? \"\",\n        leftRetina: values.leftRetina ?? \"\",\n        rightRetinaSketch: values.rightRetinaSketch ?? \"\",\n        leftRetinaSketch: values.leftRetinaSketch ?? \"\",\n        note: values.note ?? \"\",\n      });\n    }\n  }, [values]);\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChartId) {\n      const runIndexDb = async () => {\n        const funduscopy: any = {\n          ...data,\n          patientChartId: patientChartId.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(funduscopy, \"funduscopy\", patientChartId)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChartId]);\n\n  const handleSketchChange = () => {\n    clearTimeout(timer);\n\n    setTimer(\n      setTimeout(() => {\n        if (patientChartId !== undefined) {\n          const currentValues = getValues();\n\n          if (rightRetinaSketch.current !== null) {\n            currentValues.rightRetinaSketch = JSON.stringify(\n              rightRetinaSketch.current.toJSON()\n            );\n          }\n\n          if (leftRetinaSketch.current !== null) {\n            currentValues.leftRetinaSketch = JSON.stringify(\n              leftRetinaSketch.current.toJSON()\n            );\n          }\n\n          currentValues.patientChartId = patientChartId;\n\n          onSave(currentValues);\n        }\n      }, 2000)\n    );\n  };\n\n  return (\n    <div className=\"grid grid-cols-5 gap-y-6 gap-x-6 justify-items-stretch\">\n      <div className=\"col-span-1 text-center\">\n        <button\n          type=\"button\"\n          className=\"material-icons text-teal-700\"\n          onClick={() => setShowSketchTool(!showSketchTool)}\n        >\n          settings\n        </button>\n        <div className=\"relative z-20\" hidden={!showSketchTool}>\n          <div className=\"absolute right-0\">\n            <SketchTool\n              selectedColor={selectedColor}\n              selectedLineWeight={selectedLineWeight}\n              onColorChange={setSelectedColor}\n              onLineWeightChange={setSelectedLineWeight}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-span-2 justify-self-center\">\n        <div className=\"relative\">\n          <div className=\"static top-0 left-0\">\n            <img className=\"w-60 h-52\" src={circleImage} alt=\"Right Retina\" />\n          </div>\n          <div className=\"absolute top-0 left-0\">\n            <SketchField\n              ref={rightRetinaSketch}\n              tool={Tools.Pencil}\n              width=\"15rem\"\n              height=\"13rem\"\n              lineColor={selectedColor}\n              lineWidth={selectedLineWeight}\n              value={data?.rightRetinaSketch}\n              onChange={() => !patientChartLocked[0] && handleSketchChange()}\n              disabled={patientChartLocked[0]}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <div className=\"relative\">\n          <div className=\"static top-0 left-0\">\n            <img className=\"w-60 h-52\" src={circleImage} alt=\"Left Retina\" />\n          </div>\n          <div className=\"absolute top-0 left-0\">\n            <SketchField\n              ref={leftRetinaSketch}\n              tool={Tools.Pencil}\n              width=\"15rem\"\n              height=\"13rem\"\n              lineColor={selectedColor}\n              lineWidth={selectedLineWeight}\n              value={values?.leftRetinaSketch}\n              onChange={() => !patientChartLocked[0] && handleSketchChange()}\n              disabled={patientChartLocked[0]}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-span-1\">\n        <p className=\"text-gray-600 tracking-wide\"></p>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <button\n          className=\"text-gray-500 text-sm\"\n          onClick={() => {\n            setValue(\"rightRetinaSketch\", \"\");\n            rightRetinaSketch.current.clear();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n      <div className=\"col-span-2 justify-self-center\">\n        <button\n          className=\"text-gray-500 text-sm\"\n          onClick={() => {\n            setValue(\"leftRetinaSketch\", \"\");\n            leftRetinaSketch.current.clear();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Retina</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightRetina\"\n          uri=\"right_retina\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftRetina\"\n          uri=\"left_retina\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-500 tracking-wide\">Note</p>\n      </div>\n      <div className=\"col-span-4\">\n        <textarea\n          name=\"note\"\n          ref={register}\n          rows={3}\n          disabled={patientChartLocked[0]}\n          className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n        />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateLifestyleForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/ExternalExamComponent.tsx",["1253"],"import React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport IndexedDb from \"../_db\";\nimport { ExternalExam, ExternalExamInput } from \"../models/models\";\nimport AutocompleteInput from \"./AutocompleteInput\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\ninterface Props {\n  patientChartId: string | undefined;\n  values: ExternalExam | undefined;\n}\n\nexport const ExternalExamComponent: React.FC<Props> = ({\n  values,\n  patientChartId,\n}) => {\n  const { register, reset, control, watch, setValue } =\n    useForm<ExternalExamInput>({\n      defaultValues: {\n        patientChartId: patientChartId,\n      },\n    });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    if (values !== undefined) {\n      reset({\n        rightOrbits: values.rightOrbits ?? \"\",\n        leftOrbits: values.leftOrbits ?? \"\",\n        rightLids: values.rightLids ?? \"\",\n        leftLids: values.leftLids ?? \"\",\n        rightLacrimalSystem: values.rightLacrimalSystem ?? \"\",\n        leftLacrimalSystem: values.leftLacrimalSystem ?? \"\",\n        note: values.note ?? \"\",\n      });\n    }\n  }, [values]);\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChartId) {\n      const runIndexDb = async () => {\n        const externalExam: any = {\n          ...data,\n          patientChartId: patientChartId.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(externalExam, \"external_exam\", patientChartId)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChartId]);\n\n  return (\n    <div className=\"grid grid-cols-5 gap-y-6 gap-x-6 justify-items-stretch\">\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Orbits</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightOrbits\"\n          uri=\"right_orbits\"\n          register={register}\n          control={control}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftOrbits\"\n          uri=\"left_orbits\"\n          control={control}\n          register={register}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Lids</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightLids\"\n          uri=\"right_lids\"\n          control={control}\n          register={register}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftLids\"\n          uri=\"left_lids\"\n          control={control}\n          register={register}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Lacrimal System</p>\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"rightLacrimalSystem\"\n          uri=\"right_lacrimal_system\"\n          control={control}\n          register={register}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n      <div className=\"col-span-2\">\n        <AutocompleteInput\n          type=\"text\"\n          name=\"leftLacrimalSystem\"\n          uri=\"left_lacrimal_system\"\n          control={control}\n          register={register}\n          setFormValue={setValue}\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Note</p>\n      </div>\n      <div className=\"col-span-4\">\n        <textarea\n          name=\"note\"\n          ref={register}\n          rows={3}\n          className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n          disabled={patientChartLocked[0]}\n        />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdateFamilyIllnessForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdatePastSurgeryForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SavePastSurgeryForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdatePastInjuryForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SavePastInjuryForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SavePastHospitalizationForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/UpdatePastIllnessForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/OtherVitalsForm.tsx",["1254"],"import React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport IndexedDb from \"../_db\";\nimport { PatientChart } from \"../models/models\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\ninterface Props {\n  patientChartId: string | undefined;\n  values: PatientChart | undefined;\n}\n\nexport const OtherVitalsForm: React.FC<Props> = ({\n  patientChartId,\n  values,\n}) => {\n  const { register, reset, watch } = useForm<PatientChart>({\n    defaultValues: {\n      id: patientChartId,\n    },\n  });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    if (values !== undefined) {\n      reset(values);\n    }\n  }, [values]);\n\n  const data = watch();\n\n  useEffect(() => {\n    if (patientChartId) {\n      const runIndexDb = async () => {\n        const patientChart: any = {\n          ...data,\n          patientChartId: patientChartId.toString(),\n        };\n\n        const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n        await indexedDb.open();\n\n        indexedDb\n          .putSyncValue(patientChart, \"patient_chart\", patientChartId)\n          .catch((error) => console.log(error));\n      };\n      runIndexDb();\n    }\n  }, [data, patientChartId]);\n\n  return (\n    <div className=\"grid grid-cols-5 justify-items-stretch\">\n      <div className=\"col-span-1 justify-self-center\">\n        <p className=\"text-gray-600 tracking-wide\">Blood Pressure</p>\n      </div>\n      <div className=\"col-span-4\">\n        <input\n          type=\"text\"\n          name=\"bloodPressure\"\n          ref={register}\n          disabled={patientChartLocked[0]}\n          className=\"p-1 pl-4 sm:text-md w-full border-gray-300 border rounded-md\"\n        />\n      </div>\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/LabComponent.tsx",["1255","1256","1257"],"import { gql, useMutation } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { AUTO_SAVE_INTERVAL } from \"..\";\nimport {\n  FileUploader,\n  FileUploaderComponent,\n} from \"../components/FileUploaderComponent\";\nimport {\n  Lab,\n  LabUpdateInput,\n  MutationUpdateLabArgs,\n  MutationUpdateOrderArgs,\n  MutationDeleteLabRightEyeImageArgs,\n  MutationDeleteLabLeftEyeImageArgs,\n  MutationDeleteLabDocumentArgs,\n  FileUpload,\n  LabStatus,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\nconst UPDATE_LAB = gql`\n  mutation UpdateLab($input: LabUpdateInput!) {\n    updateLab(input: $input) {\n      id\n    }\n  }\n`;\n\nconst UPDATE_ORDER = gql`\n  mutation UpdateOrder($input: OrderUpdateInput!) {\n    updateOrder(input: $input) {\n      id\n    }\n  }\n`;\n\nconst DELETE_LAB_RIGHT_EYE_IMAGE = gql`\n  mutation DeleteLabRightEyeImage($input: LabDeleteFileInput!) {\n    deleteLabRightEyeImage(input: $input)\n  }\n`;\n\nconst DELETE_LAB_LEFT_EYE_IMAGE = gql`\n  mutation DeleteLabLeftEyeImage($input: LabDeleteFileInput!) {\n    deleteLabLeftEyeImage(input: $input)\n  }\n`;\n\nconst DELETE_LAB_RIGHT_EYE_SKETCH = gql`\n  mutation DeleteLabRightEyeSketch($input: LabDeleteFileInput!) {\n    deleteLabRightEyeSketch(input: $input)\n  }\n`;\n\nconst DELETE_LAB_LEFT_EYE_SKETCH = gql`\n  mutation DeleteLabLeftEyeSketch($input: LabDeleteFileInput!) {\n    deleteLabLeftEyeSketch(input: $input)\n  }\n`;\n\nconst DELETE_LAB_DOCUMENT = gql`\n  mutation DeleteLabDocument($input: LabDeleteFileInput!) {\n    deleteLabDocument(input: $input)\n  }\n`;\n\ninterface LabComponentProps {\n  values: Lab | undefined;\n  onRefresh: () => void;\n}\n\nexport const LabComponent: React.FC<LabComponentProps> = ({\n  values,\n  onRefresh,\n}) => {\n  const notifDispatch = useNotificationDispatch();\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  const hasOptImages =\n    (values?.rightEyeImages.length ?? 0) > 0 ||\n    (values?.leftEyeImages.length ?? 0) > 0;\n\n  const hasDocuments = (values?.documents.length ?? 0) > 0;\n  const hasTextArea =\n    (values?.rightEyeText?.length ?? 0) > 0 ||\n    (values?.leftEyeText?.length ?? 0) > 0 ||\n    (values?.generalText?.length ?? 0) > 0;\n\n  const [sectionExpand, setSectionExpand] = useState<any>({\n    imagery: hasOptImages,\n    documents: hasDocuments,\n    textArea: hasTextArea,\n  });\n\n  const [timer, setTimer] = useState<any>(null);\n  const { register, getValues } = useForm<LabUpdateInput>({\n    defaultValues: {\n      rightEyeText: values?.rightEyeText,\n      leftEyeText: values?.leftEyeText,\n      generalText: values?.generalText,\n    },\n  });\n\n  const defaultOdFiles: Array<FileUploader> =\n    values?.rightEyeImages.map((e) => ({\n      id: e?.id,\n      fileUrl: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/files/${e?.fileName}_${e?.hash}.${e?.extension}`,\n      name: e?.fileName ?? \"\",\n      size: e?.size,\n      createdAt: e?.createdAt,\n      contentType: e?.contentType ?? \"\",\n    })) ?? [];\n\n  const defaultOsFiles: Array<FileUploader> =\n    values?.leftEyeImages.map((e) => ({\n      id: e?.id,\n      fileUrl: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/files/${e?.fileName}_${e?.hash}.${e?.extension}`,\n      name: e?.fileName ?? \"\",\n      size: e?.size,\n      createdAt: e?.createdAt,\n      contentType: e?.contentType ?? \"\",\n    })) ?? [];\n\n  const defaultDocuments: Array<FileUploader> =\n    values?.documents.map((e) => ({\n      id: e?.id,\n      fileUrl: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/files/${e?.fileName}_${e?.hash}.${e?.extension}`,\n      name: e?.fileName ?? \"\",\n      size: e?.size,\n      createdAt: e?.createdAt,\n      contentType: e?.contentType ?? \"\",\n    })) ?? [];\n\n  const [odFiles, setOdFiles] = useState<Array<FileUploader>>(defaultOdFiles);\n  const [osFiles, setOsFiles] = useState<Array<FileUploader>>(defaultOsFiles);\n  const [documents, setDocuments] =\n    useState<Array<FileUploader>>(defaultDocuments);\n\n  const [updateLab] = useMutation<any, MutationUpdateLabArgs>(UPDATE_LAB, {\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  const [updateLabStatus] = useMutation<any, MutationUpdateLabArgs>(\n    UPDATE_LAB,\n    {\n      onCompleted(data) {\n        onRefresh();\n\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Lab marked as done\",\n          variant: \"success\",\n        });\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [updateOrder] = useMutation<any, MutationUpdateOrderArgs>(\n    UPDATE_ORDER,\n    {\n      onCompleted(data) {\n        onRefresh();\n\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Lab order marked as done\",\n          variant: \"success\",\n        });\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteOdFile] = useMutation<any, MutationDeleteLabRightEyeImageArgs>(\n    DELETE_LAB_RIGHT_EYE_IMAGE,\n    {\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteOsFile] = useMutation<any, MutationDeleteLabLeftEyeImageArgs>(\n    DELETE_LAB_LEFT_EYE_IMAGE,\n    {\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const [deleteDocument] = useMutation<any, MutationDeleteLabDocumentArgs>(\n    DELETE_LAB_DOCUMENT,\n    {\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    }\n  );\n\n  const handleOdFilesChange = (change: Array<FileUploader>) => {\n    setOdFiles([...change, ...odFiles]);\n\n    const files: Array<FileUpload> = change\n      .filter((e) => e.fileObject !== undefined)\n      .map((e) => ({\n        file: e.fileObject,\n        name: e.name,\n      }));\n\n    if (values?.id !== undefined && files.length > 0) {\n      updateLab({\n        variables: {\n          input: {\n            id: values?.id,\n            rightEyeImages: files,\n          },\n        },\n      });\n    }\n  };\n\n  const handleOsFilesChange = (change: Array<FileUploader>) => {\n    setOsFiles([...change, ...osFiles]);\n\n    const files: Array<FileUpload> = change\n      .filter((e) => e.fileObject !== undefined)\n      .map((e) => ({\n        file: e.fileObject,\n        name: e.name,\n      }));\n\n    if (values?.id !== undefined && files.length > 0) {\n      updateLab({\n        variables: {\n          input: {\n            id: values?.id,\n            leftEyeImages: files,\n          },\n        },\n      });\n    }\n  };\n\n  const handleDocumentsChange = (change: Array<FileUploader>) => {\n    setDocuments([...change, ...documents]);\n\n    const files: Array<FileUpload> = change\n      .filter((e) => e.fileObject !== undefined)\n      .map((e) => ({\n        file: e.fileObject,\n        name: e.name,\n      }));\n\n    if (values?.id !== undefined && files.length > 0) {\n      updateLab({\n        variables: {\n          input: {\n            id: values?.id,\n            documents: files,\n          },\n        },\n      });\n    }\n  };\n\n  const handleOdDelete = (index: number) => {\n    const file = odFiles.find((_, i) => i === index);\n    setOdFiles(odFiles.filter((_, i) => i !== index));\n\n    if (file?.id !== undefined && values?.id !== undefined) {\n      deleteOdFile({\n        variables: {\n          input: {\n            labId: values?.id,\n            fileId: file.id,\n          },\n        },\n      });\n    }\n  };\n\n  const handleOsDelete = (index: number) => {\n    const file = osFiles.find((_, i) => i === index);\n    setOsFiles(osFiles.filter((_, i) => i !== index));\n\n    if (file?.id !== undefined && values?.id !== undefined) {\n      deleteOsFile({\n        variables: {\n          input: {\n            labId: values?.id,\n            fileId: file.id,\n          },\n        },\n      });\n    }\n  };\n\n  const handleDocumentDelete = (index: number) => {\n    const file = documents.find((_, i) => i === index);\n    setDocuments(documents.filter((_, i) => i !== index));\n\n    if (file?.id !== undefined && values?.id !== undefined) {\n      deleteDocument({\n        variables: {\n          input: {\n            labId: values?.id,\n            fileId: file.id,\n          },\n        },\n      });\n    }\n  };\n\n  const handleTextChange = () => {\n    clearTimeout(timer);\n\n    setTimer(\n      setTimeout(() => {\n        if (values?.id !== undefined) {\n          const data = getValues();\n          data.id = values.id;\n\n          updateLab({\n            variables: {\n              input: data,\n            },\n          });\n        }\n      }, AUTO_SAVE_INTERVAL)\n    );\n  };\n\n  const handleMarkAsDone = () => {\n    if (values?.id) {\n      updateLabStatus({\n        variables: {\n          input: {\n            id: values?.id,\n            status: LabStatus.Completed,\n          },\n        },\n      });\n    }\n  };\n\n  return (\n    <div className=\"p-4 bg-gray-50 shadow-inner rounded-lg\">\n      {!values?.payments.every((e) => e.status === \"PAID\") ? (\n        <div className=\"mt-5 flex h-32 rounded-sm\">\n          <div className=\"m-auto flex space-x-1 text-gray-500\">\n            <div className=\"material-icons\">money_off</div>\n            <p className=\"text-center\">Not paid for</p>\n          </div>\n        </div>\n      ) : (\n        <form>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div className=\"col-span-2\">\n              <div\n                className=\"flex justify-between items-center cursor-pointer\"\n                onClick={() =>\n                  setSectionExpand({\n                    ...sectionExpand,\n                    imagery: !sectionExpand.imagery,\n                  })\n                }\n              >\n                <p className=\"text-gray-700 text-lg font-light\">Imagery</p>\n                <p className=\"material-icons\">\n                  {sectionExpand.imagery ? \"expand_less\" : \"expand_more\"}\n                </p>\n              </div>\n              <hr />\n            </div>\n\n            <div hidden={!sectionExpand.imagery} className=\"col-span-2\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  OD\n                </label>\n                <FileUploaderComponent\n                  multiSelect={true}\n                  accept={\"image\"}\n                  values={odFiles}\n                  onChange={handleOdFilesChange}\n                  onDelete={handleOdDelete}\n                  disabled={patientChartLocked[0]}\n                />\n              </div>\n\n              <div className=\"mt-3\">\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  OS\n                </label>\n                <FileUploaderComponent\n                  multiSelect={true}\n                  accept={\"image\"}\n                  values={osFiles}\n                  onChange={handleOsFilesChange}\n                  onDelete={handleOsDelete}\n                  disabled={patientChartLocked[0]}\n                />\n              </div>\n            </div>\n\n            <div className=\"col-span-2 mt-2\">\n              <div\n                className=\"flex justify-between items-center cursor-pointer\"\n                onClick={() =>\n                  setSectionExpand({\n                    ...sectionExpand,\n                    documents: !sectionExpand.documents,\n                  })\n                }\n              >\n                <p className=\"text-gray-700 text-lg font-light\">Documents</p>\n                <p className=\"material-icons\">\n                  {sectionExpand.documents ? \"expand_less\" : \"expand_more\"}\n                </p>\n              </div>\n              <hr />\n            </div>\n\n            <div hidden={!sectionExpand.documents} className=\"col-span-2\">\n              <FileUploaderComponent\n                multiSelect={true}\n                accept={\"document\"}\n                values={documents}\n                onChange={handleDocumentsChange}\n                onDelete={handleDocumentDelete}\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n\n            <div className=\"col-span-2 mt-2\">\n              <div\n                className=\"flex justify-between items-center cursor-pointer\"\n                onClick={() =>\n                  setSectionExpand({\n                    ...sectionExpand,\n                    textArea: !sectionExpand.textArea,\n                  })\n                }\n              >\n                <p className=\"text-gray-700 text-lg font-light\">Text Area</p>\n                <p className=\"material-icons\">\n                  {sectionExpand.textArea ? \"expand_less\" : \"expand_more\"}\n                </p>\n              </div>\n              <hr />\n            </div>\n\n            <div hidden={!sectionExpand.textArea}>\n              <input\n                type=\"text\"\n                name=\"rightEyeText\"\n                placeholder=\"OD\"\n                ref={register}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                onChange={handleTextChange}\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n\n            <div hidden={!sectionExpand.textArea}>\n              <input\n                type=\"text\"\n                name=\"leftEyeText\"\n                placeholder=\"OS\"\n                ref={register}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                onChange={handleTextChange}\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n\n            <div hidden={!sectionExpand.textArea} className=\"col-span-2\">\n              <textarea\n                rows={3}\n                name=\"generalText\"\n                placeholder=\"Free text area\"\n                ref={register}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                onChange={handleTextChange}\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n\n            <div className=\"col-span-2 text-center\">\n              {values?.status !== LabStatus.Completed && (\n                <button\n                  type=\"button\"\n                  className=\"border border-teal-500 w-full text-teal-700 rounded-md p-1 flex justify-center space-x-2 hover:bg-teal-600 hover:text-white\"\n                  onClick={handleMarkAsDone}\n                >\n                  <p className=\"material-icons\">check</p>\n                  <p>Mark as Done</p>\n                </button>\n              )}\n            </div>\n          </div>\n        </form>\n      )}\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/LabTypes.tsx",["1258"],"import { gql, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { TablePagination } from \"../components/table_pagination\";\nimport {\n  LabType,\n  PaginationInput,\n  Query,\n  QueryLabTypesArgs,\n} from \"../models/models\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\nconst LAB_TYPES = gql`\n  query LabTypes($page: PaginationInput!, $searchTerm: String) {\n    labTypes(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          active\n          billings {\n            id\n            item\n            code\n            price\n          }\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nexport const LabTypesComponent: React.FC<{\n  onItemClick: (item: LabType) => void;\n}> = ({ onItemClick }) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryLabTypesArgs>(LAB_TYPES, {\n    variables: { page: paginationInput, searchTerm },\n  });\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput, searchTerm]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.labTypes.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleItemClick = (item: LabType | undefined) => {\n    if (item !== undefined) {\n      onItemClick(item);\n    }\n  };\n\n  return (\n    <div className=\"overflow-hidden rounded-lg shadow-xl\">\n      <table className=\"w-full\">\n        <thead>\n          <tr>\n            <th\n              scope=\"col\"\n              colSpan={2}\n              className=\"px-4 py-2 bg-teal-700 text-left text-xs text-gray-50 uppercase tracking-wider\"\n            >\n              Labs List\n            </th>\n          </tr>\n          <tr>\n            <th colSpan={2}>\n              <input\n                type=\"search\"\n                name=\"search\"\n                placeholder=\"Search\"\n                className=\"w-full sm:text-md border-none\"\n                onChange={(evt) => setSearchTerm(evt.target.value.trim())}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200 p-1\">\n          {data?.labTypes.edges.map((e) => (\n            <tr\n              key={e?.node.id}\n              onClick={() => !patientChartLocked[0] && handleItemClick(e?.node)}\n              className=\"hover:bg-gray-100 border-t cursor-pointer\"\n            >\n              <td className=\"px-6 py-5 whitespace-nowrap text-sm text-gray-900\">\n                {e?.node.title}\n              </td>\n              <td className=\"p-2\">\n                <span className=\"material-icons\">keyboard_arrow_right</span>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <TablePagination\n        totalCount={data?.labTypes.totalCount ?? 0}\n        onNext={handleNextClick}\n        onPrevious={handlePreviousClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/DiagnosticProcedureComponent.tsx",["1259","1260","1261","1262"],"import { gql, useMutation } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  FileUploader,\n  FileUploaderComponent,\n} from \"../components/FileUploaderComponent\";\nimport RefractionDistanceComponent from \"../components/RefractionDistanceForm\";\nimport RefractionNearComponent from \"../components/RefractionNearForm\";\nimport {\n  MutationUpdateDiagnosticProcedureArgs,\n  MutationDeleteDiagnosticRightEyeImageArgs,\n  MutationDeleteDiagnosticLeftEyeImageArgs,\n  MutationDeleteDiagnosticDocumentArgs,\n  FileUpload,\n  DiagnosticProcedure,\n  DiagnosicProcedureStatus,\n  DiagnosticProcedureUpdateInput,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\nimport IndexedDb from \"../_db\";\n\nconst UPDATE_DIAGNOSTIC_PROCEDURE = gql`\n  mutation UpdateDiagnosticProcedure($input: DiagnosticProcedureUpdateInput!) {\n    updateDiagnosticProcedure(input: $input) {\n      id\n      status\n    }\n  }\n`;\n\nconst DELETE_DIAGNOSTIC_RIGHT_EYE_IMAGE = gql`\n  mutation DeleteDiagnosticRightEyeImage(\n    $input: DiagnosticProcedureDeleteFileInput!\n  ) {\n    deleteDiagnosticRightEyeImage(input: $input)\n  }\n`;\n\nconst DELETE_DIAGNOSTIC_LEFT_EYE_IMAGE = gql`\n  mutation DeleteDiagnosticLeftEyeImage(\n    $input: DiagnosticProcedureDeleteFileInput!\n  ) {\n    deleteDiagnosticLeftEyeImage(input: $input)\n  }\n`;\n\nconst DELETE_DIAGNOSTIC_RIGHT_EYE_SKETCH = gql`\n  mutation DeleteDiagnosticRightEyeSketch(\n    $input: DiagnosticProcedureDeleteFileInput!\n  ) {\n    deleteDiagnosticRightEyeSketch(input: $input)\n  }\n`;\n\nconst DELETE_DIAGNOSTIC_LEFT_EYE_SKETCH = gql`\n  mutation DeleteDiagnosticLeftEyeSketch(\n    $input: DiagnosticProcedureDeleteFileInput!\n  ) {\n    deleteDiagnosticLeftEyeSketch(input: $input)\n  }\n`;\n\nconst DELETE_DIAGNOSTIC_DOCUMENT = gql`\n  mutation DeleteDiagnosticDocument(\n    $input: DiagnosticProcedureDeleteFileInput!\n  ) {\n    deleteDiagnosticDocument(input: $input)\n  }\n`;\n\ninterface DiagnosticProcedureComponentProps {\n  patientChartId: string | undefined;\n  values: DiagnosticProcedure | undefined;\n  onRefersh: () => void;\n}\n\nexport const DiagnosticProcedureComponent: React.FC<DiagnosticProcedureComponentProps> =\n  ({ values, patientChartId, onRefersh }) => {\n    const notifDispatch = useNotificationDispatch();\n    const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n    const [refractionSelectDistance, setRefractionSelectedDistance] = useState<\n      \"Distance\" | \"Near\"\n    >(\"Distance\");\n\n    const hasOptImages =\n      (values?.rightEyeImages.length ?? 0) > 0 ||\n      (values?.leftEyeImages.length ?? 0) > 0;\n\n    const hasDocuments = (values?.documents.length ?? 0) > 0;\n    const hasTextArea =\n      (values?.rightEyeText?.length ?? 0) > 0 ||\n      (values?.leftEyeText?.length ?? 0) > 0 ||\n      (values?.generalText?.length ?? 0) > 0;\n\n    const [sectionExpand, setSectionExpand] = useState<any>({\n      imagery: hasOptImages,\n      documents: hasDocuments,\n      textArea: hasTextArea,\n    });\n\n    const { register, reset, watch } = useForm<DiagnosticProcedureUpdateInput>({\n      defaultValues: {\n        id: values?.id,\n        rightEyeText: values?.rightEyeText,\n        leftEyeText: values?.leftEyeText,\n        generalText: values?.generalText,\n        rightDistanceSubjectiveSph: values?.rightDistanceSubjectiveSph,\n        leftDistanceSubjectiveSph: values?.leftDistanceSubjectiveSph,\n        rightDistanceSubjectiveCyl: values?.rightDistanceSubjectiveCyl,\n        leftDistanceSubjectiveCyl: values?.leftDistanceSubjectiveCyl,\n        rightDistanceSubjectiveAxis: values?.rightDistanceSubjectiveAxis,\n        leftDistanceSubjectiveAxis: values?.leftDistanceSubjectiveAxis,\n        rightNearSubjectiveSph: values?.rightNearSubjectiveSph,\n        leftNearSubjectiveSph: values?.leftNearSubjectiveSph,\n        rightNearSubjectiveCyl: values?.rightNearSubjectiveCyl,\n        leftNearSubjectiveCyl: values?.leftNearSubjectiveCyl,\n        rightNearSubjectiveAxis: values?.rightNearSubjectiveAxis,\n        leftNearSubjectiveAxis: values?.leftNearSubjectiveAxis,\n        rightDistanceObjectiveSph: values?.rightDistanceObjectiveSph,\n        leftDistanceObjectiveSph: values?.leftDistanceObjectiveSph,\n        rightDistanceObjectiveCyl: values?.rightDistanceObjectiveCyl,\n        leftDistanceObjectiveCyl: values?.leftDistanceObjectiveCyl,\n        rightDistanceObjectiveAxis: values?.rightDistanceObjectiveAxis,\n        leftDistanceObjectiveAxis: values?.leftDistanceObjectiveAxis,\n        rightNearObjectiveSph: values?.rightNearObjectiveSph,\n        leftNearObjectiveSph: values?.leftNearObjectiveSph,\n        rightNearObjectiveCyl: values?.rightNearObjectiveCyl,\n        leftNearObjectiveCyl: values?.leftNearObjectiveCyl,\n        rightNearObjectiveAxis: values?.rightNearObjectiveAxis,\n        leftNearObjectiveAxis: values?.leftNearObjectiveAxis,\n        rightDistanceFinalSph: values?.rightDistanceFinalSph,\n        leftDistanceFinalSph: values?.leftDistanceFinalSph,\n        rightDistanceFinalCyl: values?.rightDistanceFinalCyl,\n        leftDistanceFinalCyl: values?.leftDistanceFinalCyl,\n        rightDistanceFinalAxis: values?.rightDistanceFinalAxis,\n        leftDistanceFinalAxis: values?.leftDistanceFinalAxis,\n        rightNearFinalSph: values?.rightNearFinalSph,\n        leftNearFinalSph: values?.leftNearFinalSph,\n        rightNearFinalCyl: values?.rightNearFinalCyl,\n        leftNearFinalCyl: values?.leftNearFinalCyl,\n        rightNearFinalAxis: values?.rightNearFinalAxis,\n        leftNearFinalAxis: values?.leftNearFinalAxis,\n        rightVisualAcuity: values?.rightVisualAcuity,\n        leftVisualAcuity: values?.leftVisualAcuity,\n        farPd: values?.farPd,\n        nearPd: values?.nearPd,\n        status: values?.status,\n      },\n    });\n\n    useEffect(() => {\n      if (values) {\n        //console.log(\"Values\", values);\n        //reset({});\n      }\n    }, [values]);\n\n    const defaultOdFiles: Array<FileUploader> =\n      values?.rightEyeImages.map((e: any) => ({\n        id: e?.id,\n        fileUrl: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/files/${e?.fileName}_${e?.hash}.${e?.extension}`,\n        name: e?.fileName ?? \"\",\n        size: e?.size,\n        createdAt: e?.createdAt,\n        contentType: e?.contentType ?? \"\",\n      })) ?? [];\n\n    const defaultOsFiles: Array<FileUploader> =\n      values?.leftEyeImages.map((e: any) => ({\n        id: e?.id,\n        fileUrl: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/files/${e?.fileName}_${e?.hash}.${e?.extension}`,\n        name: e?.fileName ?? \"\",\n        size: e?.size,\n        createdAt: e?.createdAt,\n        contentType: e?.contentType ?? \"\",\n      })) ?? [];\n\n    const defaultDocuments: Array<FileUploader> =\n      values?.documents.map((e: any) => ({\n        id: e?.id,\n        fileUrl: `${window.__RUNTIME_CONFIG__.REACT_APP_SERVER_URL}/files/${e?.fileName}_${e?.hash}.${e?.extension}`,\n        name: e?.fileName ?? \"\",\n        size: e?.size,\n        createdAt: e?.createdAt,\n        contentType: e?.contentType ?? \"\",\n      })) ?? [];\n\n    const [odFiles, setOdFiles] = useState<Array<FileUploader>>(defaultOdFiles);\n    const [osFiles, setOsFiles] = useState<Array<FileUploader>>(defaultOsFiles);\n    const [documents, setDocuments] =\n      useState<Array<FileUploader>>(defaultDocuments);\n\n    const [updateDiagnosticProcedure] = useMutation<\n      any,\n      MutationUpdateDiagnosticProcedureArgs\n    >(UPDATE_DIAGNOSTIC_PROCEDURE, {\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    });\n\n    const [updateDiagnosticProcedureStatus] = useMutation<\n      any,\n      MutationUpdateDiagnosticProcedureArgs\n    >(UPDATE_DIAGNOSTIC_PROCEDURE, {\n      onCompleted(data) {\n        onRefersh();\n\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Success\",\n          notifSubTitle: \"Procedure marked as done\",\n          variant: \"success\",\n        });\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    });\n\n    const [deleteOdFile] = useMutation<\n      any,\n      MutationDeleteDiagnosticRightEyeImageArgs\n    >(DELETE_DIAGNOSTIC_RIGHT_EYE_IMAGE, {\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    });\n\n    const [deleteOsFile] = useMutation<\n      any,\n      MutationDeleteDiagnosticLeftEyeImageArgs\n    >(DELETE_DIAGNOSTIC_LEFT_EYE_IMAGE, {\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    });\n\n    const [deleteDocument] = useMutation<\n      any,\n      MutationDeleteDiagnosticDocumentArgs\n    >(DELETE_DIAGNOSTIC_DOCUMENT, {\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    });\n\n    const handleOdFilesChange = (change: Array<FileUploader>) => {\n      setOdFiles([...change]);\n\n      const files: Array<FileUpload> = change\n        .filter((e) => e.fileObject !== undefined)\n        .map((e) => ({\n          file: e.fileObject,\n          name: e.name,\n        }));\n\n      if (values?.id !== undefined && files.length > 0) {\n        updateDiagnosticProcedure({\n          variables: {\n            input: {\n              id: values?.id,\n              rightEyeImages: files,\n            },\n          },\n        });\n      }\n    };\n\n    const handleOsFilesChange = (change: Array<FileUploader>) => {\n      setOsFiles([...change, ...osFiles]);\n\n      const files: Array<FileUpload> = change\n        .filter((e) => e.fileObject !== undefined)\n        .map((e) => ({\n          file: e.fileObject,\n          name: e.name,\n        }));\n\n      if (values?.id !== undefined && files.length > 0) {\n        updateDiagnosticProcedure({\n          variables: {\n            input: {\n              id: values?.id,\n              leftEyeImages: files,\n            },\n          },\n        });\n      }\n    };\n\n    const handleDocumentsChange = (change: Array<FileUploader>) => {\n      setDocuments([...change, ...documents]);\n\n      const files: Array<FileUpload> = change\n        .filter((e) => e.fileObject !== undefined)\n        .map((e) => ({\n          file: e.fileObject,\n          name: e.name,\n        }));\n\n      if (values?.id !== undefined && files.length > 0) {\n        updateDiagnosticProcedure({\n          variables: {\n            input: {\n              id: values?.id,\n              documents: files,\n            },\n          },\n        });\n      }\n    };\n\n    const handleOdDelete = (index: number) => {\n      const file = odFiles.find((_, i) => i === index);\n      setOdFiles(odFiles.filter((_, i) => i !== index));\n\n      if (file?.id !== undefined && values?.id !== undefined) {\n        deleteOdFile({\n          variables: {\n            input: {\n              diagnosticProcedureId: values?.id,\n              fileId: file.id,\n            },\n          },\n        });\n      }\n    };\n\n    const handleOsDelete = (index: number) => {\n      const file = osFiles.find((_, i) => i === index);\n      setOsFiles(osFiles.filter((_, i) => i !== index));\n\n      if (file?.id !== undefined && values?.id !== undefined) {\n        deleteOsFile({\n          variables: {\n            input: {\n              diagnosticProcedureId: values?.id,\n              fileId: file.id,\n            },\n          },\n        });\n      }\n    };\n\n    const handleDocumentDelete = (index: number) => {\n      const file = documents.find((_, i) => i === index);\n      setDocuments(documents.filter((_, i) => i !== index));\n\n      if (file?.id !== undefined && values?.id !== undefined) {\n        deleteDocument({\n          variables: {\n            input: {\n              diagnosticProcedureId: values?.id,\n              fileId: file.id,\n            },\n          },\n        });\n      }\n    };\n\n    const data = watch();\n\n    useEffect(() => {\n      if (patientChartId) {\n        const runIndexDb = async () => {\n          const diagnosticProcedure: any = {\n            ...data,\n            id: values?.id,\n            patientChartId: patientChartId.toString(),\n          };\n\n          const {\n            __typename,\n            diagnosticProcedureType,\n            documents,\n            leftEyeImages,\n            rightEyeImages,\n            payments,\n            rightEyeSketches,\n            leftEyeSketches,\n            ...syncData\n          } = diagnosticProcedure;\n\n          const indexedDb = new IndexedDb(\"tensor-emr-db\", 1);\n          await indexedDb.open();\n\n          indexedDb\n            .putSyncValue(syncData, \"diagnostic_procedure\", patientChartId)\n            .catch((error) => console.log(error));\n        };\n        runIndexDb();\n      }\n    }, [data, patientChartId]);\n\n    const handleMarkAsDone = () => {\n      if (values?.id) {\n        updateDiagnosticProcedureStatus({\n          variables: {\n            input: {\n              id: values?.id,\n              status: DiagnosicProcedureStatus.Completed,\n            },\n          },\n        });\n      }\n    };\n\n    if (!values?.payments.every((e: any) => e.status === \"PAID\")) {\n      return (\n        <div className=\"p-4 bg-gray-50 shadow-inner rounded-lg\">\n          <div className=\"mt-5 flex h-32 rounded-sm\">\n            <div className=\"m-auto flex space-x-1 text-gray-500\">\n              <div className=\"material-icons\">money_off</div>\n              <p className=\"text-center\">Not paid for</p>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (values?.diagnosticProcedureType.title === \"Refraction\") {\n      return (\n        <form>\n          <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center\">\n            <div className=\"col-span-1\"></div>\n            <div className=\"col-span-4 justify-self-center\">OD</div>\n            <div className=\"col-span-4 justify-self-center\">OS</div>\n\n            <div className=\"col-span-1\"></div>\n            <div className=\"col-span-4\">\n              <div className=\"flex justify-around\">\n                <div>SPH</div>\n                <div>CYL</div>\n                <div>AXIS</div>\n              </div>\n            </div>\n            <div className=\"col-span-4\">\n              <div className=\"flex justify-around\">\n                <div>SPH</div>\n                <div>CYL</div>\n                <div>AXIS</div>\n              </div>\n            </div>\n\n            <div className=\"col-span-2\">\n              <select\n                name=\"credit\"\n                value={refractionSelectDistance}\n                onChange={(evt) => {\n                  setRefractionSelectedDistance(\n                    evt.target.value === \"Distance\" ? \"Distance\" : \"Near\"\n                  );\n                }}\n                className=\"border border-none bg-white rounded-sm shadow-sm focus:outline-none text-xs\"\n              >\n                <option value={\"Distance\"}>Distance</option>\n                <option value={\"Near\"}>Near</option>\n              </select>\n            </div>\n            <div className=\"col-span-3\"></div>\n            <div className=\"col-span-4\"></div>\n          </div>\n\n          <div className=\"mt-2\"></div>\n\n          {refractionSelectDistance === \"Distance\" ? (\n            <RefractionDistanceComponent\n              readonly={patientChartLocked[0] ? true : false}\n              register={register}\n            />\n          ) : (\n            <RefractionNearComponent\n              readonly={patientChartLocked[0] ? true : false}\n              register={register}\n            />\n          )}\n\n          <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center mt-5\">\n            <div className=\"col-span-1\">\n              <span className=\"text-gray-600 tracking-wide text-sm\">\n                Visual Acuity\n              </span>\n            </div>\n            <div className=\"col-span-4\">\n              <input\n                type=\"text\"\n                name=\"rightVisualAcuity\"\n                ref={register}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n            <div className=\"col-span-4\">\n              <input\n                type=\"text\"\n                name=\"leftVisualAcuity\"\n                ref={register}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center mt-2\">\n            <div className=\"col-span-1\">\n              <span className=\"text-gray-600 tracking-wide text-sm\">\n                Far PD\n              </span>\n            </div>\n            <div className=\"col-span-4\">\n              <input\n                type=\"text\"\n                name=\"farPd\"\n                ref={register}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n            <div className=\"col-span-4\"></div>\n            <div className=\"col-span-1\">\n              <span className=\"text-gray-600 tracking-wide text-sm\">\n                Near PD\n              </span>\n            </div>\n            <div className=\"col-span-4\">\n              <input\n                type=\"text\"\n                name=\"nearPd\"\n                ref={register}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n            <div className=\"col-span-4\"></div>\n          </div>\n\n          <div className=\"text-center mt-6\">\n            {values?.status !== \"COMPLETED\" && (\n              <button\n                type=\"button\"\n                className=\"border border-teal-500 w-full text-teal-700 rounded-md p-1 flex justify-center space-x-2 hover:bg-teal-600 hover:text-white\"\n                onClick={handleMarkAsDone}\n              >\n                <p className=\"material-icons\">check</p>\n                <p>Mark as Done</p>\n              </button>\n            )}\n          </div>\n        </form>\n      );\n    }\n\n    return (\n      <div className=\"p-4 bg-gray-50 shadow-inner rounded-lg\">\n        <form>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div className=\"col-span-2\">\n              <div\n                className=\"flex justify-between items-center cursor-pointer\"\n                onClick={() =>\n                  setSectionExpand({\n                    ...sectionExpand,\n                    imagery: !sectionExpand.imagery,\n                  })\n                }\n              >\n                <p className=\"text-gray-700 text-lg font-light\">Imagery</p>\n                <p className=\"material-icons\">\n                  {sectionExpand.imagery ? \"expand_less\" : \"expand_more\"}\n                </p>\n              </div>\n              <hr className=\"mt-1\" />\n            </div>\n\n            <div hidden={!sectionExpand.imagery} className=\"col-span-2\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  OD\n                </label>\n                <FileUploaderComponent\n                  multiSelect={true}\n                  accept={\"image\"}\n                  values={odFiles}\n                  onChange={handleOdFilesChange}\n                  onDelete={handleOdDelete}\n                  disabled={patientChartLocked[0]}\n                />\n              </div>\n\n              <div className=\"mt-3\">\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  OS\n                </label>\n                <FileUploaderComponent\n                  multiSelect={true}\n                  accept={\"image\"}\n                  values={osFiles}\n                  onChange={handleOsFilesChange}\n                  onDelete={handleOsDelete}\n                  disabled={patientChartLocked[0]}\n                />\n              </div>\n            </div>\n\n            <div className=\"col-span-2 mt-2\">\n              <div\n                className=\"flex justify-between items-center cursor-pointer\"\n                onClick={() =>\n                  setSectionExpand({\n                    ...sectionExpand,\n                    documents: !sectionExpand.documents,\n                  })\n                }\n              >\n                <p className=\"text-gray-700 text-lg font-light\">Documents</p>\n                <p className=\"material-icons\">\n                  {sectionExpand.documents ? \"expand_less\" : \"expand_more\"}\n                </p>\n              </div>\n              <hr className=\"mt-1\" />\n            </div>\n\n            <div hidden={!sectionExpand.documents} className=\"col-span-2\">\n              <FileUploaderComponent\n                multiSelect={true}\n                accept={\"document\"}\n                values={documents}\n                onChange={handleDocumentsChange}\n                onDelete={handleDocumentDelete}\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n\n            <div className=\"col-span-2 mt-2\">\n              <div\n                className=\"flex justify-between items-center cursor-pointer\"\n                onClick={() =>\n                  setSectionExpand({\n                    ...sectionExpand,\n                    textArea: !sectionExpand.textArea,\n                  })\n                }\n              >\n                <p className=\"text-gray-700 text-lg font-light\">Text Area</p>\n                <p className=\"material-icons\">\n                  {sectionExpand.textArea ? \"expand_less\" : \"expand_more\"}\n                </p>\n              </div>\n              <hr className=\"mt-1\" />\n            </div>\n\n            <div hidden={!sectionExpand.textArea}>\n              <input\n                type=\"text\"\n                name=\"rightEyeText\"\n                placeholder=\"OD\"\n                ref={register}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n\n            <div hidden={!sectionExpand.textArea}>\n              <input\n                type=\"text\"\n                name=\"leftEyeText\"\n                placeholder=\"OS\"\n                ref={register}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n\n            <div hidden={!sectionExpand.textArea} className=\"col-span-2\">\n              <textarea\n                rows={3}\n                name=\"generalText\"\n                placeholder=\"Free text area\"\n                ref={register}\n                className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                disabled={patientChartLocked[0]}\n              />\n            </div>\n\n            <div className=\"col-span-2 text-center\">\n              {values?.status !== \"COMPLETED\" && (\n                <button\n                  type=\"button\"\n                  className=\"border border-teal-500 w-full text-teal-700 rounded-md p-1 flex justify-center space-x-2 hover:bg-teal-600 hover:text-white\"\n                  onClick={handleMarkAsDone}\n                >\n                  <p className=\"material-icons\">check</p>\n                  <p>Mark as Done</p>\n                </button>\n              )}\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  };\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddEyeGlassPrescriptionForm.tsx",["1263"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  DiagnosticProcedure,\n  EyewearPrescriptionInput,\n  MutationSaveEyewearPrescriptionArgs,\n  Query,\n  QueryEyewearShopsArgs,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport RefractionDistanceComponent from \"./RefractionDistanceForm\";\nimport RefractionNearComponent from \"./RefractionNearForm\";\nimport Select from \"react-select\";\n\nconst SAVE_EYE_GLASS_PRESCRIPTION = gql`\n  mutation SaveEyewearPrescription($input: EyewearPrescriptionInput!) {\n    saveEyewearPrescription(input: $input) {\n      id\n    }\n  }\n`;\n\nconst EYE_WEAR_SHOPS = gql`\n  query EyewearShops($page: PaginationInput!) {\n    eyewearShops(page: $page) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          address\n          region\n          country\n          phone\n          inHouse\n          active\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\ninterface AddEyeGlassPrescriptionFormProps {\n  history?: boolean;\n  patientId: string | undefined;\n  patientChartId: string | undefined;\n  refraction: DiagnosticProcedure | undefined;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport const AddEyeGlassPrescriptionForm: React.FC<AddEyeGlassPrescriptionFormProps> =\n  ({ history, patientId, patientChartId, refraction, onSuccess, onCancel }) => {\n    const notifDispatch = useNotificationDispatch();\n    const { register, handleSubmit } = useForm<any>();\n    const refractionForm = useForm<DiagnosticProcedure>();\n\n    useEffect(() => {\n      if (refraction) {\n        refractionForm.reset(refraction);\n      }\n    }, [refraction]);\n\n    const { data } = useQuery<Query, QueryEyewearShopsArgs>(EYE_WEAR_SHOPS, {\n      variables: {\n        page: { page: 1, size: 1000 },\n      },\n    });\n\n    const [selectedEyewearShop, setSelectedEyewearShop] = useState<any>();\n\n    useEffect(() => {\n      if (data?.eyewearShops && data?.eyewearShops.edges?.length > 0) {\n        if (data?.eyewearShops.edges[0]) {\n          const eyewearShop = data?.eyewearShops.edges[0].node;\n\n          const value = {\n            value: eyewearShop.id,\n            label: `${eyewearShop.title} - ${eyewearShop.address}, ${\n              eyewearShop.region\n            }, ${eyewearShop.country} ${\n              eyewearShop.inHouse ? \"(In-House)\" : \"\"\n            }`,\n          };\n\n          setSelectedEyewearShop(value);\n        }\n      }\n    }, [data]);\n\n    const [save, { error }] = useMutation<\n      any,\n      MutationSaveEyewearPrescriptionArgs\n    >(SAVE_EYE_GLASS_PRESCRIPTION, {\n      onCompleted(data) {\n        onSuccess();\n      },\n      onError(error) {\n        notifDispatch({\n          type: \"show\",\n          notifTitle: \"Error\",\n          notifSubTitle: error.message,\n          variant: \"failure\",\n        });\n      },\n    });\n\n    const onSubmit = (data: EyewearPrescriptionInput) => {\n      if (patientChartId !== undefined && patientId !== undefined) {\n        data.patientId = patientId;\n        data.patientChartId = patientChartId;\n        data.eyewearShopId = selectedEyewearShop.value;\n        data.status = \"Ordered\";\n\n        if (history) {\n          data.history = true;\n        } else {\n          data.history = false;\n        }\n\n        save({ variables: { input: data } });\n      }\n    };\n\n    const eyeWearShops = data?.eyewearShops.edges.map((e) => ({\n      value: e?.node.id,\n      label: `${e?.node.title} - ${e?.node.address}, ${e?.node.region}, ${\n        e?.node.country\n      } ${e?.node.inHouse ? \"(In-House)\" : \"\"}`,\n    }));\n\n    return (\n      <div className=\"container mx-auto flex justify-center pt-4 pb-6\">\n        <div className=\"w-3/4\">\n          <div className=\"float-right\">\n            <button onClick={onCancel}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                className=\"h-8 w-8 text-gray-500\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </button>\n          </div>\n\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <p className=\"text-2xl font-extrabold tracking-wider text-teal-700\">\n              Prescribe Eye Glass\n            </p>\n            <div className=\"mt-4\">\n              <Select\n                placeholder=\"Eyewear Shop\"\n                options={eyeWearShops}\n                value={selectedEyewearShop}\n                onChange={(value) => {\n                  setSelectedEyewearShop(value);\n                }}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <hr />\n            </div>\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center mt-10\">\n              <div className=\"col-span-1\"></div>\n              <div className=\"col-span-4 justify-self-center\">OD</div>\n              <div className=\"col-span-4 justify-self-center\">OS</div>\n\n              <div className=\"col-span-1\"></div>\n              <div className=\"col-span-4\">\n                <div className=\"flex justify-around\">\n                  <div>SPH</div>\n                  <div>CYL</div>\n                  <div>AXIS</div>\n                </div>\n              </div>\n              <div className=\"col-span-4\">\n                <div className=\"flex justify-around\">\n                  <div>SPH</div>\n                  <div>CYL</div>\n                  <div>AXIS</div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center p-2 rounded-md\">\n              <div className=\"co-span-1\">\n                <span className=\"text-xs\">Distance</span>\n              </div>\n              <div className=\"col-span-4\"></div>\n              <div className=\"col-span-4\"></div>\n            </div>\n\n            <RefractionDistanceComponent\n              readonly={true}\n              register={refractionForm.register}\n              handleChange={() => {}}\n            />\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center p-2 rounded-md\">\n              <div className=\"co-span-1\">\n                <span className=\"text-xs\">Near</span>\n              </div>\n              <div className=\"col-span-4\"></div>\n              <div className=\"col-span-4\"></div>\n            </div>\n\n            <RefractionNearComponent\n              readonly={true}\n              register={refractionForm.register}\n              handleChange={() => {}}\n            />\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center mt-5\">\n              <div className=\"col-span-1\">\n                <span className=\"text-gray-600 tracking-wide text-sm\">\n                  Visual Acuity\n                </span>\n              </div>\n              <div className=\"col-span-4\">\n                <input\n                  type=\"text\"\n                  name=\"rightVisualAcuity\"\n                  readOnly\n                  ref={refractionForm.register}\n                  className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                  onChange={() => {}}\n                />\n              </div>\n              <div className=\"col-span-4\">\n                <input\n                  type=\"text\"\n                  name=\"leftVisualAcuity\"\n                  readOnly\n                  ref={refractionForm.register}\n                  className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                  onChange={() => {}}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-9 gap-y-4 gap-x-6 justify-items-stretch items-center mt-2\">\n              <div className=\"col-span-1\">\n                <span className=\"text-gray-600 tracking-wide text-sm\">\n                  Far PD\n                </span>\n              </div>\n              <div className=\"col-span-4\">\n                <input\n                  type=\"text\"\n                  name=\"farPd\"\n                  readOnly\n                  ref={refractionForm.register}\n                  className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                  onChange={() => {}}\n                />\n              </div>\n              <div className=\"col-span-4\"></div>\n              <div className=\"col-span-1\">\n                <span className=\"text-gray-600 tracking-wide text-sm\">\n                  Near PD\n                </span>\n              </div>\n              <div className=\"col-span-4\">\n                <input\n                  type=\"text\"\n                  name=\"nearPd\"\n                  readOnly\n                  ref={refractionForm.register}\n                  className=\"p-1 pl-4 sm:text-md border-gray-300 border rounded-md w-full\"\n                  onChange={() => {}}\n                />\n              </div>\n              <div className=\"col-span-4\"></div>\n            </div>\n\n            <div className=\"mt-10 grid grid-cols-4 space-y-2 text-lg\">\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"glass\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Glass</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"photoChromatic\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Photo Chromatic</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"bifocal\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Bifocal</span>\n              </label>\n\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"plastic\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Plastic</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"glareFree\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Glare Free</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"progressive\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Progressive</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"singleVision\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Single vision</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"scratchResistant\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Scratch Resistant</span>\n              </label>\n              <label className=\"inline-flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"twoSeparateGlasses\"\n                  ref={register}\n                  onChange={() => {}}\n                />\n                <span className=\"ml-2\">Two separate glasses</span>\n              </label>\n            </div>\n            <div className=\"mt-4\">\n              {error && <p className=\"text-red-600\">Error: {error.message}</p>}\n            </div>\n            <button\n              type=\"submit\"\n              className=\"inline-flex justify-center w-full py-2 px-4 mt-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-teal-600 focus:outline-none\"\n            >\n              <span className=\"ml-2\">Order</span>\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  };\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/FavoriteMedicationList.tsx",["1264"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { TablePagination } from \"../components/table_pagination\";\nimport {\n  FavoriteMedication,\n  PaginationInput,\n  QueryUserFavoriteMedicationsArgs,\n  MutationDeleteFavoriteMedicationArgs,\n  Query,\n} from \"../models/models\";\nimport { useNotificationDispatch } from \"../notification\";\nimport { AppointmentContext } from \"../_context/AppointmentContext\";\n\nconst FAVORITE_MEDICATIONS = gql`\n  query UserFavoriteMedications($page: PaginationInput!, $searchTerm: String) {\n    userFavoriteMedications(page: $page, searchTerm: $searchTerm) {\n      totalCount\n      edges {\n        node {\n          id\n          medication\n          sig\n          refill\n          generic\n          substitutionAllowed\n          directionToPatient\n          userId\n        }\n      }\n      pageInfo {\n        totalPages\n      }\n    }\n  }\n`;\n\nconst DELETE_FAVORITE_MEDICATION = gql`\n  mutation DeleteFavoriteMedication($id: ID!) {\n    deleteFavoriteMedication(id: $id)\n  }\n`;\n\nexport const FavoriteMedicationList: React.FC<{\n  onItemClick: (item: FavoriteMedication) => void;\n}> = ({ onItemClick }) => {\n  const notifDispatch = useNotificationDispatch();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [paginationInput, setPaginationInput] = useState<PaginationInput>({\n    page: 1,\n    size: 20,\n  });\n\n  const { data, refetch } = useQuery<Query, QueryUserFavoriteMedicationsArgs>(\n    FAVORITE_MEDICATIONS,\n    {\n      variables: { page: paginationInput, searchTerm },\n    }\n  );\n\n  const { patientChartLocked } = React.useContext<any>(AppointmentContext);\n\n  const [deleteFavoriteMedication] = useMutation<\n    any,\n    MutationDeleteFavoriteMedicationArgs\n  >(DELETE_FAVORITE_MEDICATION, {\n    onCompleted(data) {\n      refetch();\n\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Success\",\n        notifSubTitle: \"Favorite medication removed\",\n        variant: \"success\",\n      });\n    },\n    onError(error) {\n      notifDispatch({\n        type: \"show\",\n        notifTitle: \"Error\",\n        notifSubTitle: error.message,\n        variant: \"failure\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [paginationInput, searchTerm]);\n\n  const handleNextClick = () => {\n    const totalPages = data?.userFavoriteMedications.pageInfo.totalPages ?? 0;\n\n    if (totalPages > paginationInput.page) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page + 1,\n      });\n    }\n  };\n\n  const handlePreviousClick = () => {\n    if (paginationInput.page > 1) {\n      setPaginationInput({\n        ...paginationInput,\n        page: paginationInput.page - 1,\n      });\n    }\n  };\n\n  const handleItemClick = (item: FavoriteMedication | undefined) => {\n    if (item !== undefined) {\n      onItemClick(item);\n    }\n  };\n\n  const handleItemDelete = (id: string | undefined) => {\n    if (id !== undefined) {\n      deleteFavoriteMedication({ variables: { id } });\n    }\n  };\n\n  return (\n    <div className=\"rounded-lg shadow-xl\">\n      <table>\n        <thead>\n          <tr>\n            <th\n              scope=\"col\"\n              colSpan={3}\n              className=\"px-4 py-2 bg-teal-700 text-left text-xs text-gray-50 uppercase tracking-wider rounded-t-md\"\n            >\n              Favorite medications\n            </th>\n          </tr>\n          <tr>\n            <th colSpan={3}>\n              <input\n                type=\"search\"\n                name=\"search\"\n                placeholder=\"Search\"\n                className=\"w-full sm:text-md border-none\"\n                onChange={(evt) => setSearchTerm(evt.target.value.trim())}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200 p-1\">\n          {data?.userFavoriteMedications.edges.map((e) => (\n            <tr\n              key={e?.node.id}\n              className=\"hover:bg-gray-100 border-t cursor-pointer\"\n            >\n              <td\n                className=\"pl-5 text-gray-500 md-12\"\n                onClick={() => handleItemDelete(e?.node.id)}\n              >\n                <span className=\"material-icons\">delete</span>\n              </td>\n              <td\n                className=\"px-6 py-5 text-sm text-gray-700\"\n                onClick={() =>\n                  !patientChartLocked[0] && handleItemClick(e?.node)\n                }\n              >\n                {e?.node.medication}\n              </td>\n              <td\n                className=\"p-2\"\n                onClick={() =>\n                  !patientChartLocked[0] && handleItemClick(e?.node)\n                }\n              >\n                <span className=\"material-icons\">keyboard_arrow_right</span>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <TablePagination\n        totalCount={data?.userFavoriteMedications.totalCount ?? 0}\n        onNext={handleNextClick}\n        onPrevious={handlePreviousClick}\n      />\n    </div>\n  );\n};\n","/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddMedicalPrescriptionForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/AddAllergyForm.tsx",[],"/home/kidus/Desktop/Work/tensor-emr/emr-client/src/components/SketchTool.tsx",[],{"ruleId":"1265","replacedBy":"1266"},{"ruleId":"1267","replacedBy":"1268"},{"ruleId":"1269","severity":1,"message":"1270","line":102,"column":10,"nodeType":"1271","messageId":"1272","endLine":102,"endColumn":22},{"ruleId":"1273","severity":1,"message":"1274","line":156,"column":6,"nodeType":"1275","endLine":156,"endColumn":31,"suggestions":"1276"},{"ruleId":"1269","severity":1,"message":"1277","line":11,"column":3,"nodeType":"1271","messageId":"1272","endLine":11,"endColumn":22},{"ruleId":"1273","severity":1,"message":"1274","line":102,"column":6,"nodeType":"1275","endLine":102,"endColumn":31,"suggestions":"1278"},{"ruleId":"1273","severity":1,"message":"1279","line":217,"column":6,"nodeType":"1275","endLine":217,"endColumn":59,"suggestions":"1280"},{"ruleId":"1273","severity":1,"message":"1281","line":227,"column":6,"nodeType":"1275","endLine":227,"endColumn":36,"suggestions":"1282"},{"ruleId":"1273","severity":1,"message":"1274","line":55,"column":6,"nodeType":"1275","endLine":55,"endColumn":23,"suggestions":"1283"},{"ruleId":"1273","severity":1,"message":"1284","line":464,"column":6,"nodeType":"1275","endLine":464,"endColumn":35,"suggestions":"1285"},{"ruleId":"1269","severity":1,"message":"1286","line":1,"column":28,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":36},{"ruleId":"1269","severity":1,"message":"1287","line":1,"column":15,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":26},{"ruleId":"1269","severity":1,"message":"1286","line":2,"column":17,"nodeType":"1271","messageId":"1272","endLine":2,"endColumn":25},{"ruleId":"1269","severity":1,"message":"1288","line":4,"column":10,"nodeType":"1271","messageId":"1272","endLine":4,"endColumn":28},{"ruleId":"1269","severity":1,"message":"1289","line":7,"column":3,"nodeType":"1271","messageId":"1272","endLine":7,"endColumn":33},{"ruleId":"1269","severity":1,"message":"1290","line":12,"column":7,"nodeType":"1271","messageId":"1272","endLine":12,"endColumn":27},{"ruleId":"1273","severity":1,"message":"1281","line":34,"column":6,"nodeType":"1275","endLine":34,"endColumn":19,"suggestions":"1291"},{"ruleId":"1269","severity":1,"message":"1292","line":36,"column":9,"nodeType":"1271","messageId":"1272","endLine":36,"endColumn":22},{"ruleId":"1269","severity":1,"message":"1293","line":17,"column":10,"nodeType":"1271","messageId":"1272","endLine":17,"endColumn":28},{"ruleId":"1273","severity":1,"message":"1274","line":45,"column":6,"nodeType":"1275","endLine":45,"endColumn":23,"suggestions":"1294"},{"ruleId":"1295","severity":1,"message":"1296","line":57,"column":13,"nodeType":"1297","endLine":57,"endColumn":73},{"ruleId":"1273","severity":1,"message":"1298","line":116,"column":6,"nodeType":"1275","endLine":116,"endColumn":12,"suggestions":"1299"},{"ruleId":"1273","severity":1,"message":"1300","line":126,"column":6,"nodeType":"1275","endLine":126,"endColumn":30,"suggestions":"1301"},{"ruleId":"1273","severity":1,"message":"1274","line":66,"column":6,"nodeType":"1275","endLine":66,"endColumn":35,"suggestions":"1302"},{"ruleId":"1273","severity":1,"message":"1303","line":81,"column":8,"nodeType":"1275","endLine":81,"endColumn":16,"suggestions":"1304"},{"ruleId":"1273","severity":1,"message":"1305","line":88,"column":8,"nodeType":"1275","endLine":88,"endColumn":20,"suggestions":"1306"},{"ruleId":"1273","severity":1,"message":"1307","line":114,"column":8,"nodeType":"1275","endLine":114,"endColumn":22,"suggestions":"1308"},{"ruleId":"1273","severity":1,"message":"1303","line":41,"column":6,"nodeType":"1275","endLine":41,"endColumn":14,"suggestions":"1309"},{"ruleId":"1273","severity":1,"message":"1274","line":55,"column":6,"nodeType":"1275","endLine":55,"endColumn":35,"suggestions":"1310"},{"ruleId":"1269","severity":1,"message":"1311","line":11,"column":3,"nodeType":"1271","messageId":"1272","endLine":11,"endColumn":27},{"ruleId":"1273","severity":1,"message":"1312","line":93,"column":8,"nodeType":"1275","endLine":93,"endColumn":22,"suggestions":"1313"},{"ruleId":"1273","severity":1,"message":"1314","line":68,"column":6,"nodeType":"1275","endLine":68,"endColumn":8,"suggestions":"1315"},{"ruleId":"1273","severity":1,"message":"1316","line":21,"column":6,"nodeType":"1275","endLine":21,"endColumn":23,"suggestions":"1317"},{"ruleId":"1273","severity":1,"message":"1318","line":21,"column":7,"nodeType":"1319","endLine":21,"endColumn":22},{"ruleId":"1269","severity":1,"message":"1320","line":23,"column":9,"nodeType":"1271","messageId":"1272","endLine":23,"endColumn":14},{"ruleId":"1321","severity":1,"message":"1322","line":124,"column":13,"nodeType":"1297","endLine":124,"endColumn":55},{"ruleId":"1323","severity":1,"message":"1324","line":181,"column":21,"nodeType":"1297","endLine":187,"endColumn":22},{"ruleId":"1323","severity":1,"message":"1324","line":191,"column":21,"nodeType":"1297","endLine":197,"endColumn":22},{"ruleId":"1273","severity":1,"message":"1274","line":133,"column":6,"nodeType":"1275","endLine":133,"endColumn":31,"suggestions":"1325"},{"ruleId":"1269","severity":1,"message":"1287","line":1,"column":20,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":31},{"ruleId":"1269","severity":1,"message":"1326","line":152,"column":10,"nodeType":"1271","messageId":"1272","endLine":152,"endColumn":15},{"ruleId":"1269","severity":1,"message":"1327","line":152,"column":17,"nodeType":"1271","messageId":"1272","endLine":152,"endColumn":25},{"ruleId":"1269","severity":1,"message":"1328","line":153,"column":18,"nodeType":"1271","messageId":"1272","endLine":153,"endColumn":27},{"ruleId":"1273","severity":1,"message":"1279","line":204,"column":6,"nodeType":"1275","endLine":204,"endColumn":51,"suggestions":"1329"},{"ruleId":"1273","severity":1,"message":"1318","line":204,"column":30,"nodeType":"1319","endLine":204,"endColumn":50},{"ruleId":"1273","severity":1,"message":"1281","line":214,"column":6,"nodeType":"1275","endLine":214,"endColumn":36,"suggestions":"1330"},{"ruleId":"1273","severity":1,"message":"1305","line":107,"column":6,"nodeType":"1275","endLine":107,"endColumn":24,"suggestions":"1331"},{"ruleId":"1269","severity":1,"message":"1332","line":16,"column":7,"nodeType":"1271","messageId":"1272","endLine":16,"endColumn":22},{"ruleId":"1269","severity":1,"message":"1333","line":40,"column":7,"nodeType":"1271","messageId":"1272","endLine":40,"endColumn":27},{"ruleId":"1273","severity":1,"message":"1334","line":86,"column":6,"nodeType":"1275","endLine":86,"endColumn":23,"suggestions":"1335"},{"ruleId":"1269","severity":1,"message":"1336","line":1,"column":29,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":37},{"ruleId":"1269","severity":1,"message":"1337","line":53,"column":10,"nodeType":"1271","messageId":"1272","endLine":53,"endColumn":23},{"ruleId":"1269","severity":1,"message":"1338","line":53,"column":25,"nodeType":"1271","messageId":"1272","endLine":53,"endColumn":41},{"ruleId":"1273","severity":1,"message":"1339","line":76,"column":6,"nodeType":"1275","endLine":76,"endColumn":8,"suggestions":"1340"},{"ruleId":"1273","severity":1,"message":"1341","line":85,"column":6,"nodeType":"1275","endLine":85,"endColumn":44,"suggestions":"1342"},{"ruleId":"1273","severity":1,"message":"1343","line":107,"column":21,"nodeType":"1271","endLine":107,"endColumn":32},{"ruleId":"1273","severity":1,"message":"1274","line":81,"column":6,"nodeType":"1275","endLine":81,"endColumn":23,"suggestions":"1344"},{"ruleId":"1273","severity":1,"message":"1274","line":46,"column":6,"nodeType":"1275","endLine":46,"endColumn":23,"suggestions":"1345"},{"ruleId":"1269","severity":1,"message":"1346","line":48,"column":9,"nodeType":"1271","messageId":"1272","endLine":48,"endColumn":24},{"ruleId":"1269","severity":1,"message":"1347","line":59,"column":9,"nodeType":"1271","messageId":"1272","endLine":59,"endColumn":24},{"ruleId":"1269","severity":1,"message":"1348","line":68,"column":9,"nodeType":"1271","messageId":"1272","endLine":68,"endColumn":27},{"ruleId":"1269","severity":1,"message":"1349","line":236,"column":7,"nodeType":"1271","messageId":"1272","endLine":236,"endColumn":21},{"ruleId":"1269","severity":1,"message":"1336","line":1,"column":28,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":36},{"ruleId":"1269","severity":1,"message":"1286","line":1,"column":28,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":36},{"ruleId":"1269","severity":1,"message":"1288","line":3,"column":10,"nodeType":"1271","messageId":"1272","endLine":3,"endColumn":28},{"ruleId":"1273","severity":1,"message":"1303","line":55,"column":6,"nodeType":"1275","endLine":55,"endColumn":14,"suggestions":"1350"},{"ruleId":"1273","severity":1,"message":"1274","line":43,"column":6,"nodeType":"1275","endLine":43,"endColumn":23,"suggestions":"1351"},{"ruleId":"1273","severity":1,"message":"1281","line":373,"column":6,"nodeType":"1275","endLine":373,"endColumn":14,"suggestions":"1352"},{"ruleId":"1273","severity":1,"message":"1274","line":57,"column":6,"nodeType":"1275","endLine":57,"endColumn":23,"suggestions":"1353"},{"ruleId":"1273","severity":1,"message":"1281","line":398,"column":6,"nodeType":"1275","endLine":398,"endColumn":14,"suggestions":"1354"},{"ruleId":"1273","severity":1,"message":"1274","line":94,"column":6,"nodeType":"1275","endLine":94,"endColumn":21,"suggestions":"1355"},{"ruleId":"1273","severity":1,"message":"1274","line":183,"column":6,"nodeType":"1275","endLine":183,"endColumn":35,"suggestions":"1356"},{"ruleId":"1269","severity":1,"message":"1357","line":17,"column":10,"nodeType":"1271","messageId":"1272","endLine":17,"endColumn":20},{"ruleId":"1273","severity":1,"message":"1358","line":117,"column":6,"nodeType":"1275","endLine":117,"endColumn":8,"suggestions":"1359"},{"ruleId":"1360","severity":1,"message":"1361","line":38,"column":33,"nodeType":"1362","messageId":"1363","endLine":38,"endColumn":34},{"ruleId":"1360","severity":1,"message":"1361","line":38,"column":42,"nodeType":"1362","messageId":"1363","endLine":38,"endColumn":43},{"ruleId":"1323","severity":1,"message":"1364","line":56,"column":25,"nodeType":"1297","endLine":62,"endColumn":26},{"ruleId":"1273","severity":1,"message":"1365","line":80,"column":6,"nodeType":"1275","endLine":80,"endColumn":8,"suggestions":"1366"},{"ruleId":"1273","severity":1,"message":"1367","line":90,"column":6,"nodeType":"1275","endLine":90,"endColumn":44,"suggestions":"1368"},{"ruleId":"1273","severity":1,"message":"1343","line":92,"column":21,"nodeType":"1271","endLine":92,"endColumn":32},{"ruleId":"1269","severity":1,"message":"1369","line":253,"column":7,"nodeType":"1271","messageId":"1272","endLine":253,"endColumn":17},{"ruleId":"1273","severity":1,"message":"1274","line":58,"column":6,"nodeType":"1275","endLine":58,"endColumn":23,"suggestions":"1370"},{"ruleId":"1269","severity":1,"message":"1371","line":1,"column":17,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":26},{"ruleId":"1269","severity":1,"message":"1287","line":2,"column":15,"nodeType":"1271","messageId":"1272","endLine":2,"endColumn":26},{"ruleId":"1269","severity":1,"message":"1372","line":3,"column":10,"nodeType":"1271","messageId":"1272","endLine":3,"endColumn":17},{"ruleId":"1269","severity":1,"message":"1373","line":8,"column":10,"nodeType":"1271","messageId":"1272","endLine":8,"endColumn":18},{"ruleId":"1269","severity":1,"message":"1374","line":9,"column":10,"nodeType":"1271","messageId":"1272","endLine":9,"endColumn":18},{"ruleId":"1269","severity":1,"message":"1375","line":12,"column":3,"nodeType":"1271","messageId":"1272","endLine":12,"endColumn":34},{"ruleId":"1269","severity":1,"message":"1376","line":13,"column":3,"nodeType":"1271","messageId":"1272","endLine":13,"endColumn":32},{"ruleId":"1269","severity":1,"message":"1377","line":14,"column":3,"nodeType":"1271","messageId":"1272","endLine":14,"endColumn":34},{"ruleId":"1269","severity":1,"message":"1378","line":17,"column":3,"nodeType":"1271","messageId":"1272","endLine":17,"endColumn":20},{"ruleId":"1269","severity":1,"message":"1379","line":18,"column":3,"nodeType":"1271","messageId":"1272","endLine":18,"endColumn":20},{"ruleId":"1269","severity":1,"message":"1380","line":20,"column":3,"nodeType":"1271","messageId":"1272","endLine":20,"endColumn":18},{"ruleId":"1269","severity":1,"message":"1381","line":21,"column":3,"nodeType":"1271","messageId":"1272","endLine":21,"endColumn":16},{"ruleId":"1269","severity":1,"message":"1382","line":23,"column":3,"nodeType":"1271","messageId":"1272","endLine":23,"endColumn":21},{"ruleId":"1269","severity":1,"message":"1383","line":24,"column":3,"nodeType":"1271","messageId":"1272","endLine":24,"endColumn":27},{"ruleId":"1273","severity":1,"message":"1274","line":60,"column":6,"nodeType":"1275","endLine":60,"endColumn":23,"suggestions":"1384"},{"ruleId":"1323","severity":1,"message":"1324","line":17,"column":9,"nodeType":"1297","endLine":20,"endColumn":10},{"ruleId":"1323","severity":1,"message":"1324","line":23,"column":9,"nodeType":"1297","endLine":26,"endColumn":10},{"ruleId":"1323","severity":1,"message":"1364","line":37,"column":13,"nodeType":"1297","endLine":43,"endColumn":14},{"ruleId":"1323","severity":1,"message":"1364","line":61,"column":13,"nodeType":"1297","endLine":67,"endColumn":14},{"ruleId":"1273","severity":1,"message":"1274","line":46,"column":6,"nodeType":"1275","endLine":46,"endColumn":23,"suggestions":"1385"},{"ruleId":"1273","severity":1,"message":"1281","line":386,"column":6,"nodeType":"1275","endLine":386,"endColumn":14,"suggestions":"1386"},{"ruleId":"1273","severity":1,"message":"1387","line":63,"column":6,"nodeType":"1275","endLine":63,"endColumn":27,"suggestions":"1388"},{"ruleId":"1273","severity":1,"message":"1343","line":65,"column":21,"nodeType":"1271","endLine":65,"endColumn":32},{"ruleId":"1389","severity":1,"message":"1390","line":140,"column":9,"nodeType":"1297","endLine":157,"endColumn":11},{"ruleId":"1273","severity":1,"message":"1391","line":279,"column":6,"nodeType":"1275","endLine":279,"endColumn":17,"suggestions":"1392"},{"ruleId":"1273","severity":1,"message":"1393","line":461,"column":6,"nodeType":"1275","endLine":461,"endColumn":12,"suggestions":"1394"},{"ruleId":"1273","severity":1,"message":"1395","line":503,"column":6,"nodeType":"1275","endLine":503,"endColumn":56,"suggestions":"1396"},{"ruleId":"1273","severity":1,"message":"1397","line":510,"column":6,"nodeType":"1275","endLine":510,"endColumn":38,"suggestions":"1398"},{"ruleId":"1269","severity":1,"message":"1399","line":950,"column":7,"nodeType":"1271","messageId":"1272","endLine":950,"endColumn":40},{"ruleId":"1269","severity":1,"message":"1400","line":998,"column":7,"nodeType":"1271","messageId":"1272","endLine":998,"endColumn":35},{"ruleId":"1273","severity":1,"message":"1401","line":58,"column":6,"nodeType":"1275","endLine":58,"endColumn":22,"suggestions":"1402"},{"ruleId":"1273","severity":1,"message":"1303","line":44,"column":6,"nodeType":"1275","endLine":44,"endColumn":39,"suggestions":"1403"},{"ruleId":"1269","severity":1,"message":"1404","line":30,"column":3,"nodeType":"1271","messageId":"1272","endLine":30,"endColumn":25},{"ruleId":"1269","severity":1,"message":"1293","line":32,"column":10,"nodeType":"1271","messageId":"1272","endLine":32,"endColumn":28},{"ruleId":"1273","severity":1,"message":"1405","line":147,"column":6,"nodeType":"1275","endLine":147,"endColumn":19,"suggestions":"1406"},{"ruleId":"1269","severity":1,"message":"1286","line":1,"column":28,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":36},{"ruleId":"1269","severity":1,"message":"1288","line":3,"column":10,"nodeType":"1271","messageId":"1272","endLine":3,"endColumn":28},{"ruleId":"1273","severity":1,"message":"1303","line":36,"column":6,"nodeType":"1275","endLine":36,"endColumn":14,"suggestions":"1407"},{"ruleId":"1269","severity":1,"message":"1286","line":1,"column":28,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":36},{"ruleId":"1269","severity":1,"message":"1288","line":3,"column":10,"nodeType":"1271","messageId":"1272","endLine":3,"endColumn":28},{"ruleId":"1273","severity":1,"message":"1303","line":35,"column":6,"nodeType":"1275","endLine":35,"endColumn":14,"suggestions":"1408"},{"ruleId":"1273","severity":1,"message":"1409","line":83,"column":6,"nodeType":"1275","endLine":83,"endColumn":17,"suggestions":"1410"},{"ruleId":"1269","severity":1,"message":"1411","line":1,"column":8,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":12},{"ruleId":"1273","severity":1,"message":"1274","line":123,"column":6,"nodeType":"1275","endLine":123,"endColumn":31,"suggestions":"1412"},{"ruleId":"1273","severity":1,"message":"1413","line":57,"column":6,"nodeType":"1275","endLine":57,"endColumn":8,"suggestions":"1414"},{"ruleId":"1269","severity":1,"message":"1415","line":100,"column":17,"nodeType":"1271","messageId":"1272","endLine":100,"endColumn":22},{"ruleId":"1273","severity":1,"message":"1274","line":118,"column":6,"nodeType":"1275","endLine":118,"endColumn":31,"suggestions":"1416"},{"ruleId":"1269","severity":1,"message":"1417","line":128,"column":10,"nodeType":"1271","messageId":"1272","endLine":128,"endColumn":30},{"ruleId":"1269","severity":1,"message":"1418","line":6,"column":10,"nodeType":"1271","messageId":"1272","endLine":6,"endColumn":20},{"ruleId":"1269","severity":1,"message":"1419","line":154,"column":9,"nodeType":"1271","messageId":"1272","endLine":154,"endColumn":17},{"ruleId":"1273","severity":1,"message":"1274","line":137,"column":6,"nodeType":"1275","endLine":137,"endColumn":31,"suggestions":"1420"},{"ruleId":"1273","severity":1,"message":"1274","line":160,"column":6,"nodeType":"1275","endLine":160,"endColumn":23,"suggestions":"1421"},{"ruleId":"1273","severity":1,"message":"1274","line":97,"column":6,"nodeType":"1275","endLine":97,"endColumn":31,"suggestions":"1422"},{"ruleId":"1273","severity":1,"message":"1274","line":98,"column":6,"nodeType":"1275","endLine":98,"endColumn":31,"suggestions":"1423"},{"ruleId":"1269","severity":1,"message":"1418","line":3,"column":10,"nodeType":"1271","messageId":"1272","endLine":3,"endColumn":20},{"ruleId":"1269","severity":1,"message":"1424","line":9,"column":41,"nodeType":"1271","messageId":"1272","endLine":9,"endColumn":49},{"ruleId":"1273","severity":1,"message":"1425","line":63,"column":6,"nodeType":"1275","endLine":63,"endColumn":8,"suggestions":"1426"},{"ruleId":"1269","severity":1,"message":"1332","line":17,"column":7,"nodeType":"1271","messageId":"1272","endLine":17,"endColumn":22},{"ruleId":"1269","severity":1,"message":"1427","line":25,"column":7,"nodeType":"1271","messageId":"1272","endLine":25,"endColumn":28},{"ruleId":"1269","severity":1,"message":"1333","line":47,"column":7,"nodeType":"1271","messageId":"1272","endLine":47,"endColumn":27},{"ruleId":"1273","severity":1,"message":"1334","line":97,"column":6,"nodeType":"1275","endLine":97,"endColumn":23,"suggestions":"1428"},{"ruleId":"1269","severity":1,"message":"1429","line":9,"column":3,"nodeType":"1271","messageId":"1272","endLine":9,"endColumn":27},{"ruleId":"1273","severity":1,"message":"1279","line":225,"column":6,"nodeType":"1275","endLine":225,"endColumn":59,"suggestions":"1430"},{"ruleId":"1269","severity":1,"message":"1431","line":227,"column":10,"nodeType":"1271","messageId":"1272","endLine":227,"endColumn":24},{"ruleId":"1273","severity":1,"message":"1281","line":327,"column":6,"nodeType":"1275","endLine":327,"endColumn":36,"suggestions":"1432"},{"ruleId":"1269","severity":1,"message":"1433","line":4,"column":36,"nodeType":"1271","messageId":"1272","endLine":4,"endColumn":45},{"ruleId":"1273","severity":1,"message":"1434","line":124,"column":6,"nodeType":"1275","endLine":124,"endColumn":17,"suggestions":"1435"},{"ruleId":"1273","severity":1,"message":"1393","line":151,"column":6,"nodeType":"1275","endLine":151,"endColumn":12,"suggestions":"1436"},{"ruleId":"1269","severity":1,"message":"1437","line":35,"column":11,"nodeType":"1271","messageId":"1272","endLine":35,"endColumn":15},{"ruleId":"1321","severity":1,"message":"1322","line":177,"column":19,"nodeType":"1297","endLine":185,"endColumn":21},{"ruleId":"1273","severity":1,"message":"1341","line":291,"column":6,"nodeType":"1275","endLine":291,"endColumn":16,"suggestions":"1438"},{"ruleId":"1273","severity":1,"message":"1279","line":334,"column":6,"nodeType":"1275","endLine":334,"endColumn":45,"suggestions":"1439"},{"ruleId":"1273","severity":1,"message":"1318","line":334,"column":7,"nodeType":"1319","endLine":334,"endColumn":22},{"ruleId":"1273","severity":1,"message":"1318","line":334,"column":24,"nodeType":"1319","endLine":334,"endColumn":44},{"ruleId":"1273","severity":1,"message":"1440","line":348,"column":6,"nodeType":"1275","endLine":348,"endColumn":27,"suggestions":"1441"},{"ruleId":"1273","severity":1,"message":"1318","line":348,"column":7,"nodeType":"1442","endLine":348,"endColumn":26},{"ruleId":"1269","severity":1,"message":"1287","line":1,"column":15,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":26},{"ruleId":"1269","severity":1,"message":"1443","line":15,"column":10,"nodeType":"1271","messageId":"1272","endLine":15,"endColumn":33},{"ruleId":"1273","severity":1,"message":"1274","line":57,"column":6,"nodeType":"1275","endLine":57,"endColumn":23,"suggestions":"1444"},{"ruleId":"1273","severity":1,"message":"1274","line":76,"column":6,"nodeType":"1275","endLine":76,"endColumn":23,"suggestions":"1445"},{"ruleId":"1269","severity":1,"message":"1287","line":2,"column":15,"nodeType":"1271","messageId":"1272","endLine":2,"endColumn":26},{"ruleId":"1269","severity":1,"message":"1372","line":3,"column":10,"nodeType":"1271","messageId":"1272","endLine":3,"endColumn":17},{"ruleId":"1269","severity":1,"message":"1373","line":8,"column":10,"nodeType":"1271","messageId":"1272","endLine":8,"endColumn":18},{"ruleId":"1269","severity":1,"message":"1374","line":9,"column":10,"nodeType":"1271","messageId":"1272","endLine":9,"endColumn":18},{"ruleId":"1269","severity":1,"message":"1446","line":12,"column":3,"nodeType":"1271","messageId":"1272","endLine":12,"endColumn":40},{"ruleId":"1269","severity":1,"message":"1378","line":15,"column":3,"nodeType":"1271","messageId":"1272","endLine":15,"endColumn":20},{"ruleId":"1269","severity":1,"message":"1379","line":16,"column":3,"nodeType":"1271","messageId":"1272","endLine":16,"endColumn":20},{"ruleId":"1269","severity":1,"message":"1447","line":19,"column":3,"nodeType":"1271","messageId":"1272","endLine":19,"endColumn":29},{"ruleId":"1273","severity":1,"message":"1274","line":58,"column":6,"nodeType":"1275","endLine":58,"endColumn":23,"suggestions":"1448"},{"ruleId":"1273","severity":1,"message":"1274","line":64,"column":6,"nodeType":"1275","endLine":64,"endColumn":23,"suggestions":"1449"},{"ruleId":"1273","severity":1,"message":"1281","line":477,"column":6,"nodeType":"1275","endLine":477,"endColumn":20,"suggestions":"1450"},{"ruleId":"1269","severity":1,"message":"1287","line":2,"column":15,"nodeType":"1271","messageId":"1272","endLine":2,"endColumn":26},{"ruleId":"1269","severity":1,"message":"1372","line":3,"column":10,"nodeType":"1271","messageId":"1272","endLine":3,"endColumn":17},{"ruleId":"1269","severity":1,"message":"1373","line":7,"column":10,"nodeType":"1271","messageId":"1272","endLine":7,"endColumn":18},{"ruleId":"1269","severity":1,"message":"1433","line":10,"column":3,"nodeType":"1271","messageId":"1272","endLine":10,"endColumn":12},{"ruleId":"1269","severity":1,"message":"1451","line":11,"column":3,"nodeType":"1271","messageId":"1272","endLine":11,"endColumn":10},{"ruleId":"1269","severity":1,"message":"1452","line":13,"column":3,"nodeType":"1271","messageId":"1272","endLine":13,"endColumn":15},{"ruleId":"1269","severity":1,"message":"1453","line":14,"column":3,"nodeType":"1271","messageId":"1272","endLine":14,"endColumn":21},{"ruleId":"1269","severity":1,"message":"1454","line":16,"column":3,"nodeType":"1271","messageId":"1272","endLine":16,"endColumn":28},{"ruleId":"1269","severity":1,"message":"1455","line":17,"column":3,"nodeType":"1271","messageId":"1272","endLine":17,"endColumn":26},{"ruleId":"1269","severity":1,"message":"1456","line":18,"column":3,"nodeType":"1271","messageId":"1272","endLine":18,"endColumn":28},{"ruleId":"1269","severity":1,"message":"1378","line":21,"column":3,"nodeType":"1271","messageId":"1272","endLine":21,"endColumn":20},{"ruleId":"1273","severity":1,"message":"1274","line":67,"column":6,"nodeType":"1275","endLine":67,"endColumn":23,"suggestions":"1457"},{"ruleId":"1321","severity":1,"message":"1322","line":115,"column":9,"nodeType":"1297","endLine":115,"endColumn":65},{"ruleId":"1458","severity":1,"message":"1459","line":13,"column":1,"nodeType":"1460","endLine":51,"endColumn":2},{"ruleId":"1323","severity":1,"message":"1324","line":25,"column":13,"nodeType":"1297","endLine":36,"endColumn":14},{"ruleId":"1269","severity":1,"message":"1287","line":2,"column":15,"nodeType":"1271","messageId":"1272","endLine":2,"endColumn":26},{"ruleId":"1269","severity":1,"message":"1372","line":3,"column":10,"nodeType":"1271","messageId":"1272","endLine":3,"endColumn":17},{"ruleId":"1269","severity":1,"message":"1461","line":12,"column":3,"nodeType":"1271","messageId":"1272","endLine":12,"endColumn":15},{"ruleId":"1269","severity":1,"message":"1462","line":13,"column":3,"nodeType":"1271","messageId":"1272","endLine":13,"endColumn":26},{"ruleId":"1269","severity":1,"message":"1463","line":14,"column":3,"nodeType":"1271","messageId":"1272","endLine":14,"endColumn":10},{"ruleId":"1269","severity":1,"message":"1464","line":15,"column":3,"nodeType":"1271","messageId":"1272","endLine":15,"endColumn":28},{"ruleId":"1269","severity":1,"message":"1465","line":16,"column":3,"nodeType":"1271","messageId":"1272","endLine":16,"endColumn":28},{"ruleId":"1273","severity":1,"message":"1274","line":60,"column":6,"nodeType":"1275","endLine":60,"endColumn":23,"suggestions":"1466"},{"ruleId":"1321","severity":1,"message":"1322","line":46,"column":17,"nodeType":"1297","endLine":46,"endColumn":59},{"ruleId":"1323","severity":1,"message":"1324","line":120,"column":23,"nodeType":"1297","endLine":125,"endColumn":24},{"ruleId":"1323","severity":1,"message":"1324","line":129,"column":23,"nodeType":"1297","endLine":138,"endColumn":24},{"ruleId":"1323","severity":1,"message":"1324","line":204,"column":15,"nodeType":"1297","endLine":207,"endColumn":16},{"ruleId":"1323","severity":1,"message":"1324","line":211,"column":15,"nodeType":"1297","endLine":214,"endColumn":16},{"ruleId":"1323","severity":1,"message":"1324","line":218,"column":15,"nodeType":"1297","endLine":221,"endColumn":16},{"ruleId":"1269","severity":1,"message":"1467","line":8,"column":3,"nodeType":"1271","messageId":"1272","endLine":8,"endColumn":29},{"ruleId":"1269","severity":1,"message":"1468","line":9,"column":3,"nodeType":"1271","messageId":"1272","endLine":9,"endColumn":11},{"ruleId":"1269","severity":1,"message":"1469","line":46,"column":35,"nodeType":"1271","messageId":"1272","endLine":46,"endColumn":40},{"ruleId":"1273","severity":1,"message":"1303","line":84,"column":6,"nodeType":"1275","endLine":84,"endColumn":25,"suggestions":"1470"},{"ruleId":"1273","severity":1,"message":"1425","line":136,"column":6,"nodeType":"1275","endLine":136,"endColumn":8,"suggestions":"1471"},{"ruleId":"1269","severity":1,"message":"1433","line":5,"column":3,"nodeType":"1271","messageId":"1272","endLine":5,"endColumn":12},{"ruleId":"1273","severity":1,"message":"1274","line":43,"column":6,"nodeType":"1275","endLine":43,"endColumn":23,"suggestions":"1472"},{"ruleId":"1273","severity":1,"message":"1281","line":381,"column":6,"nodeType":"1275","endLine":381,"endColumn":14,"suggestions":"1473"},{"ruleId":"1273","severity":1,"message":"1281","line":66,"column":6,"nodeType":"1275","endLine":66,"endColumn":20,"suggestions":"1474"},{"ruleId":"1273","severity":1,"message":"1274","line":43,"column":6,"nodeType":"1275","endLine":43,"endColumn":23,"suggestions":"1475"},{"ruleId":"1273","severity":1,"message":"1281","line":380,"column":6,"nodeType":"1275","endLine":380,"endColumn":14,"suggestions":"1476"},{"ruleId":"1273","severity":1,"message":"1274","line":46,"column":6,"nodeType":"1275","endLine":46,"endColumn":23,"suggestions":"1477"},{"ruleId":"1273","severity":1,"message":"1274","line":46,"column":6,"nodeType":"1275","endLine":46,"endColumn":23,"suggestions":"1478"},{"ruleId":"1273","severity":1,"message":"1274","line":44,"column":6,"nodeType":"1275","endLine":44,"endColumn":23,"suggestions":"1479"},{"ruleId":"1269","severity":1,"message":"1433","line":5,"column":3,"nodeType":"1271","messageId":"1272","endLine":5,"endColumn":12},{"ruleId":"1273","severity":1,"message":"1281","line":64,"column":6,"nodeType":"1275","endLine":64,"endColumn":20,"suggestions":"1480"},{"ruleId":"1269","severity":1,"message":"1481","line":114,"column":9,"nodeType":"1271","messageId":"1272","endLine":114,"endColumn":23},{"ruleId":"1273","severity":1,"message":"1274","line":53,"column":6,"nodeType":"1275","endLine":53,"endColumn":26,"suggestions":"1482"},{"ruleId":"1269","severity":1,"message":"1380","line":10,"column":3,"nodeType":"1271","messageId":"1272","endLine":10,"endColumn":18},{"ruleId":"1273","severity":1,"message":"1281","line":81,"column":6,"nodeType":"1275","endLine":81,"endColumn":33,"suggestions":"1483"},{"ruleId":"1269","severity":1,"message":"1481","line":132,"column":9,"nodeType":"1271","messageId":"1272","endLine":132,"endColumn":23},{"ruleId":"1273","severity":1,"message":"1281","line":78,"column":8,"nodeType":"1275","endLine":78,"endColumn":35,"suggestions":"1484"},{"ruleId":"1269","severity":1,"message":"1481","line":129,"column":11,"nodeType":"1271","messageId":"1272","endLine":129,"endColumn":25},{"ruleId":"1273","severity":1,"message":"1485","line":151,"column":8,"nodeType":"1275","endLine":151,"endColumn":41,"suggestions":"1486"},{"ruleId":"1273","severity":1,"message":"1274","line":155,"column":8,"nodeType":"1275","endLine":155,"endColumn":33,"suggestions":"1487"},{"ruleId":"1269","severity":1,"message":"1488","line":3,"column":10,"nodeType":"1271","messageId":"1272","endLine":3,"endColumn":17},{"ruleId":"1273","severity":1,"message":"1489","line":103,"column":6,"nodeType":"1275","endLine":103,"endColumn":21,"suggestions":"1490"},{"ruleId":"1273","severity":1,"message":"1303","line":342,"column":6,"nodeType":"1275","endLine":342,"endColumn":39,"suggestions":"1491"},{"ruleId":"1323","severity":1,"message":"1324","line":250,"column":9,"nodeType":"1297","endLine":254,"endColumn":10},{"ruleId":"1273","severity":1,"message":"1281","line":95,"column":6,"nodeType":"1275","endLine":95,"endColumn":19,"suggestions":"1492"},{"ruleId":"1273","severity":1,"message":"1303","line":94,"column":6,"nodeType":"1275","endLine":94,"endColumn":39,"suggestions":"1493"},{"ruleId":"1269","severity":1,"message":"1288","line":5,"column":10,"nodeType":"1271","messageId":"1272","endLine":5,"endColumn":28},{"ruleId":"1273","severity":1,"message":"1281","line":83,"column":6,"nodeType":"1275","endLine":83,"endColumn":47,"suggestions":"1494"},{"ruleId":"1269","severity":1,"message":"1495","line":85,"column":10,"nodeType":"1271","messageId":"1272","endLine":85,"endColumn":15},{"ruleId":"1269","severity":1,"message":"1496","line":85,"column":17,"nodeType":"1271","messageId":"1272","endLine":85,"endColumn":25},{"ruleId":"1269","severity":1,"message":"1497","line":128,"column":10,"nodeType":"1271","messageId":"1272","endLine":128,"endColumn":28},{"ruleId":"1269","severity":1,"message":"1288","line":5,"column":10,"nodeType":"1271","messageId":"1272","endLine":5,"endColumn":28},{"ruleId":"1269","severity":1,"message":"1289","line":12,"column":3,"nodeType":"1271","messageId":"1272","endLine":12,"endColumn":33},{"ruleId":"1273","severity":1,"message":"1281","line":72,"column":6,"nodeType":"1275","endLine":72,"endColumn":35,"suggestions":"1498"},{"ruleId":"1269","severity":1,"message":"1495","line":74,"column":10,"nodeType":"1271","messageId":"1272","endLine":74,"endColumn":15},{"ruleId":"1269","severity":1,"message":"1496","line":74,"column":17,"nodeType":"1271","messageId":"1272","endLine":74,"endColumn":25},{"ruleId":"1269","severity":1,"message":"1499","line":19,"column":7,"nodeType":"1271","messageId":"1272","endLine":19,"endColumn":15},{"ruleId":"1269","severity":1,"message":"1500","line":35,"column":7,"nodeType":"1271","messageId":"1272","endLine":35,"endColumn":27},{"ruleId":"1269","severity":1,"message":"1415","line":180,"column":17,"nodeType":"1271","messageId":"1272","endLine":180,"endColumn":22},{"ruleId":"1269","severity":1,"message":"1501","line":187,"column":10,"nodeType":"1271","messageId":"1272","endLine":187,"endColumn":26},{"ruleId":"1269","severity":1,"message":"1502","line":205,"column":10,"nodeType":"1271","messageId":"1272","endLine":205,"endColumn":23},{"ruleId":"1269","severity":1,"message":"1503","line":241,"column":10,"nodeType":"1271","messageId":"1272","endLine":241,"endColumn":28},{"ruleId":"1269","severity":1,"message":"1504","line":277,"column":10,"nodeType":"1271","messageId":"1272","endLine":277,"endColumn":20},{"ruleId":"1269","severity":1,"message":"1289","line":15,"column":3,"nodeType":"1271","messageId":"1272","endLine":15,"endColumn":33},{"ruleId":"1269","severity":1,"message":"1505","line":117,"column":21,"nodeType":"1271","messageId":"1272","endLine":117,"endColumn":30},{"ruleId":"1273","severity":1,"message":"1281","line":129,"column":6,"nodeType":"1275","endLine":129,"endColumn":41,"suggestions":"1506"},{"ruleId":"1269","severity":1,"message":"1495","line":131,"column":10,"nodeType":"1271","messageId":"1272","endLine":131,"endColumn":15},{"ruleId":"1269","severity":1,"message":"1496","line":131,"column":17,"nodeType":"1271","messageId":"1272","endLine":131,"endColumn":25},{"ruleId":"1507","severity":1,"message":"1508","line":345,"column":33,"nodeType":"1271","messageId":"1509","endLine":345,"endColumn":38},{"ruleId":"1273","severity":1,"message":"1510","line":557,"column":6,"nodeType":"1275","endLine":557,"endColumn":23,"suggestions":"1511"},{"ruleId":"1269","severity":1,"message":"1512","line":1,"column":17,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":25},{"ruleId":"1269","severity":1,"message":"1513","line":4,"column":3,"nodeType":"1271","messageId":"1272","endLine":4,"endColumn":8},{"ruleId":"1269","severity":1,"message":"1514","line":5,"column":3,"nodeType":"1271","messageId":"1272","endLine":5,"endColumn":26},{"ruleId":"1273","severity":1,"message":"1274","line":65,"column":6,"nodeType":"1275","endLine":65,"endColumn":35,"suggestions":"1515"},{"ruleId":"1269","severity":1,"message":"1516","line":15,"column":3,"nodeType":"1271","messageId":"1272","endLine":15,"endColumn":19},{"ruleId":"1273","severity":1,"message":"1274","line":77,"column":6,"nodeType":"1275","endLine":77,"endColumn":35,"suggestions":"1517"},{"ruleId":"1273","severity":1,"message":"1274","line":93,"column":6,"nodeType":"1275","endLine":93,"endColumn":21,"suggestions":"1518"},{"ruleId":"1269","severity":1,"message":"1288","line":3,"column":10,"nodeType":"1271","messageId":"1272","endLine":3,"endColumn":28},{"ruleId":"1273","severity":1,"message":"1303","line":72,"column":6,"nodeType":"1275","endLine":72,"endColumn":14,"suggestions":"1519"},{"ruleId":"1269","severity":1,"message":"1286","line":1,"column":28,"nodeType":"1271","messageId":"1272","endLine":1,"endColumn":36},{"ruleId":"1273","severity":1,"message":"1303","line":33,"column":6,"nodeType":"1275","endLine":33,"endColumn":14,"suggestions":"1520"},{"ruleId":"1269","severity":1,"message":"1288","line":3,"column":10,"nodeType":"1271","messageId":"1272","endLine":3,"endColumn":28},{"ruleId":"1273","severity":1,"message":"1303","line":58,"column":6,"nodeType":"1275","endLine":58,"endColumn":14,"suggestions":"1521"},{"ruleId":"1273","severity":1,"message":"1303","line":53,"column":6,"nodeType":"1275","endLine":53,"endColumn":14,"suggestions":"1522"},{"ruleId":"1273","severity":1,"message":"1303","line":38,"column":6,"nodeType":"1275","endLine":38,"endColumn":14,"suggestions":"1523"},{"ruleId":"1273","severity":1,"message":"1303","line":28,"column":6,"nodeType":"1275","endLine":28,"endColumn":14,"suggestions":"1524"},{"ruleId":"1269","severity":1,"message":"1525","line":51,"column":7,"nodeType":"1271","messageId":"1272","endLine":51,"endColumn":34},{"ruleId":"1269","severity":1,"message":"1526","line":57,"column":7,"nodeType":"1271","messageId":"1272","endLine":57,"endColumn":33},{"ruleId":"1269","severity":1,"message":"1527","line":177,"column":10,"nodeType":"1271","messageId":"1272","endLine":177,"endColumn":21},{"ruleId":"1273","severity":1,"message":"1274","line":53,"column":6,"nodeType":"1275","endLine":53,"endColumn":35,"suggestions":"1528"},{"ruleId":"1269","severity":1,"message":"1529","line":49,"column":7,"nodeType":"1271","messageId":"1272","endLine":49,"endColumn":41},{"ruleId":"1269","severity":1,"message":"1530","line":57,"column":7,"nodeType":"1271","messageId":"1272","endLine":57,"endColumn":40},{"ruleId":"1269","severity":1,"message":"1469","line":104,"column":23,"nodeType":"1271","messageId":"1272","endLine":104,"endColumn":28},{"ruleId":"1273","severity":1,"message":"1531","line":422,"column":8,"nodeType":"1275","endLine":422,"endColumn":30,"suggestions":"1532"},{"ruleId":"1273","severity":1,"message":"1305","line":66,"column":8,"nodeType":"1275","endLine":66,"endColumn":20,"suggestions":"1533"},{"ruleId":"1273","severity":1,"message":"1274","line":89,"column":6,"nodeType":"1275","endLine":89,"endColumn":35,"suggestions":"1534"},"no-native-reassign",["1535"],"no-negated-in-lhs",["1536"],"@typescript-eslint/no-unused-vars","'confirmOrder' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.","ArrayExpression",["1537"],"'QueryRefractionArgs' is defined but never used.",["1538"],"React Hook useEffect has missing dependencies: 'getValues', 'patientEncounterLimitQuery', and 'providerAppointmentsQuery'. Either include them or remove the dependency array.",["1539"],"React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["1540"],["1541"],"React Hook useEffect has a missing dependency: 'pages'. Either include it or remove the dependency array.",["1542"],"'useState' is defined but never used.","'useMutation' is defined but never used.","'AUTO_SAVE_INTERVAL' is defined but never used.","'MutationUpdatePatientChartArgs' is defined but never used.","'UPDATE_PATIENT_CHART' is assigned a value but never used.",["1543"],"'notifDispatch' is assigned a value but never used.","'AppointmentContext' is defined but never used.",["1544"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'chatMessagesQuery' and 'claim.ID'. Either include them or remove the dependency array.",["1545"],"React Hook useEffect has a missing dependency: 'getUserQuery'. Either include it or remove the dependency array.",["1546"],["1547"],"React Hook useEffect has a missing dependency: 'reset'. Either include it or remove the dependency array.",["1548"],"React Hook useEffect has a missing dependency: 'refractionForm'. Either include it or remove the dependency array.",["1549"],"React Hook useEffect has a missing dependency: 'eyewearShopIdValue'. Either include it or remove the dependency array.",["1550"],["1551"],["1552"],"'MedicalPrescriptionOrder' is defined but never used.","React Hook useEffect has a missing dependency: 'pharmacyIdValue'. Either include it or remove the dependency array.",["1553"],"React Hook useEffect has a missing dependency: 'client.cache'. Either include it or remove the dependency array.",["1554"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["1555"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'props' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["1556"],"'order' is assigned a value but never used.","'setOrder' is assigned a value but never used.","'setErrors' is assigned a value but never used.",["1557"],["1558"],["1559"],"'CONFIRM_PAYMENT' is assigned a value but never used.","'REQUEST_WAIVER_BATCH' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'requestWaiver'. Either include it or remove the dependency array.",["1560"],"'useQuery' is defined but never used.","'referralModel' is assigned a value but never used.","'setReferralModel' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'appointmentQuery' and 'paginationInput'. Either include them or remove the dependency array.",["1561"],"React Hook useEffect has a missing dependency: 'appointmentQuery'. Either include it or remove the dependency array.",["1562"],"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.",["1563"],["1564"],"'handleNextClick' is assigned a value but never used.","'handlePrevClick' is assigned a value but never used.","'handlePatientClick' is assigned a value but never used.","'UPDATE_ALLERGY' is assigned a value but never used.",["1565"],["1566"],["1567"],["1568"],["1569"],["1570"],["1571"],"'HashRouter' is defined but never used.","React Hook useEffect has missing dependencies: 'handlePageSelect' and 'location.pathname'. Either include them or remove the dependency array.",["1572"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","React Hook useEffect has missing dependencies: 'orderQuery' and 'paginationInput'. Either include them or remove the dependency array.",["1573"],"React Hook useEffect has a missing dependency: 'orderQuery'. Either include it or remove the dependency array.",["1574"],"'statusText' is assigned a value but never used.",["1575"],"'useEffect' is defined but never used.","'useForm' is defined but never used.","'BILLINGS' is defined but never used.","'SUPPLIES' is defined but never used.","'MutationDeleteTreatmentTypeArgs' is defined but never used.","'MutationSaveTreatmentTypeArgs' is defined but never used.","'MutationUpdateTreatmentTypeArgs' is defined but never used.","'QueryBillingsArgs' is defined but never used.","'QuerySuppliesArgs' is defined but never used.","'TreatmentStatus' is defined but never used.","'TreatmentType' is defined but never used.","'TreatmentTypeInput' is defined but never used.","'TreatmentTypeUpdateInput' is defined but never used.",["1576"],["1577"],["1578"],"React Hook useEffect has a missing dependency: 'searchQuery'. Either include it or remove the dependency array.",["1579"],"jsx-a11y/role-supports-aria-props","The attribute aria-expanded is not supported by the role textbox. This role is implicit on the element input.","React Hook useEffect has a missing dependency: 'searchItemDetailsQuery'. Either include it or remove the dependency array.",["1580"],"React Hook useEffect has a missing dependency: 'onUpdateTab'. Either include it or remove the dependency array. If 'onUpdateTab' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1581"],"React Hook useEffect has a missing dependency: 'lockPatientChartMutation'. Either include it or remove the dependency array.",["1582"],"React Hook useEffect has a missing dependency: 'patientChartLocked'. Either include it or remove the dependency array.",["1583"],"'ClinicalDecisionSupport' is assigned a value but never used.","'DiagnosisComponent' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'commonChatQuery'. Either include it or remove the dependency array.",["1584"],["1585"],"'QueryPastIllnessesArgs' is defined but never used.","React Hook useEffect has a missing dependency: 'historyLazyQuery'. Either include it or remove the dependency array.",["1586"],["1587"],["1588"],"React Hook useEffect has missing dependencies: 'onInputChange' and 'uri'. Either include them or remove the dependency array.",["1589"],"'Reac' is defined but never used.",["1590"],"React Hook useEffect has missing dependencies: 'homeStats.data?.nurseHomeStats.checkedIn', 'homeStats.data?.nurseHomeStats.checkedOut', 'homeStats.data?.nurseHomeStats.scheduled', 'homeStats.data?.physicianHomeStats.checkedIn', 'homeStats.data?.physicianHomeStats.checkedOut', and 'homeStats.data?.physicianHomeStats.scheduled'. Either include them or remove the dependency array.",["1591"],"'error' is assigned a value but never used.",["1592"],"'requestPaymentWaiver' is assigned a value but never used.","'useHistory' is defined but never used.","'resetAll' is assigned a value but never used.",["1593"],["1594"],["1595"],["1596"],"'UserType' is defined but never used.","React Hook useEffect has a missing dependency: 'notifDispatch'. Either include it or remove the dependency array.",["1597"],"'CONFIRM_PAYMENT_BATCH' is assigned a value but never used.",["1598"],"'MutationConfirmOrderArgs' is defined but never used.",["1599"],"'confirmPayment' is assigned a value but never used.",["1600"],"'LabStatus' is defined but never used.","React Hook useEffect has missing dependencies: 'appointmentQuery' and 'patientId'. Either include them or remove the dependency array.",["1601"],["1602"],"'data' is assigned a value but never used.",["1603"],["1604"],"React Hook useEffect has missing dependencies: 'appointmentQuery' and 'setValue'. Either include them or remove the dependency array.",["1605"],"MemberExpression","'useNotificationDispatch' is defined but never used.",["1606"],["1607"],"'MutationSaveSurgicalProcedureTypeArgs' is defined but never used.","'SurgicalProcedureTypeInput' is defined but never used.",["1608"],["1609"],["1610"],"'LabType' is defined but never used.","'LabTypeInput' is defined but never used.","'LabTypeUpdateInput' is defined but never used.","'MutationDeleteLabTypeArgs' is defined but never used.","'MutationSaveLabTypeArgs' is defined but never used.","'MutationUpdateLabTypeArgs' is defined but never used.",["1611"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'BillingInput' is defined but never used.","'MutationSaveBillingArgs' is defined but never used.","'Billing' is defined but never used.","'MutationUpdateBillingArgs' is defined but never used.","'MutationDeleteBillingArgs' is defined but never used.",["1612"],"'MutationUpdatePharmacyArgs' is defined but never used.","'Pharmacy' is defined but never used.","'reset' is assigned a value but never used.",["1613"],["1614"],["1615"],["1616"],["1617"],["1618"],["1619"],["1620"],["1621"],["1622"],["1623"],"'onDeleteSubmit' is assigned a value but never used.",["1624"],["1625"],["1626"],"React Hook useEffect has a missing dependency: 'filter'. Either include it or remove the dependency array. You can also do a functional update 'setFilter(f => ...)' if you only need 'filter' in the 'setFilter' call.",["1627"],["1628"],"'Spinner' is defined but never used.","React Hook useEffect has missing dependencies: 'patientChart?.surgicalProcedure.id' and 'updateSurgeryFitness'. Either include them or remove the dependency array.",["1629"],["1630"],["1631"],["1632"],["1633"],"'timer' is assigned a value but never used.","'setTimer' is assigned a value but never used.","'updatePatientChart' is assigned a value but never used.",["1634"],"'SAVE_IOP' is assigned a value but never used.","'SAVE_AUTO_REFRACTION' is assigned a value but never used.","'saveExternalExam' is assigned a value but never used.","'saveCoverTest' is assigned a value but never used.","'saveOcularMotility' is assigned a value but never used.","'savePupils' is assigned a value but never used.","'getValues' is assigned a value but never used.",["1635"],"@typescript-eslint/no-redeclare","'index' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'hpiComponentLazyQuery'. Either include it or remove the dependency array.",["1636"],"'Fragment' is defined but never used.","'Maybe' is defined but never used.","'MedicalPrescriptionEdge' is defined but never used.",["1637"],"'ChevronRightIcon' is defined but never used.",["1638"],["1639"],["1640"],["1641"],["1642"],["1643"],["1644"],["1645"],"'DELETE_LAB_RIGHT_EYE_SKETCH' is assigned a value but never used.","'DELETE_LAB_LEFT_EYE_SKETCH' is assigned a value but never used.","'updateOrder' is assigned a value but never used.",["1646"],"'DELETE_DIAGNOSTIC_RIGHT_EYE_SKETCH' is assigned a value but never used.","'DELETE_DIAGNOSTIC_LEFT_EYE_SKETCH' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'values?.id'. Either include it or remove the dependency array.",["1647"],["1648"],["1649"],"no-global-assign","no-unsafe-negation",{"desc":"1650","fix":"1651"},{"desc":"1652","fix":"1653"},{"desc":"1654","fix":"1655"},{"desc":"1656","fix":"1657"},{"desc":"1658","fix":"1659"},{"desc":"1660","fix":"1661"},{"desc":"1662","fix":"1663"},{"desc":"1658","fix":"1664"},{"desc":"1665","fix":"1666"},{"desc":"1667","fix":"1668"},{"desc":"1669","fix":"1670"},{"desc":"1671","fix":"1672"},{"desc":"1673","fix":"1674"},{"desc":"1675","fix":"1676"},{"desc":"1671","fix":"1677"},{"desc":"1669","fix":"1678"},{"desc":"1679","fix":"1680"},{"desc":"1681","fix":"1682"},{"desc":"1683","fix":"1684"},{"desc":"1650","fix":"1685"},{"desc":"1686","fix":"1687"},{"desc":"1656","fix":"1688"},{"desc":"1689","fix":"1690"},{"desc":"1691","fix":"1692"},{"desc":"1693","fix":"1694"},{"desc":"1695","fix":"1696"},{"desc":"1658","fix":"1697"},{"desc":"1658","fix":"1698"},{"desc":"1671","fix":"1699"},{"desc":"1658","fix":"1700"},{"desc":"1701","fix":"1702"},{"desc":"1658","fix":"1703"},{"desc":"1701","fix":"1704"},{"desc":"1705","fix":"1706"},{"desc":"1669","fix":"1707"},{"desc":"1708","fix":"1709"},{"desc":"1710","fix":"1711"},{"desc":"1712","fix":"1713"},{"desc":"1658","fix":"1714"},{"desc":"1658","fix":"1715"},{"desc":"1658","fix":"1716"},{"desc":"1701","fix":"1717"},{"desc":"1718","fix":"1719"},{"desc":"1720","fix":"1721"},{"desc":"1722","fix":"1723"},{"desc":"1724","fix":"1725"},{"desc":"1726","fix":"1727"},{"desc":"1728","fix":"1729"},{"desc":"1730","fix":"1731"},{"desc":"1732","fix":"1733"},{"desc":"1671","fix":"1734"},{"desc":"1671","fix":"1735"},{"desc":"1736","fix":"1737"},{"desc":"1650","fix":"1738"},{"desc":"1739","fix":"1740"},{"desc":"1650","fix":"1741"},{"desc":"1650","fix":"1742"},{"desc":"1658","fix":"1743"},{"desc":"1650","fix":"1744"},{"desc":"1652","fix":"1745"},{"desc":"1746","fix":"1747"},{"desc":"1691","fix":"1748"},{"desc":"1654","fix":"1749"},{"desc":"1656","fix":"1750"},{"desc":"1751","fix":"1752"},{"desc":"1722","fix":"1753"},{"desc":"1754","fix":"1755"},{"desc":"1756","fix":"1757"},{"desc":"1758","fix":"1759"},{"desc":"1658","fix":"1760"},{"desc":"1658","fix":"1761"},{"desc":"1658","fix":"1762"},{"desc":"1658","fix":"1763"},{"desc":"1764","fix":"1765"},{"desc":"1658","fix":"1766"},{"desc":"1658","fix":"1767"},{"desc":"1768","fix":"1769"},{"desc":"1746","fix":"1770"},{"desc":"1658","fix":"1771"},{"desc":"1701","fix":"1772"},{"desc":"1764","fix":"1773"},{"desc":"1658","fix":"1774"},{"desc":"1701","fix":"1775"},{"desc":"1658","fix":"1776"},{"desc":"1658","fix":"1777"},{"desc":"1658","fix":"1778"},{"desc":"1764","fix":"1779"},{"desc":"1780","fix":"1781"},{"desc":"1782","fix":"1783"},{"desc":"1782","fix":"1784"},{"desc":"1785","fix":"1786"},{"desc":"1650","fix":"1787"},{"desc":"1788","fix":"1789"},{"desc":"1730","fix":"1790"},{"desc":"1791","fix":"1792"},{"desc":"1730","fix":"1793"},{"desc":"1794","fix":"1795"},{"desc":"1796","fix":"1797"},{"desc":"1798","fix":"1799"},{"desc":"1800","fix":"1801"},{"desc":"1669","fix":"1802"},{"desc":"1669","fix":"1803"},{"desc":"1705","fix":"1804"},{"desc":"1671","fix":"1805"},{"desc":"1671","fix":"1806"},{"desc":"1671","fix":"1807"},{"desc":"1671","fix":"1808"},{"desc":"1671","fix":"1809"},{"desc":"1671","fix":"1810"},{"desc":"1669","fix":"1811"},{"desc":"1812","fix":"1813"},{"desc":"1673","fix":"1814"},{"desc":"1669","fix":"1815"},"Update the dependencies array to be: [filter, paginationInput, refetch]",{"range":"1816","text":"1817"},"Update the dependencies array to be: [paginationInput, filter, refetch]",{"range":"1818","text":"1819"},"Update the dependencies array to be: [selectedOrder.user.id, appointmentInput.checkInTime, getValues, providerAppointmentsQuery, patientEncounterLimitQuery]",{"range":"1820","text":"1821"},"Update the dependencies array to be: [lookupQuery.data?.visitTypes, setValue]",{"range":"1822","text":"1823"},"Update the dependencies array to be: [paginationInput, refetch]",{"range":"1824","text":"1825"},"Update the dependencies array to be: [accessTokenQuery.data, data, pages]",{"range":"1826","text":"1827"},"Update the dependencies array to be: [setValue, stickieNote]",{"range":"1828","text":"1829"},{"range":"1830","text":"1825"},"Update the dependencies array to be: [chat, chatMessagesQuery, claim.ID]",{"range":"1831","text":"1832"},"Update the dependencies array to be: [getUserQuery, isNewChat, queryUserId]",{"range":"1833","text":"1834"},"Update the dependencies array to be: [paginationInput, refetch, searchTerm]",{"range":"1835","text":"1836"},"Update the dependencies array to be: [reset, values]",{"range":"1837","text":"1838"},"Update the dependencies array to be: [refraction, refractionForm]",{"range":"1839","text":"1840"},"Update the dependencies array to be: [values, data, eyewearShopIdValue]",{"range":"1841","text":"1842"},{"range":"1843","text":"1838"},{"range":"1844","text":"1836"},"Update the dependencies array to be: [values, data, pharmacyIdValue]",{"range":"1845","text":"1846"},"Update the dependencies array to be: [client.cache]",{"range":"1847","text":"1848"},"Update the dependencies array to be: [history]",{"range":"1849","text":"1850"},{"range":"1851","text":"1817"},"Update the dependencies array to be: [getValues, patientEncounterLimitQuery, providerAppointmentsQuery, selectedOrder.user.id]",{"range":"1852","text":"1853"},{"range":"1854","text":"1823"},"Update the dependencies array to be: [data.refraction, refractionForm]",{"range":"1855","text":"1856"},"Update the dependencies array to be: [requestWaiver, requestedWaiver]",{"range":"1857","text":"1858"},"Update the dependencies array to be: [appointmentQuery, paginationInput]",{"range":"1859","text":"1860"},"Update the dependencies array to be: [paginationInput, debouncedSearchTerm, appointmentQuery]",{"range":"1861","text":"1862"},{"range":"1863","text":"1825"},{"range":"1864","text":"1825"},{"range":"1865","text":"1838"},{"range":"1866","text":"1825"},"Update the dependencies array to be: [setValue, values]",{"range":"1867","text":"1868"},{"range":"1869","text":"1825"},{"range":"1870","text":"1868"},"Update the dependencies array to be: [refetch, showFavorites]",{"range":"1871","text":"1872"},{"range":"1873","text":"1836"},"Update the dependencies array to be: [handlePageSelect, location.pathname]",{"range":"1874","text":"1875"},"Update the dependencies array to be: [orderQuery, paginationInput]",{"range":"1876","text":"1877"},"Update the dependencies array to be: [debouncedSearchTerm, orderQuery, paginationInput]",{"range":"1878","text":"1879"},{"range":"1880","text":"1825"},{"range":"1881","text":"1825"},{"range":"1882","text":"1825"},{"range":"1883","text":"1868"},"Update the dependencies array to be: [debouncedSearchTerm, searchQuery]",{"range":"1884","text":"1885"},"Update the dependencies array to be: [isHovered, searchItemDetailsQuery]",{"range":"1886","text":"1887"},"Update the dependencies array to be: [data, onUpdateTab]",{"range":"1888","text":"1889"},"Update the dependencies array to be: [data?.appointment.patientChart, lockPatientChart, lockPatientChartMutation]",{"range":"1890","text":"1891"},"Update the dependencies array to be: [data?.appointment.patientChart, patientChartLocked]",{"range":"1892","text":"1893"},"Update the dependencies array to be: [commonChatQuery, selectedUserId]",{"range":"1894","text":"1895"},"Update the dependencies array to be: [patientChart?.surgicalProcedure, reset]",{"range":"1896","text":"1897"},"Update the dependencies array to be: [appointment, historyLazyQuery]",{"range":"1898","text":"1899"},{"range":"1900","text":"1838"},{"range":"1901","text":"1838"},"Update the dependencies array to be: [onInputChange, uri, userInput]",{"range":"1902","text":"1903"},{"range":"1904","text":"1817"},"Update the dependencies array to be: [homeStats.data?.nurseHomeStats.checkedIn, homeStats.data?.nurseHomeStats.checkedOut, homeStats.data?.nurseHomeStats.scheduled, homeStats.data?.physicianHomeStats.checkedIn, homeStats.data?.physicianHomeStats.checkedOut, homeStats.data?.physicianHomeStats.scheduled]",{"range":"1905","text":"1906"},{"range":"1907","text":"1817"},{"range":"1908","text":"1817"},{"range":"1909","text":"1825"},{"range":"1910","text":"1817"},{"range":"1911","text":"1819"},"Update the dependencies array to be: [notifDispatch]",{"range":"1912","text":"1913"},{"range":"1914","text":"1858"},{"range":"1915","text":"1821"},{"range":"1916","text":"1823"},"Update the dependencies array to be: [appointmentQuery, dateRange, patientId]",{"range":"1917","text":"1918"},{"range":"1919","text":"1889"},"Update the dependencies array to be: [appointmentQuery, updateId]",{"range":"1920","text":"1921"},"Update the dependencies array to be: [getValues, patientEncounterLimitQuery, providerAppointmentsQuery]",{"range":"1922","text":"1923"},"Update the dependencies array to be: [appointmentQuery, setValue]",{"range":"1924","text":"1925"},{"range":"1926","text":"1825"},{"range":"1927","text":"1825"},{"range":"1928","text":"1825"},{"range":"1929","text":"1825"},"Update the dependencies array to be: [values, data, setValue]",{"range":"1930","text":"1931"},{"range":"1932","text":"1825"},{"range":"1933","text":"1825"},"Update the dependencies array to be: [values, userTypes, reset]",{"range":"1934","text":"1935"},{"range":"1936","text":"1913"},{"range":"1937","text":"1825"},{"range":"1938","text":"1868"},{"range":"1939","text":"1931"},{"range":"1940","text":"1825"},{"range":"1941","text":"1868"},{"range":"1942","text":"1825"},{"range":"1943","text":"1825"},{"range":"1944","text":"1825"},{"range":"1945","text":"1931"},"Update the dependencies array to be: [hpiComponentTypeId, refetch]",{"range":"1946","text":"1947"},"Update the dependencies array to be: [values, billingQuery.data, setValue]",{"range":"1948","text":"1949"},{"range":"1950","text":"1949"},"Update the dependencies array to be: [filter, queryStatus, queryToolbarLookup]",{"range":"1951","text":"1952"},{"range":"1953","text":"1817"},"Update the dependencies array to be: [fitForSurgery, patientChart?.surgicalProcedure.id, updateSurgeryFitness]",{"range":"1954","text":"1955"},{"range":"1956","text":"1897"},"Update the dependencies array to be: [appointment, setValue]",{"range":"1957","text":"1958"},{"range":"1959","text":"1897"},"Update the dependencies array to be: [patientChart.differentialDiagnosisNote, setValue]",{"range":"1960","text":"1961"},"Update the dependencies array to be: [patientChart.diagnosisNote, setValue]",{"range":"1962","text":"1963"},"Update the dependencies array to be: [patientChart.chiefComplaintsNote, setValue]",{"range":"1964","text":"1965"},"Update the dependencies array to be: [openIndex, data, hpiComponentLazyQuery]",{"range":"1966","text":"1967"},{"range":"1968","text":"1836"},{"range":"1969","text":"1836"},{"range":"1970","text":"1872"},{"range":"1971","text":"1838"},{"range":"1972","text":"1838"},{"range":"1973","text":"1838"},{"range":"1974","text":"1838"},{"range":"1975","text":"1838"},{"range":"1976","text":"1838"},{"range":"1977","text":"1836"},"Update the dependencies array to be: [data, patientChartId, values?.id]",{"range":"1978","text":"1979"},{"range":"1980","text":"1840"},{"range":"1981","text":"1836"},[3889,3914],"[filter, paginationInput, refetch]",[2570,2595],"[paginationInput, filter, refetch]",[4734,4787],"[selectedOrder.user.id, appointmentInput.checkInTime, getValues, providerAppointmentsQuery, patientEncounterLimitQuery]",[5004,5034],"[lookupQuery.data?.visitTypes, setValue]",[1316,1333],"[paginationInput, refetch]",[15415,15444],"[accessTokenQuery.data, data, pages]",[936,949],"[setValue, stickieNote]",[1431,1448],[2469,2475],"[chat, chatMessagesQuery, claim.ID]",[2639,2663],"[getUserQuery, isNewChat, queryUserId]",[1516,1545],"[paginationInput, refetch, searchTerm]",[2007,2015],"[reset, values]",[2181,2193],"[refraction, refractionForm]",[2941,2955],"[values, data, eyewearShopIdValue]",[1437,1445],[1404,1433],[2428,2442],"[values, data, pharmacyIdValue]",[1880,1882],"[client.cache]",[713,730],"[history]",[3370,3395],[4384,4429],"[getValues, patientEncounterLimitQuery, providerAppointmentsQuery, selectedOrder.user.id]",[4645,4675],[2724,2742],"[data.refraction, refractionForm]",[2198,2215],"[requestWaiver, requestedWaiver]",[1830,1832],"[appointmentQuery, paginationInput]",[1995,2033],"[paginationInput, debouncedSearchTerm, appointmentQuery]",[1768,1785],[911,928],[1564,1572],[1199,1216],[12052,12060],"[setValue, values]",[1412,1429],[12934,12942],[2318,2333],"[refetch, showFavorites]",[4435,4464],[3511,3513],"[handlePageSelect, location.pathname]",[1766,1768],"[orderQuery, paginationInput]",[1980,2018],"[debouncedSearchTerm, orderQuery, paginationInput]",[1370,1387],[1646,1663],[1401,1418],[12840,12848],[1590,1611],"[debouncedSearchTerm, searchQuery]",[7233,7244],"[isHovered, searchItemDetailsQuery]",[11892,11898],"[data, onUpdateTab]",[12905,12955],"[data?.appointment.patientChart, lockPatientChart, lockPatientChartMutation]",[13138,13170],"[data?.appointment.patientChart, patientChartLocked]",[1227,1243],"[commonChatQuery, selectedUserId]",[1764,1797],"[patientChart?.surgicalProcedure, reset]",[4236,4249],"[appointment, historyLazyQuery]",[1007,1015],[1112,1120],[1960,1971],"[onInputChange, uri, userInput]",[3080,3105],[1673,1675],"[homeStats.data?.nurseHomeStats.checkedIn, homeStats.data?.nurseHomeStats.checkedOut, homeStats.data?.nurseHomeStats.scheduled, homeStats.data?.physicianHomeStats.checkedIn, homeStats.data?.physicianHomeStats.checkedOut, homeStats.data?.physicianHomeStats.scheduled]",[2901,2926],[3455,3480],[3631,3648],[2418,2443],[2474,2499],[1786,1788],"[notifDispatch]",[2577,2594],[5086,5139],[7648,7678],[3216,3227],"[appointmentQuery, dateRange, patientId]",[3968,3974],[6262,6272],"[appointmentQuery, updateId]",[7407,7446],"[getValues, patientEncounterLimitQuery, providerAppointmentsQuery]",[7810,7831],"[appointmentQuery, setValue]",[1507,1524],[1775,1792],[1455,1472],[1552,1569],[15255,15269],"[values, data, setValue]",[1708,1725],[1492,1509],[2442,2461],"[values, userTypes, reset]",[3589,3591],[1266,1283],[12100,12108],[1810,1824],[1272,1289],[12055,12063],[1391,1408],[1361,1378],[1294,1311],[1611,1625],[1482,1502],"[hpiComponentTypeId, refetch]",[2172,2199],"[values, billingQuery.data, setValue]",[2342,2369],[3853,3886],"[filter, queryStatus, queryToolbarLookup]",[3936,3961],[2874,2889],"[fitForSurgery, patientChart?.surgicalProcedure.id, updateSurgeryFitness]",[14030,14063],[2804,2817],"[appointment, setValue]",[4457,4490],[2176,2217],"[patientChart.differentialDiagnosisNote, setValue]",[1917,1946],"[patientChart.diagnosisNote, setValue]",[3114,3149],"[patientChart.chiefComplaintsNote, setValue]",[18194,18211],"[openIndex, data, hpiComponentLazyQuery]",[1564,1593],[1887,1916],[2307,2322],[2529,2537],[923,931],[1855,1863],[1651,1659],[1163,1171],[701,709],[1268,1297],[13159,13181],"[data, patientChartId, values?.id]",[1758,1770],[2238,2267]]